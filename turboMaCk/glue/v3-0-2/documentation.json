[{"name":"Glue","comment":" Composing Elm applications from smaller isolated parts (modules).\nYou can think about this as about lightweight abstraction built around `(model, Cmd msg)` pair\nthat reduces boilerplate required for composing `init` `update` `view` and `subscribe` using\n[`Cmd.map`](https://package.elm-lang.org/packages/elm/core/latest/Platform-Cmd#map),\n[`Sub.map`](https://package.elm-lang.org/packages/elm/core/latest/Platform-Sub#map)\nand [`Html.map`](https://package.elm-lang.org/packages/elm/html/latest/Html#map).\n\n\n# Datatype Definition\n\n@docs Glue\n\n\n# Constructors\n\n@docs simple, poly, glue\n\n\n# Basics\n\n@docs init, update, view, subscriptions, subscriptionsWhen\n\n\n# Custom Operations\n\n@docs updateWith, trigger, updateWithTrigger\n\n\n# Helpers\n\n@docs map\n\n","unions":[{"name":"Glue","comment":" `Glue` defines interface mappings between parent and child module.\n\nYou can create `Glue` with the [`simple`](#simple), [`poly`](#poly) or [`glue`](#glue) function constructor in case of non-standard APIs.\nEvery glue layer is defined in terms of `Model`, `[Submodule].Model` `Msg`, `[Submodule].Msg` and `a`.\n\n  - `model` is `Model` of parent\n  - `subModel` is `Model` of child\n  - `msg` is `Msg` of parent\n  - `subMsg` is `Msg` of child\n  - `a` is type of `Msg` child's views return in `Html a`. Usually it's either `msg` or `subMsg`.\n\n","args":["model","subModel","msg","subMsg","a"],"cases":[]}],"aliases":[],"values":[{"name":"glue","comment":" Low level [Glue](#Glue) constructor.\n\nUseful when you can't use either [`simple`](#simple) or [`poly`](#poly).\nThis can be caused by nonstandard API where one of the functions uses generic `msg` and other `SubModule.Msg`.\n\n_Always use this constructor as your last option for constructing [`Glue`](#Glue)._\n\n","type":"{ msg : a -> msg, get : model -> subModel, set : subModel -> model -> model, init : () -> ( subModel, Platform.Cmd.Cmd msg ), update : subMsg -> model -> ( subModel, Platform.Cmd.Cmd msg ), subscriptions : model -> Platform.Sub.Sub msg } -> Glue.Glue model subModel msg subMsg a"},{"name":"init","comment":" Initialize child module in parent.\n\n    type alias Model =\n        { message : String\n        , firstCounterModel : Counter.Model\n        , secondCounterModel : Counter.Model\n        }\n\n    init : ( Model, Cmd msg )\n    init =\n        ( Model \"\", Cmd.none )\n            |> Glue.init firstCounter\n            |> Glue.init secondCounter\n\n","type":"Glue.Glue model subModel msg subMsg a -> ( subModel -> b, Platform.Cmd.Cmd msg ) -> ( b, Platform.Cmd.Cmd msg )"},{"name":"map","comment":" Tiny abstraction over [`Cmd.map`](https://package.elm-lang.org/packages/elm/core/latest/Platform-Cmd#map)\npacked in `(model, Cmd msg)` pair that helps you to reduce boilerplate while turning generic TEA app to [`Glue`](#Glue) using [`glue`](#glue) constructor.\n\nThis function is generally useful for turning update and init functions in [`Glue`](#glue) definition.\n\n    type alias Model =\n        { message : String\n        , counter : Counter.Model\n        }\n\n    type Msg\n        = CounterMsg Counter.Msg\n\n    -- this works like `simple` constructor\n    counter : Glue Model Counter.Model Msg Counter.Msg\n    counter =\n        Glue.glue\n            { msg = CounterMsg\n            , get = .counterModel\n            , set = \\subModel model -> { model | counterModel = subModel }\n            , init = \\_ -> Counter.init |> Glue.map CounterMsg\n            , update =\n                \\subMsg model ->\n                    Counter.update subMsg model.counterModel\n                        |> Glue.map CounterMsg\n            , subscriptions = \\_ -> Sub.none\n            }\n\n","type":"(subMsg -> msg) -> ( subModel, Platform.Cmd.Cmd subMsg ) -> ( subModel, Platform.Cmd.Cmd msg )"},{"name":"poly","comment":" Polymorphic [`Glue`](#Glue) constructor.\n\nUseful when module's api has generic `msg` type. Module can also perform action bubbling to parent.\n\n","type":"{ get : model -> subModel, set : subModel -> model -> model, init : () -> ( subModel, Platform.Cmd.Cmd msg ), update : subMsg -> subModel -> ( subModel, Platform.Cmd.Cmd msg ), subscriptions : subModel -> Platform.Sub.Sub msg } -> Glue.Glue model subModel msg subMsg msg"},{"name":"simple","comment":" Simple [`Glue`](#Glue) constructor.\n\nGenerally useful for composing independent TEA modules together.\nIf your module's API is polymorphic use [`poly`](#poly) constructor instead.\n\n","type":"{ msg : subMsg -> msg, get : model -> subModel, set : subModel -> model -> model, init : () -> ( subModel, Platform.Cmd.Cmd subMsg ), update : subMsg -> subModel -> ( subModel, Platform.Cmd.Cmd subMsg ), subscriptions : subModel -> Platform.Sub.Sub subMsg } -> Glue.Glue model subModel msg subMsg subMsg"},{"name":"subscriptions","comment":" Subscribe to subscriptions defined in submodule.\n\n    subscriptions : Model -> Sub Msg\n    subscriptions =\n        (\\model -> Mouse.clicks Clicked)\n            |> Glue.subscriptions subModule\n            |> Glue.subscriptions anotherNestedModule\n\n","type":"Glue.Glue model subModel msg subMsg a -> (model -> Platform.Sub.Sub msg) -> model -> Platform.Sub.Sub msg"},{"name":"subscriptionsWhen","comment":" Subscribe to subscriptions when model is in some state.\n\n    type alias Model =\n        { subModuleSubsOn : Bool\n        , subModuleModel : SubModule.Model\n        }\n\n    subscriptions : Model -> Sub Msg\n    subscriptions =\n        (\\_ -> Mouse.clicks Clicked)\n            |> Glue.subscriptionsWhen .subModuleSubOn subModule\n\n","type":"(model -> Basics.Bool) -> Glue.Glue model subModel msg subMsg a -> (model -> Platform.Sub.Sub msg) -> model -> Platform.Sub.Sub msg"},{"name":"trigger","comment":" Trigger Cmd in by child's function\n\n_Commands are async. Therefore trigger doesn't make any update directly.\nUse [`updateWith`](#updateWith) over `trigger` when you can._\n\n    triggerIncrement : Counter.Model -> Cmd Counter.Msg\n    triggerIncrement _ ->\n        Task.perform identity <| Task.succeed Counter.Increment\n\n    update : Msg -> Model -> ( Model, Cmd Msg )\n    update msg model =\n        case msg of\n            IncrementCounter ->\n                ( model, Cmd.none )\n                    |> Glue.trigger counter triggerIncrement\n\n","type":"Glue.Glue model subModel msg subMsg a -> (subModel -> Platform.Cmd.Cmd a) -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"},{"name":"update","comment":" Update submodule's state using its `update` function.\n\n    type Msg\n        = CounterMsg Counter.Msg\n\n    update : Msg -> Model -> ( Model, Cmd Msg )\n    update msg model =\n        case msg of\n            CounterMsg counterMsg ->\n                ( { model | message = \"Counter has changed\" }, Cmd.none )\n                    |> Glue.update counter counterMsg\n\n","type":"Glue.Glue model subModel msg subMsg a -> subMsg -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"},{"name":"updateWith","comment":" Use child's exposed function to update it's model\n\n    incrementBy : Int -> Counter.Model -> Counter.Model\n    incrementBy num model =\n        model + num\n\n    update : Msg -> Model -> ( Model, Cmd Msg )\n    update msg model =\n        case msg of\n            IncrementBy10 ->\n                ( model\n                    |> Glue.updateWith counter (incrementBy 10)\n                , Cmd.none\n                )\n\n","type":"Glue.Glue model subModel msg subMsg a -> (subModel -> subModel) -> model -> model"},{"name":"updateWithTrigger","comment":" Similar to [`update`](#update) but using custom function.\n\n    increment : Counter.Model -> ( Counter.Model, Cmd Counter.Msg )\n    increment model =\n        ( model + 1, Cmd.none )\n\n    update : Msg -> Model -> ( Model, Cmd Msg )\n    update msg model =\n        case msg of\n            IncrementCounter ->\n                ( model, Cmd.none )\n                    |> Glue.updateWithTrigger counter increment\n\n","type":"Glue.Glue model subModel msg subMsg a -> (subModel -> ( subModel, Platform.Cmd.Cmd a )) -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"},{"name":"view","comment":" Render submodule's view.\n\n    view : Model -> Html msg\n    view model =\n        Html.div []\n            [ Html.text model.message\n            , Glue.view counter Counter.view model\n            ]\n\n","type":"Glue.Glue model subModel msg subMsg a -> (subModel -> Html.Html a) -> model -> Html.Html msg"}],"binops":[]}]