[{"name":"FormElements.CheckBox","comment":" A text input widget for Elm\n\n\n# TEA\n\n@docs view\n\n","unions":[],"aliases":[],"values":[{"name":"view","comment":" view\nRenders a checkbox\n","type":"Basics.Bool -> String.String -> (Basics.Bool -> a) -> Html.Html a"}],"binops":[]},{"name":"FormElements.RadioButton","comment":" A text input widget for Elm\n\n\n# TEA\n\n@docs view, Props\n\n","unions":[],"aliases":[{"name":"Props","comment":" Props\nProperties for rendering the view\n","args":["x","y"],"type":"{ selected : x, options : List.List ( String.String, x ), onSelect : x -> y }"}],"values":[{"name":"view","comment":" view\nView for displaying the radio button group\n","type":"FormElements.RadioButton.Props x y -> Html.Html y"}],"binops":[]},{"name":"FormElements.SuperSelect","comment":" A super select widget for Elm\n\n\n# TEA\n\n@docs view, init, update, subscriptions, defaultProps, Msg, Model, Props, Option\n\n","unions":[{"name":"Msg","comment":" Msg\n\n  - `TextInputMsg` the messages used by the underlying `TextInput` element\n  - `OptionSelected` fired when an option is selected\n\n","args":["a"],"cases":[["NoOp",[]],["Clear",[]],["TextInputMsg",["FormElements.TextInput.Msg"]],["UnsetFocusedOption",[]],["SetFocusedOption",["Basics.Int"]],["OptionSelected",["FormElements.SuperSelect.Option a"]],["KeyPress",["FormElements.SuperSelect.Props a","Basics.Int"]]]}],"aliases":[{"name":"Model","comment":" model\n\n  - `id` The unique id of the element. This is passed as the first argument to `init`\n  - `value` The currently selected option\n  - `inputValue` The text input value for the underlying `TextInput` element\n  - `textInputData` Key for allocating the model of the underlying `TextInput` element\n\n","args":[],"type":"{ id : String.String, textInputData : FormElements.TextInput.Model, focusedOption : Maybe.Maybe Basics.Int, hasFocus : Basics.Bool }"},{"name":"Option","comment":" Option\nOption for the select menu\n","args":["a"],"type":"( String.String, a )"},{"name":"Props","comment":" props\n\n  - `errorText` If you wish to communicate the selection as invalid, set it to the error message\n  - `helperText` Helper text to guide the user's input. Not shown if `errorText` is set to non-`Nothing`\n  - `label` input label for the text input\n\n","args":["a"],"type":"{ id : String.String, options : List.List (FormElements.SuperSelect.Option a), errorText : Maybe.Maybe String.String, helperText : Maybe.Maybe String.String, label : String.String, value : Maybe.Maybe a, inputValue : String.String }"}],"values":[{"name":"defaultProps","comment":" defaultProps\nDefault properties for the element. The props actually passed in should generally have `label` set to\na non-empty string\n","type":"FormElements.SuperSelect.Props a"},{"name":"init","comment":" Init\nCreates the initial model for the element. `id` should be a _unique_ string identifier.\nThe second argument are the `Option` records since these are often initially decided.\nIf you are loading the options asynchronously as a response to user input, the options\nshould be set via a `setNewOptions` in your update function.\n","type":"String.String -> ( FormElements.SuperSelect.Model, Platform.Cmd.Cmd (FormElements.SuperSelect.Msg a) )"},{"name":"subscriptions","comment":" subscriptions\nAs this element requires listening to keyboard events, the subscriptions must be added\nto your main function so it may do so.\n","type":"FormElements.SuperSelect.Props a -> Platform.Sub.Sub (FormElements.SuperSelect.Msg a)"},{"name":"update","comment":" Update\nThe function for updating the element.\n","type":"FormElements.SuperSelect.Msg a -> FormElements.SuperSelect.Model -> FormElements.SuperSelect.Props a -> ( FormElements.SuperSelect.Model, Platform.Cmd.Cmd (FormElements.SuperSelect.Msg a), ( Maybe.Maybe a, String.String ) )"},{"name":"view","comment":" View\nThe view for displaying the element.\n","type":"FormElements.SuperSelect.Model -> FormElements.SuperSelect.Props a -> Html.Html (FormElements.SuperSelect.Msg a)"}],"binops":[]},{"name":"FormElements.TextInput","comment":" A text input widget for Elm\n\n\n# TEA\n\n@docs view, init, update, defaultProps, Msg, Model, Props\n\n","unions":[{"name":"Msg","comment":" Msg\n\n  - `OnInput`\n\n","args":[],"cases":[["NoOp",[]],["OnInput",["String.String"]],["OnFocus",[]],["OnBlur",[]],["OnInputKeyPress",["Basics.Int"]]]}],"aliases":[{"name":"Model","comment":" Model\nTracks the internal foxus state of the element\n","args":[],"type":"{ id : String.String, hasFocus : Basics.Bool }"},{"name":"Props","comment":" Props\n\n  - `id` Unique id for the elements\n  - `label` Label for the text input\n  - `value` The value of the text input\n  - `errorText` Set this to a string when there is a validation error to display to the user. Will override `helperText`\n  - `helperText` Helpful text displayed under the text input\n\n","args":[],"type":"{ id : String.String, label : String.String, value : String.String, errorText : Maybe.Maybe String.String, helperText : Maybe.Maybe String.String, fieldType : FormElements.TextInput.FieldType }"}],"values":[{"name":"defaultProps","comment":" defaultProps\nDefault props for the text input. Generally the label should be set before passing\nthese defaults to the `view`\n","type":"FormElements.TextInput.Props"},{"name":"init","comment":" init\nInitialization for the text input model. The `id` passed in _must be unique_\n","type":"String.String -> ( FormElements.TextInput.Model, Platform.Cmd.Cmd FormElements.TextInput.Msg )"},{"name":"update","comment":" update\nThe update function for the text input element\n","type":"FormElements.TextInput.Msg -> FormElements.TextInput.Model -> ( FormElements.TextInput.Model, Platform.Cmd.Cmd FormElements.TextInput.Msg )"},{"name":"view","comment":" view\nThe view function for displaying the text input element\n","type":"FormElements.TextInput.Model -> FormElements.TextInput.Props -> Html.Html FormElements.TextInput.Msg"}],"binops":[]}]