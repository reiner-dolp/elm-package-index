[{"name":"FormElements.CheckBox","comment":" A simple checkbox\n\n\n# Definitions\n\n@docs view\n\n","unions":[],"aliases":[],"values":[{"name":"view","comment":" Renders a checkbox. The first argument is whether or not it is selected.\nThe second argument represents the label.\n","type":"Basics.Bool -> String.String -> (Basics.Bool -> a) -> Html.Html a"}],"binops":[]},{"name":"FormElements.RadioButtons","comment":" A group of radio buttons\n\n\n# Definitions\n\n@docs view, Props\n\n","unions":[],"aliases":[{"name":"Props","comment":" Configurable properties for rendering the view\n","args":["x","y"],"type":"{ selected : x, options : List.List ( String.String, x ), onSelect : x -> y }"}],"values":[{"name":"view","comment":" Renders the radio button group\n","type":"FormElements.RadioButtons.Props x y -> Html.Html y"}],"binops":[]},{"name":"FormElements.SuperSelect","comment":" A \"select\" control that uses auto-complete to assist users.\n\n\n# Definitions\n\n@docs view, init, update, subscriptions, defaultProps, Msg, Model, Props, Option, SuperSelectResult, ExternalMsg\n\n","unions":[{"name":"ExternalMsg","comment":" The external message type for the [Component Result](https://package.elm-lang.org/packages/z5h/component-result/latest/)\n","args":["a"],"cases":[["ValueChanged",["String.String","Maybe.Maybe a"]]]},{"name":"Msg","comment":" Messages output from the `view` in the Elm runtime. Combine these with `update`\n","args":["a"],"cases":[["NoOp",[]],["Clear",[]],["TextInputMsg",["FormElements.TextInput.Msg"]],["UnsetFocusedOption",[]],["SetFocusedOption",["Basics.Int"]],["OptionSelected",["FormElements.SuperSelect.Option a"]],["KeyPress",["FormElements.SuperSelect.Props a","Basics.Int"]]]}],"aliases":[{"name":"Model","comment":" The model the element uses to render itself.\n","args":[],"type":"{ id : String.String, textInputData : FormElements.TextInput.Model, focusedOption : Maybe.Maybe Basics.Int, hasFocus : Basics.Bool }"},{"name":"Option","comment":" An \"option\" for the menu. Each option has a label, and an associated value of whatever type.\n","args":["a"],"type":"( String.String, a )"},{"name":"Props","comment":" Configurable properties for rendering the view\n","args":["a"],"type":"{ id : String.String, options : List.List (FormElements.SuperSelect.Option a), errorText : Maybe.Maybe String.String, helperText : Maybe.Maybe String.String, label : String.String, value : Maybe.Maybe a, inputValue : String.String }"},{"name":"SuperSelectResult","comment":" Alias for the element's [Component Result](https://package.elm-lang.org/packages/z5h/component-result/latest/) type.\n","args":["a"],"type":"ComponentResult.ComponentResult FormElements.SuperSelect.Model (FormElements.SuperSelect.Msg a) (FormElements.SuperSelect.ExternalMsg a) Basics.Never"}],"values":[{"name":"defaultProps","comment":" Default properties for the element. The props actually passed in should generally have `label` set to\na non-empty string\n","type":"FormElements.SuperSelect.Props a"},{"name":"init","comment":" Creates the initial model for the element. `id` should be a _unique_ string identifier.\n","type":"String.String -> ( FormElements.SuperSelect.Model, Platform.Cmd.Cmd (FormElements.SuperSelect.Msg a) )"},{"name":"subscriptions","comment":" subscriptions\nAs this element requires listening to keyboard events, the subscriptions must be added\nto your main function so it may do so. For each instance of this element in your application,\nwire up the subscriptions along with the associated `Props` you would give to that instance's `view`\nfunction\n","type":"FormElements.SuperSelect.Props a -> Platform.Sub.Sub (FormElements.SuperSelect.Msg a)"},{"name":"update","comment":" The main function for updating the element in response to `Msg`\n","type":"FormElements.SuperSelect.Msg a -> FormElements.SuperSelect.Model -> FormElements.SuperSelect.Props a -> FormElements.SuperSelect.SuperSelectResult a"},{"name":"view","comment":" The view for displaying the element.\n","type":"FormElements.SuperSelect.Model -> FormElements.SuperSelect.Props a -> Html.Html (FormElements.SuperSelect.Msg a)"}],"binops":[]},{"name":"FormElements.Switch","comment":" A simple on/off switch. Use for cases where the user has one option out of a binary selection\n\n\n# Definitions\n\n@docs view\n\n","unions":[],"aliases":[],"values":[{"name":"view","comment":" The view function for displaying the element.\n","type":"Basics.Bool -> String.String -> (Basics.Bool -> a) -> Html.Html a"}],"binops":[]},{"name":"FormElements.TextInput","comment":" A text input widget for Elm\n\n\n# TEA\n\n@docs view, init, update, defaultProps, Msg, Model, Props, TextInputResult, ExternalMsg\n\n","unions":[{"name":"ExternalMsg","comment":" ExternalMsg\n\n  - `ValueChanged String`\n\n","args":[],"cases":[["ValueChanged",["String.String"]]]},{"name":"Msg","comment":" Msg\n\n  - `OnInput`\n\n","args":[],"cases":[["NoOp",[]],["OnInput",["String.String"]],["OnFocus",[]],["OnBlur",[]],["OnInputKeyPress",["Basics.Int"]]]}],"aliases":[{"name":"Model","comment":" Model\nTracks the internal foxus state of the element\n","args":[],"type":"{ id : String.String, hasFocus : Basics.Bool }"},{"name":"Props","comment":" Configurable properties used to display and control some of the element's behavior\n","args":[],"type":"{ id : String.String, label : String.String, value : String.String, errorText : Maybe.Maybe String.String, helperText : Maybe.Maybe String.String, fieldType : FormElements.TextInput.FieldType }"},{"name":"TextInputResult","comment":" Type alias for the [Component Result](https://package.elm-lang.org/packages/z5h/component-result/latest/) of this elements\n","args":[],"type":"ComponentResult.ComponentResult FormElements.TextInput.Model FormElements.TextInput.Msg FormElements.TextInput.ExternalMsg Basics.Never"}],"values":[{"name":"defaultProps","comment":" Useful default props to extend off when supplying props to the element.\n","type":"FormElements.TextInput.Props"},{"name":"init","comment":" Initialization for the text input model. The `id` passed in _must be unique_\n","type":"String.String -> ( FormElements.TextInput.Model, Platform.Cmd.Cmd FormElements.TextInput.Msg )"},{"name":"update","comment":" The main update function for the text input element\n","type":"FormElements.TextInput.Msg -> FormElements.TextInput.Model -> FormElements.TextInput.TextInputResult"},{"name":"view","comment":" The view function for displaying the text input element\n","type":"FormElements.TextInput.Model -> FormElements.TextInput.Props -> Html.Html FormElements.TextInput.Msg"}],"binops":[]}]