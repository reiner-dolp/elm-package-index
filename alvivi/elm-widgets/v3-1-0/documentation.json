[
  {
    "name": "Widgets.Themes.Mint",
    "comment": " A basic theme for the whole Widgets library. The purpose of this theme\nis to be an example on how to build themes, but it can also be use for\nprototyping.\n\nYou can also use this theme as a base style, and then apply your own styles.\n\nThis theme requires a css normalization base. See global for more information.\n\n\n# Initialization\n\n@docs global\n\n\n# Theming Widgets\n\n@docs button, input, select\n\n\n# Theming Html Nodes\n\n@docs text\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "button",
        "comment": " Apply Mint theme to Widgets.Form button.\n\n    Form.button [ Widgets.Themes.Mint.button ] [ Html.text \"Title\" ]\n\n",
        "type": "Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "global",
        "comment": " Common styles needed by other parts of this theme. Use this to initialize\nthe theme together with Widgets.Normalize.snippets.\n\n    view : Model -> Html Msg\n    view model =\n        Html.main_ []\n            [ Css.Foreign.global Widgets.Normalize.snippets\n            , Widgets.Themes.Mint.global\n            , Html.text \"My Content\"\n            ]\n\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "input",
        "comment": " Apply Mint theme to Widgets.Form input controls.\n\n    Form.input { id = \"id\" , description = \"desc\" , type_ = \"text\" }\n      [ Widgets.Themes.Mint.input ] []\n\n",
        "type": "Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "select",
        "comment": " Apply Mint theme to Widgets.Form select control.\n\n    Form.select { id = \"id\" , description = \"desc\" }\n      [ Widgets.Themes.Mint.input ] []\n\n",
        "type": "Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "text",
        "comment": " Apply a simple text styling to an Html node.\n\n    Html.h1 [ Html.css [ Widgets.Themes.text ] ] [ H.text \"My Header\" ]\n\n",
        "type": "Css.Style"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Widgets.Form",
    "comment": " Form controls following ARIA recommendations.\n\n\n# Controls\n\n@docs button, email, input, link, text, select, textarea\n\n\n## Semantic Wrappers\n\n@docs currentPassword, firstName, lastName, newPassword, nickname, organization, submit\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "button",
        "comment": " A straightforward button. Only `css`, `disabled`, `html` and events\nattributes are supported by buttons.\n",
        "type": "List (Widgets.Form.Attributes.Attribute msg) -> List (Html.Styled.Html msg) -> Html.Styled.Html msg"
      },
      {
        "name": "currentPassword",
        "comment": " A semantic password input with a current password value. Useful for log in\nforms. Equal to a password input control with autocomplete attribute set to\n`\"current-password\"`.\n",
        "type": "{ id : String, description : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      },
      {
        "name": "email",
        "comment": " A semantic email input. Equal to an email input control with autocomplete\nattribute set to `\"email\"`.\n",
        "type": "{ id : String, description : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      },
      {
        "name": "firstName",
        "comment": " A semantic text input with a first name value. Equal to a text input control\nwith autocomplete attribute set to `\"given-name\"`.\n",
        "type": "{ id : String, description : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      },
      {
        "name": "input",
        "comment": " A generic input control. An `id` and a `description` is always required.\n`type` is the type of input, it could be `text`, `email`, `submit` or any\n[other](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).\nUsually, is better to use the other semantic controls provided by this module.\n",
        "type": "{ id : String, description : String, type_ : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      },
      {
        "name": "lastName",
        "comment": " A semantic text input with a last name value. Equal to a text input control\nwith autocomplete attribute set to `\"family-name\"`.\n",
        "type": "{ id : String, description : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      },
      {
        "name": "link",
        "comment": " A link is a button, but a `<a>` node is used instead of a `<button>`.\n",
        "type": "List (Widgets.Form.Attributes.Attribute msg) -> List (Html.Styled.Html msg) -> Html.Styled.Html msg"
      },
      {
        "name": "newPassword",
        "comment": " A semantic password input with a new password value. Useful for sign up\nforms. Equal to a password input control with autocomplete attribute set to\n`\"new-password\"`.\n",
        "type": "{ id : String, description : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      },
      {
        "name": "nickname",
        "comment": " A semantic text input with a nickname value. Equal to a text input control\nwith autocomplete attribute set to `\"nickname\"`.\n",
        "type": "{ id : String, description : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      },
      {
        "name": "organization",
        "comment": " A semantic text input with an organization name value. Equal to a text input\ncontrol with autocomplete attribute set to `\"organization\"`.\n",
        "type": "{ id : String, description : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      },
      {
        "name": "select",
        "comment": " A select control. An `id` and a `description` is always required. You can\nadd options using the `control` element.\n\n    Form.select { id = \"select\", description = \"A description\" } []\n        [ ( Elements.control, H.option [] [ H.text \"one\" ] )\n        , ( Elements.control, H.option [] [ H.text \"two\" ] )\n        , ( Elements.control, H.option [] [ H.text \"three\" ] )\n        ]\n\n",
        "type": "{ id : String, description : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      },
      {
        "name": "submit",
        "comment": " A semantic button for submitting forms. Same as button but with `type`\nattribute set to `\"submit\"`.\n",
        "type": "List (Widgets.Form.Attributes.Attribute msg) -> List (Html.Styled.Html msg) -> Html.Styled.Html msg"
      },
      {
        "name": "text",
        "comment": " A text input. Equal to a input control with a type attribute set to text.\n",
        "type": "{ id : String, description : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      },
      {
        "name": "textarea",
        "comment": " A textarea control. An `id` and a `description` is always required.\n",
        "type": "{ id : String, description : String } -> List (Widgets.Form.Attributes.Attribute msg) -> List ( Widgets.Form.Elements.Element, Html.Styled.Html msg ) -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Widgets.Form.Attributes",
    "comment": " Attributes for Form controls.\n\n@docs Attribute\n\n\n# Properties\n\n@docs autocomplete, batch, css, descriptionLabel, disabled, error, focused, html, placeholder, required, value\n\n\n# Events\n\n@docs onBlur, onClick, onFocus, onInput\n\n\n# Attribute Modifiers\n\n@docs whenErred, whenFocused, whenHasIcon, whenHasType\n\n",
    "aliases": [
      {
        "name": "Attribute",
        "comment": " A Form control attribute\n",
        "args": [
          "msg"
        ],
        "type": "Widgets.Form.Internal.Attributes.Attribute msg"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "autocomplete",
        "comment": " Set the type of autocomplete for the control. Valid options can be found\n[here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autocomplete).\nAll controls exposed in Widgets.Form but input set this value for you.\n",
        "type": "String -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "batch",
        "comment": " Batch several attributes together. Useful for making you own custom\ncontrols.\n",
        "type": "List (Widgets.Form.Attributes.Attribute msg) -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "css",
        "comment": " Sets custom css for an Element of the controls.\n",
        "type": "Widgets.Form.Elements.Element -> List Css.Style -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "descriptionLabel",
        "comment": " Show the description as text. Note that this overridden if you provide your\nown custom Label element.\n",
        "type": "Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "disabled",
        "comment": " Sets the control as disabled.\n",
        "type": "Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "error",
        "comment": " Sets an error message for the control. Usually used when validating fields.\n",
        "type": "String -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "focused",
        "comment": " Sets the control as focused.\n",
        "type": "Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "html",
        "comment": " Sets the control as focused\n",
        "type": "Widgets.Form.Elements.Element -> List (Html.Styled.Attribute msg) -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "onBlur",
        "comment": " Notifies when the control loose the focus.\n",
        "type": "msg -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "onClick",
        "comment": " Notifies when the control is clicked.\n",
        "type": "msg -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "onFocus",
        "comment": " Notifies when the control is focused.\n",
        "type": "msg -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "onInput",
        "comment": " Notifies when the control has a new value.\n",
        "type": "(String -> msg) -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "placeholder",
        "comment": " Sets the placeholder of the control.\n",
        "type": "String -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "required",
        "comment": " Sets the control as required.\n",
        "type": "Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "value",
        "comment": " Sets the value of the control.\n",
        "type": "String -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "whenErred",
        "comment": " Applies attributes only when the control has an error. You can combine\nthis attribute with css to add style to some elements when the control has some\nerror.\n",
        "type": "List (Widgets.Form.Attributes.Attribute msg) -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "whenFocused",
        "comment": " Applies attributes only when the control is focused. You can combine this\nattribute with css to add style to some elements when the control is focused.\n",
        "type": "List (Widgets.Form.Attributes.Attribute msg) -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "whenHasIcon",
        "comment": " Applies attributes only when the control has an icon. Useful for building\nthemes.\n",
        "type": "List (Widgets.Form.Attributes.Attribute msg) -> Widgets.Form.Attributes.Attribute msg"
      },
      {
        "name": "whenHasType",
        "comment": " Applies attributes only when the control type is equal to the provided\ntype. For example, the following code applies the style only when control is\nan email input:\n\n    whenHasType \"email\" [ Html.css [ Css.backgroundColor Color.green  ] ]\n\nAll controls have a type, even when the internal tag has not tag. That means\nthat we can use `\"select\"` for select controls, `\"textarea\"` for textareas, etc.\n\n",
        "type": "String -> List (Widgets.Form.Attributes.Attribute msg) -> Widgets.Form.Attributes.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Widgets.Form.Elements",
    "comment": " This module expose functions to create references to the elements of the\ncontrols. This allows us to insert custom html elements into the controls or\nadd custom css to them.\n\nFor adding custom style to some parts (elements) of a control we use the\nattribute `css`:\n\n    Form.email { id = \"my-email-input\", description = \"your email\" }\n        [ Attributes.css Elements.label\n            [ Css.backgroundColor Color.green\n            ]\n        ]\n        []\n\nTo insert custom html elements into a control we add them to the last parameter\nof a control:\n\n    Form.email { id = \"my-email-input\", description = \"A description\" }\n        []\n        [ ( Elements.description\n          , Html.text \"My custom description\"\n          )\n        , ( Elements.icon\n          , Html.img [] []\n          )\n        ]\n\n@docs Element, control, description, error, icon, label, option\n\n",
    "aliases": [
      {
        "name": "Element",
        "comment": " Identifies each sub element of a Form control.\n",
        "args": [],
        "type": "Widgets.Form.Internal.Elements.Element"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "control",
        "comment": " The control itself. The `input` element for an email control or the\n`button` element for a button control.\n\nWhen inserting a node tagged as control it will be added as child of the input\nnode of the control (usually `input`, `textarea`, `select`, etc).\n\nWhen adding style to a control it will be added to the main control element.\n\n",
        "type": "Widgets.Form.Elements.Element"
      },
      {
        "name": "description",
        "comment": " The description of a control.\n\nWhen inserting a node tagged as description it will replace the description\ntext provided by `descriptionLabel` attribute.\n\nWhen adding style to a control with `description` it will add the style the\ndefault text provided by `descriptionLabel`. This style is ignored if a custom\ndescription node is provided.\n\n",
        "type": "Widgets.Form.Elements.Element"
      },
      {
        "name": "error",
        "comment": " An error linked to a control.\n\nWhen using an error node it will appear below the control, in a div wrapper.\nAdding an error node will mark the control as invalid. `error` attributes will\nbe ignored when an error node is provided.\n\nWhen adding style to a control with `error` it will add the style the wrapper\nof the error element.\n\n",
        "type": "Widgets.Form.Elements.Element"
      },
      {
        "name": "icon",
        "comment": " The icon of a control.\n\nWhen inserting a node tagged as icon it will be added over the control, using\nan `div` container with an `absolute` position.\n\nWhen adding style to a control with `icon` it will add the style the\nthe container of the icon. Note that this style does not have any effect if\nwe do not provide any icon node. `position` is set to `absolute` by default but\nwe can override this setting.\n\n",
        "type": "Widgets.Form.Elements.Element"
      },
      {
        "name": "label",
        "comment": " The label (or wrapper) of a control.\n\n`label` is ignored when used as custom node.\n\nWhen adding style to a control with `label` it will add the style the\nlabel node of the control. This is usually the wrapper or the parent of the\nwhole control.\n\n",
        "type": "Widgets.Form.Elements.Element"
      },
      {
        "name": "option",
        "comment": " A helper useful for creating simple options for select controls.\n\n    Form.select { id = \"my-select\", description = \"A description\" }\n        []\n        [ Elements.option { selected = True, text = \"One\", value = \"1\" }\n        , Elements.option { selected = True, text = \"Two\", value = \"2\" }\n        , Elements.option { selected = True, text = \"Three\", value = \"1\" }\n        , Elements.option { selected = True, text = \"Over 9000\", value = \"9001\" }\n        ]\n\n",
        "type": "{ selected : Bool, text : String, value : String } -> ( Widgets.Form.Elements.Element, Html.Styled.Html msg )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Widgets.Normalize",
    "comment": " Snippets for normalize browser styling. You should use this snippets with\nCss.Foreign at the beginning of your content. Here is an example:\n\n    view : Model -> Html Msg\n    view model =\n        Html.main_ []\n            [ Css.Foreign.global Widgets.Normalize.snippets\n            , Html.text \"My Content\"\n            ]\n\nThe styles are based on [Normalize](https://necolas.github.io/normalize.css/)\n8.0.0. Notable changes:\n\n  - Use of `border-box` and `box-sizing` everywhere.\n  - Make images not selectable by default.\n  - Disable focus outline everywhere.\n  - Disable forced focus outline in select for Firefox.\n\n@docs snippets\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "snippets",
        "comment": " Browser normalization snippets. Use this with Css.Foreign functions.\n",
        "type": "List Css.Foreign.Snippet"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]