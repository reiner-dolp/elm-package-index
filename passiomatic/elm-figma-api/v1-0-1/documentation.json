[
  {
    "name": "Figma",
    "comment": " This module provides end points for the Figma web API.\n\n\n# Authentication\n\n@docs AuthenticationToken, personalToken, oauth2Token\n\n\n# Obtain a file\n\n@docs FileKey, getFile, File, ComponentMeta\n\n\n# Read and post comments\n\n@docs getComments, postComment, Comment, CommentData, ReplyData, User\n\n\n# Export a file into other formats\n\n@docs exportNodesAsPng, exportNodesAsJpeg, exportNodesAsSvg, exportNodesWithOptions, ExportedImage\n\n\n# Obtain a list of team projects\n\n@docs TeamId, getProjects, Project\n\n\n# Obtain the files of a single project\n\n@docs ProjectId, getFiles, FileMeta\n\n",
    "aliases": [
      {
        "name": "CommentData",
        "comment": " A comment left by a user.\n",
        "args": [],
        "type": "{ id : String , message : String , fileKey : Figma.FileKey , position : Figma.Geometry.Position , user : Figma.User , createdAt : Date.Date , resolvedAt : Maybe.Maybe Date.Date , orderId : String }"
      },
      {
        "name": "ComponentMeta",
        "comment": " Meta data for a master component. Component data is stored in a `Document.Component` record.\n",
        "args": [],
        "type": "{ name : String, description : String }"
      },
      {
        "name": "ExportedImage",
        "comment": " A tuple made of the node ID and the image URL of its rendered representation.\n\nA `Nothing` value indicates that rendering of the specific node has failed. This may be due to\nthe node id not existing, or other reasons such has the node having no renderable components.\n\n",
        "args": [],
        "type": "( Figma.Document.NodeId, Maybe.Maybe String )"
      },
      {
        "name": "File",
        "comment": " The file data returned by the server. In particular:\n\n  - `document` is the root node of the document.\n  - `components` is a mapping from node IDs to component metadata. This helps you determine\n    which components each instance comes from.\n\n",
        "args": [],
        "type": "{ schemaVersion : Int , name : String , thumbnailUrl : String , lastModified : Date.Date , document : Figma.Document.Tree , components : Dict.Dict Figma.Document.NodeId Figma.ComponentMeta }"
      },
      {
        "name": "FileKey",
        "comment": " A file key which univocally identifies Figma document on the server.\n\n**Note**: The *file key* can be extracted from any Figma file URL: `https://www.figma.com/file/:key/:title`, or via the `getFiles` function.\n\n",
        "args": [],
        "type": "String"
      },
      {
        "name": "FileMeta",
        "comment": " Meta data for a project file.\n",
        "args": [],
        "type": "{ key : Figma.FileKey , name : String , thumbnailUrl : String , lastModified : Date.Date }"
      },
      {
        "name": "Project",
        "comment": " A single team project.\n",
        "args": [],
        "type": "{ id : Figma.ProjectId, name : String }"
      },
      {
        "name": "ProjectId",
        "comment": " A value which uniquely identifies a project.\n",
        "args": [],
        "type": "Int"
      },
      {
        "name": "ReplyData",
        "comment": " A reply to a comment.\n",
        "args": [],
        "type": "{ id : String , message : String , fileKey : Figma.FileKey , parentId : String , user : Figma.User , createdAt : Date.Date , resolvedAt : Maybe.Maybe Date.Date }"
      },
      {
        "name": "TeamId",
        "comment": " A value which uniquely identifies a team.\n",
        "args": [],
        "type": "String"
      },
      {
        "name": "User",
        "comment": " A description of a user.\n",
        "args": [],
        "type": "{ handle : String, imageUrl : String }"
      }
    ],
    "types": [
      {
        "name": "AuthenticationToken",
        "comment": " ",
        "args": [],
        "cases": []
      },
      {
        "name": "Comment",
        "comment": " A comment is either a \"top comment\" or a reply to it.\n",
        "args": [],
        "cases": [
          [
            "Comment",
            [
              "Figma.CommentData"
            ]
          ],
          [
            "Reply",
            [
              "Figma.ReplyData"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "exportNodesAsJpeg",
        "comment": " Export a list of document nodes into JPEG files at 1x resolution.\n\nIf you need to specify a different scale value use `exportNodesWithOptions`.\n\n",
        "type": "Figma.AuthenticationToken -> Figma.FileKey -> (Result.Result Http.Error (List Figma.ExportedImage) -> msg) -> List Figma.Document.NodeId -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "exportNodesAsPng",
        "comment": " Export a list of document nodes into PNG files at 1x resolution.\n\nIf you need to specify a different scale value use `exportNodesWithOptions`.\n\n",
        "type": "Figma.AuthenticationToken -> Figma.FileKey -> (Result.Result Http.Error (List Figma.ExportedImage) -> msg) -> List Figma.Document.NodeId -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "exportNodesAsSvg",
        "comment": " Export a list of document nodes into SVG files at 1x resolution.\n\nIf you need to specify a different scale value use `exportNodesWithOptions`.\n\n",
        "type": "Figma.AuthenticationToken -> Figma.FileKey -> (Result.Result Http.Error (List Figma.ExportedImage) -> msg) -> List Figma.Document.NodeId -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "exportNodesWithOptions",
        "comment": " Export a list of document nodes into the given `format` files using\nthe given `scale` factor automatically clamped within the 0.01â€“4 range.\n",
        "type": "Figma.AuthenticationToken -> Figma.FileKey -> (Result.Result Http.Error (List Figma.ExportedImage) -> msg) -> List Figma.Document.NodeId -> { format : Figma.Document.ExportFormat, scale : Float } -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "getComments",
        "comment": " Send a web request and return a list of comments left on the document.\n",
        "type": "Figma.AuthenticationToken -> Figma.FileKey -> (Result.Result Http.Error (List Figma.Comment) -> msg) -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "getFile",
        "comment": " Send a web request and return the file referred by *key* by storing it\ninto a `File` record.\n\n    import Figma as F\n\n    F.getFile\n        ( F.personalToken \"your-token\" )\n        \"your-file-key\"\n        FileReceived\n\n",
        "type": "Figma.AuthenticationToken -> Figma.FileKey -> (Result.Result Http.Error Figma.File -> msg) -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "getFiles",
        "comment": " Send a web request and return the list of files of the given project.\n",
        "type": "Figma.AuthenticationToken -> Figma.ProjectId -> (Result.Result Http.Error (List Figma.FileMeta) -> msg) -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "getProjects",
        "comment": " Send a web request and return the list of projects of the given team.\n\nNote that this will only return projects visible to the authenticated user\nor owner of the developer token.\n\n",
        "type": "Figma.AuthenticationToken -> Figma.TeamId -> (Result.Result Http.Error (List Figma.Project) -> msg) -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "oauth2Token",
        "comment": " Create a token to be used with the OAuth 2 authentication method.\n[Read more](https://www.figma.com/developers/docs#auth-oauth).\n",
        "type": "String -> Figma.AuthenticationToken"
      },
      {
        "name": "personalToken",
        "comment": " Create a token to be used with the Personal Access Token authentication method.\n[Read more](https://www.figma.com/developers/docs#auth-dev-token).\n",
        "type": "String -> Figma.AuthenticationToken"
      },
      {
        "name": "postComment",
        "comment": " Send a web request and add a new comment to the document.\nReturn the `Comment` that was successfully posted.\n",
        "type": "Figma.AuthenticationToken -> Figma.FileKey -> (Result.Result Http.Error Figma.Comment -> msg) -> { message : String, position : Figma.Geometry.Position } -> Platform.Cmd.Cmd msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Figma.Document",
    "comment": " This module provides several data structures to describe a Figma document\nand functions which operate on it.\n\n\n# Document node types\n\n@docs Node, Tree, NodeId, Document, Canvas, Frame, Group, Vector, Rectangle, Slice, Text, Component, Instance\n\n\n# Export constraints and settings\n\n@docs ExportConstraint, ExportSetting, ExportFormat\n\n\n# Tree creation and manipulation\n\n@docs singleton, tree, node, children, foldl, toRosetree\n\n",
    "aliases": [
      {
        "name": "Canvas",
        "comment": " A single page in a document.\n",
        "args": [],
        "type": "{ id : Figma.Document.NodeId , name : String , isVisible : Bool , backgroundColor : Color.Color , exportSettings : List Figma.Document.ExportSetting }"
      },
      {
        "name": "Component",
        "comment": " A reusable component node. It has the same fields of `Frame`.\n",
        "args": [],
        "type": "Figma.Document.Frame"
      },
      {
        "name": "Document",
        "comment": " The root node of a document.\n",
        "args": [],
        "type": "{ id : Figma.Document.NodeId, name : String, isVisible : Bool }"
      },
      {
        "name": "ExportSetting",
        "comment": " Format and size to export an asset at.\n",
        "args": [],
        "type": "{ suffix : String , format : Figma.Document.ExportFormat , constraint : Figma.Document.ExportConstraint }"
      },
      {
        "name": "Frame",
        "comment": " A node of fixed size containing other nodes.\n",
        "args": [],
        "type": "{ id : Figma.Document.NodeId , name : String , isVisible : Bool , backgroundColor : Color.Color , exportSettings : List Figma.Document.ExportSetting , blendMode : Figma.Appearance.BlendMode , preserveRatio : Bool , horizontalConstraint : Figma.Layout.LayoutHorizontalConstraint , verticalConstraint : Figma.Layout.LayoutVerticalConstraint , transitionTo : Maybe.Maybe Figma.Document.NodeId , opacity : Float , boundingBox : Figma.Geometry.BoundingBox , clipContent : Bool , layoutGrids : List Figma.Layout.LayoutGrid , effects : List Figma.Appearance.Effect , isMask : Bool }"
      },
      {
        "name": "Group",
        "comment": " A logical grouping of nodes.\n",
        "args": [],
        "type": "{ id : Figma.Document.NodeId , name : String , isVisible : Bool , backgroundColor : Color.Color , exportSettings : List Figma.Document.ExportSetting , blendMode : Figma.Appearance.BlendMode , preserveRatio : Bool , horizontalConstraint : Figma.Layout.LayoutHorizontalConstraint , verticalConstraint : Figma.Layout.LayoutVerticalConstraint , transitionTo : Maybe.Maybe Figma.Document.NodeId , opacity : Float , boundingBox : Figma.Geometry.BoundingBox , clipContent : Bool , layoutGrids : List Figma.Layout.LayoutGrid , effects : List Figma.Appearance.Effect , isMask : Bool }"
      },
      {
        "name": "Instance",
        "comment": " An instance of a component. Changes to the original component result\nin the same changes applied to the instance.\n",
        "args": [],
        "type": "{ id : Figma.Document.NodeId , name : String , isVisible : Bool , backgroundColor : Color.Color , exportSettings : List Figma.Document.ExportSetting , blendMode : Figma.Appearance.BlendMode , preserveRatio : Bool , horizontalConstraint : Figma.Layout.LayoutHorizontalConstraint , verticalConstraint : Figma.Layout.LayoutVerticalConstraint , transitionTo : Maybe.Maybe Figma.Document.NodeId , opacity : Float , boundingBox : Figma.Geometry.BoundingBox , clipContent : Bool , layoutGrids : List Figma.Layout.LayoutGrid , effects : List Figma.Appearance.Effect , isMask : Bool , componentId : Figma.Document.NodeId }"
      },
      {
        "name": "NodeId",
        "comment": " A value which uniquely identifies a node in the document.\n",
        "args": [],
        "type": "String"
      },
      {
        "name": "Rectangle",
        "comment": " A rectangular vector shape.\n",
        "args": [],
        "type": "{ id : Figma.Document.NodeId , name : String , isVisible : Bool , exportSettings : List Figma.Document.ExportSetting , blendMode : Figma.Appearance.BlendMode , preserveRatio : Bool , horizontalConstraint : Figma.Layout.LayoutHorizontalConstraint , verticalConstraint : Figma.Layout.LayoutVerticalConstraint , transitionTo : Maybe.Maybe Figma.Document.NodeId , opacity : Float , boundingBox : Figma.Geometry.BoundingBox , effects : List Figma.Appearance.Effect , isMask : Bool , fills : List Figma.Appearance.Paint , strokes : List Figma.Appearance.Paint , strokeWeight : Float , strokeAlign : Figma.Appearance.StrokeAlign , cornerRadius : Float }"
      },
      {
        "name": "Slice",
        "comment": " A rectangular region of the canvas that can be exported.\n",
        "args": [],
        "type": "{ id : Figma.Document.NodeId , name : String , isVisible : Bool , exportSettings : List Figma.Document.ExportSetting , boundingBox : Figma.Geometry.BoundingBox }"
      },
      {
        "name": "Text",
        "comment": " A text box.\n",
        "args": [],
        "type": "{ id : Figma.Document.NodeId , name : String , isVisible : Bool , exportSettings : List Figma.Document.ExportSetting , blendMode : Figma.Appearance.BlendMode , preserveRatio : Bool , horizontalConstraint : Figma.Layout.LayoutHorizontalConstraint , verticalConstraint : Figma.Layout.LayoutVerticalConstraint , transitionTo : Maybe.Maybe Figma.Document.NodeId , opacity : Float , boundingBox : Figma.Geometry.BoundingBox , effects : List Figma.Appearance.Effect , isMask : Bool , fills : List Figma.Appearance.Paint , strokes : List Figma.Appearance.Paint , strokeWeight : Float , strokeAlign : Figma.Appearance.StrokeAlign , characters : String , style : Figma.Appearance.TextStyle , characterStyleOverrides : List Int , styleOverrides : Dict.Dict Int Figma.Appearance.TextStyleOverride }"
      },
      {
        "name": "Vector",
        "comment": " A vector network, consisting of vertices and edges. This data structure\nis reused multiple times to represent lines, regular polygons, stars and other\ndocument elements.\n",
        "args": [],
        "type": "{ id : Figma.Document.NodeId , name : String , isVisible : Bool , exportSettings : List Figma.Document.ExportSetting , blendMode : Figma.Appearance.BlendMode , preserveRatio : Bool , horizontalConstraint : Figma.Layout.LayoutHorizontalConstraint , verticalConstraint : Figma.Layout.LayoutVerticalConstraint , transitionTo : Maybe.Maybe Figma.Document.NodeId , opacity : Float , boundingBox : Figma.Geometry.BoundingBox , effects : List Figma.Appearance.Effect , isMask : Bool , fills : List Figma.Appearance.Paint , strokes : List Figma.Appearance.Paint , strokeWeight : Float , strokeAlign : Figma.Appearance.StrokeAlign }"
      }
    ],
    "types": [
      {
        "name": "ExportConstraint",
        "comment": " Sizing constraint for exports.\n",
        "args": [],
        "cases": [
          [
            "ScaleConstraint",
            [
              "Float"
            ]
          ],
          [
            "WidthConstraint",
            [
              "Float"
            ]
          ],
          [
            "HeightConstraint",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "ExportFormat",
        "comment": " Format to export an asset to.\n",
        "args": [],
        "cases": [
          [
            "PngFormat",
            []
          ],
          [
            "JpegFormat",
            []
          ],
          [
            "SvgFormat",
            []
          ]
        ]
      },
      {
        "name": "Node",
        "comment": " A Figma document consists as tree of nodes. It starts with a\n`DocumentNode`, which has one or more `CanvasNode`'s children â€” called *Pages* in the UI â€”\nwhich in turn contain nodes for frames, images, vector shapes, etc.\n",
        "args": [],
        "cases": [
          [
            "DocumentNode",
            [
              "Figma.Document.Document"
            ]
          ],
          [
            "CanvasNode",
            [
              "Figma.Document.Canvas"
            ]
          ],
          [
            "FrameNode",
            [
              "Figma.Document.Frame"
            ]
          ],
          [
            "GroupNode",
            [
              "Figma.Document.Group"
            ]
          ],
          [
            "VectorNode",
            [
              "Figma.Document.Vector"
            ]
          ],
          [
            "StarNode",
            [
              "Figma.Document.Vector"
            ]
          ],
          [
            "LineNode",
            [
              "Figma.Document.Vector"
            ]
          ],
          [
            "EllipseNode",
            [
              "Figma.Document.Vector"
            ]
          ],
          [
            "RegularPolygonNode",
            [
              "Figma.Document.Vector"
            ]
          ],
          [
            "RectangleNode",
            [
              "Figma.Document.Rectangle"
            ]
          ],
          [
            "BooleanOperation",
            [
              "Figma.Document.Vector"
            ]
          ],
          [
            "SliceNode",
            [
              "Figma.Document.Slice"
            ]
          ],
          [
            "TextNode",
            [
              "Figma.Document.Text"
            ]
          ],
          [
            "ComponentNode",
            [
              "Figma.Document.Component"
            ]
          ],
          [
            "InstanceNode",
            [
              "Figma.Document.Instance"
            ]
          ]
        ]
      },
      {
        "name": "Tree",
        "comment": " Represents a multiway tree made of `Node`'s.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "children",
        "comment": " Return the children of a tree as a list.\n",
        "type": "Figma.Document.Tree -> List Figma.Document.Tree"
      },
      {
        "name": "foldl",
        "comment": " Fold over all the nodes in a tree, left to right, depth first.\n",
        "type": "(Figma.Document.Node -> b -> b) -> b -> Figma.Document.Tree -> b"
      },
      {
        "name": "node",
        "comment": " Return the node of a tree.\n",
        "type": "Figma.Document.Tree -> Figma.Document.Node"
      },
      {
        "name": "singleton",
        "comment": " Creates a singleton tree. This corresponds to `tree v []`.\n",
        "type": "Figma.Document.Node -> Figma.Document.Tree"
      },
      {
        "name": "toRosetree",
        "comment": " Return a Rosetree data structure, which can be used with\nthe [Elm Rosetree package](http://package.elm-lang.org/packages/zwilias/elm-rosetree/latest).\n",
        "type": "Figma.Document.Tree -> Tree.Tree Figma.Document.Node"
      },
      {
        "name": "tree",
        "comment": " Construct a tree from a node and a list of children.\n",
        "type": "Figma.Document.Node -> List Figma.Document.Tree -> Figma.Document.Tree"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Figma.Appearance",
    "comment": "\n\n\n# Fills and strokes\n\n@docs StrokeAlign, Paint, SolidColor, Image, ScaleMode, Gradient, ColorStop\n\n\n# Text styling\n\n@docs TextStyle, TextStyleOverride, TextHorizontalAlign, TextVerticalAlign\n\n\n# Blending modes and effetcs\n\n@docs BlendMode, Effect, Blur, Shadow\n\n",
    "aliases": [
      {
        "name": "Blur",
        "comment": " Blur visual effect.\n",
        "args": [],
        "type": "{ isVisible : Bool, radius : Float }"
      },
      {
        "name": "ColorStop",
        "comment": " A position color pair representing a gradient stop.\n",
        "args": [],
        "type": "{ position : Float, color : Color.Color }"
      },
      {
        "name": "Gradient",
        "comment": " A color gradient paint. In particular:\n\n- `start`: position of the start handle for the gradient (value 0, for the purposes of calculating gradient stops)\n- `stop`: position of the end handle for the gradient (value 1), \n- `width`: width of the gradient (only relevant for non-linear gradients)\n\nThese three values are stored in normalized object space. Normalized object space is if the top left corner of the bounding box of the object is `0, 0` and the bottom right is `1,1`.\n\n- `colorStops`: positions of key points along the gradient axis with the colors anchored there. Colors along the gradient are interpolated smoothly between neighboring gradient stops.\n\n",
        "args": [],
        "type": "{ isVisible : Bool , opacity : Float , start : Math.Vector2.Vec2 , stop : Math.Vector2.Vec2 , width : Math.Vector2.Vec2 , colorStops : List Figma.Appearance.ColorStop , blendMode : Figma.Appearance.BlendMode }"
      },
      {
        "name": "Image",
        "comment": " A image-textured paint.\n",
        "args": [],
        "type": "{ isVisible : Bool , opacity : Float , scaleMode : Figma.Appearance.ScaleMode , blendMode : Figma.Appearance.BlendMode }"
      },
      {
        "name": "Shadow",
        "comment": " Shadow visual effect.\n",
        "args": [],
        "type": "{ isVisible : Bool , radius : Float , color : Color.Color , blendMode : Figma.Appearance.BlendMode , offset : Math.Vector2.Vec2 }"
      },
      {
        "name": "SolidColor",
        "comment": " Solid color paint.\n",
        "args": [],
        "type": "{ isVisible : Bool , opacity : Float , color : Color.Color , blendMode : Figma.Appearance.BlendMode }"
      },
      {
        "name": "TextStyle",
        "comment": " Character formatting.\n",
        "args": [],
        "type": "{ fontFamily : String , fontPostScriptName : String , isItalic : Bool , fontWeight : Int , fontSize : Float , horizontalAlign : Figma.Appearance.TextHorizontalAlign , verticalAlign : Figma.Appearance.TextVerticalAlign , letterSpacing : Float , fills : List Figma.Appearance.Paint , lineHeightPx : Float , lineHeightPercent : Float }"
      },
      {
        "name": "TextStyleOverride",
        "comment": " Character formatting overrides.\n\nOnly relevant fields are set while specifying an override. All other fields are supposed\nto be found in the master `TextStyle` record.\n\n",
        "args": [],
        "type": "{ fontFamily : Maybe.Maybe String , fontPostScriptName : Maybe.Maybe String , isItalic : Maybe.Maybe Bool , fontWeight : Maybe.Maybe Int , fontSize : Maybe.Maybe Float , horizontalAlign : Maybe.Maybe Figma.Appearance.TextHorizontalAlign , verticalAlign : Maybe.Maybe Figma.Appearance.TextVerticalAlign , letterSpacing : Maybe.Maybe Float , fills : Maybe.Maybe (List Figma.Appearance.Paint) , lineHeightPx : Maybe.Maybe Float , lineHeightPercent : Maybe.Maybe Float }"
      }
    ],
    "types": [
      {
        "name": "BlendMode",
        "comment": " How a layer blends with layers below.\n",
        "args": [],
        "cases": [
          [
            "NormalMode",
            []
          ],
          [
            "PassThroughMode",
            []
          ],
          [
            "DarkenMode",
            []
          ],
          [
            "MultiplyMode",
            []
          ],
          [
            "LinearBurnMode",
            []
          ],
          [
            "ColorBurnMode",
            []
          ],
          [
            "LightenMode",
            []
          ],
          [
            "ScreenMode",
            []
          ],
          [
            "LinearDodgeMode",
            []
          ],
          [
            "ColorDodgeMode",
            []
          ],
          [
            "OverlayMode",
            []
          ],
          [
            "SoftLightMode",
            []
          ],
          [
            "HardLightMode",
            []
          ],
          [
            "DifferenceMode",
            []
          ],
          [
            "ExclusionMode",
            []
          ],
          [
            "HueMode",
            []
          ],
          [
            "SaturationMode",
            []
          ],
          [
            "ColorMode",
            []
          ],
          [
            "LuminosityMode",
            []
          ]
        ]
      },
      {
        "name": "Effect",
        "comment": " A visual effect such as a shadow or blur.\n",
        "args": [],
        "cases": [
          [
            "InnerShadowEffect",
            [
              "Figma.Appearance.Shadow"
            ]
          ],
          [
            "DropShadowEffect",
            [
              "Figma.Appearance.Shadow"
            ]
          ],
          [
            "LayerBlurEffect",
            [
              "Figma.Appearance.Blur"
            ]
          ],
          [
            "BackgroundBlurEffect",
            [
              "Figma.Appearance.Blur"
            ]
          ]
        ]
      },
      {
        "name": "Paint",
        "comment": " A solid color, gradient, or image texture that can be applied as fills or strokes.\n",
        "args": [],
        "cases": [
          [
            "ColorPaint",
            [
              "Figma.Appearance.SolidColor"
            ]
          ],
          [
            "ImagePaint",
            [
              "Figma.Appearance.Image"
            ]
          ],
          [
            "LinearGradientPaint",
            [
              "Figma.Appearance.Gradient"
            ]
          ],
          [
            "RadialGradientPaint",
            [
              "Figma.Appearance.Gradient"
            ]
          ],
          [
            "AngularGradientPaint",
            [
              "Figma.Appearance.Gradient"
            ]
          ],
          [
            "EmojiPaint",
            []
          ],
          [
            "DiamondGradientPaint",
            [
              "Figma.Appearance.Gradient"
            ]
          ]
        ]
      },
      {
        "name": "ScaleMode",
        "comment": " Image scaling mode.\n",
        "args": [],
        "cases": [
          [
            "FillMode",
            []
          ],
          [
            "FitMode",
            []
          ],
          [
            "TileMode",
            []
          ],
          [
            "StretchMode",
            []
          ]
        ]
      },
      {
        "name": "StrokeAlign",
        "comment": " Where stroke is drawn relative to the vector outline.\n",
        "args": [],
        "cases": [
          [
            "InsideStroke",
            []
          ],
          [
            "OutsideStroke",
            []
          ],
          [
            "CenterStroke",
            []
          ]
        ]
      },
      {
        "name": "TextHorizontalAlign",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "LeftAlign",
            []
          ],
          [
            "RightAlign",
            []
          ],
          [
            "CenterHorizontalAlign",
            []
          ],
          [
            "JustifiedAlign",
            []
          ]
        ]
      },
      {
        "name": "TextVerticalAlign",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "TopAlign",
            []
          ],
          [
            "CenterVerticalAlign",
            []
          ],
          [
            "BottomAlign",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Figma.Layout",
    "comment": "\n\n\n# Layout constraints\n\n@docs LayoutHorizontalConstraint, LayoutVerticalConstraint\n\n\n# Grids\n\n@docs LayoutGrid, Columns, Rows, Grid, GridAlign\n\n",
    "aliases": [
      {
        "name": "Columns",
        "comment": " A vertical grid made of columns. \n",
        "args": [],
        "type": "{ width : Float , isVisible : Bool , color : Color.Color , gutter : Float , margin : Float , count : Int , align : Figma.Layout.GridAlign }"
      },
      {
        "name": "Grid",
        "comment": " A square grid. \n",
        "args": [],
        "type": "{ width : Float, isVisible : Bool, color : Color.Color }"
      },
      {
        "name": "Rows",
        "comment": " A horizontal grid made of rows. \n",
        "args": [],
        "type": "{ height : Float , isVisible : Bool , color : Color.Color , gutter : Float , margin : Float , count : Int , align : Figma.Layout.GridAlign }"
      }
    ],
    "types": [
      {
        "name": "GridAlign",
        "comment": " Positioning of grid within the parent container.\n\n  - `MinAlign`: grid starts at the top (or left) of the container, filling the minimun space possible. The margin is applied before the grid.\n  - `CenterAlign`: grid is center aligned. Margin value is ignored.\n  - `MaxAlign`: grid stretches from the top (or left) to the bottom (or right) of the container, filling the maximun space possible. The margin is applied before and after the grid.\n\n",
        "args": [],
        "cases": [
          [
            "MinAlign",
            []
          ],
          [
            "CenterAlign",
            []
          ],
          [
            "MaxAlign",
            []
          ]
        ]
      },
      {
        "name": "LayoutGrid",
        "comment": " Guides to align and place objects within a parent container. \n",
        "args": [],
        "cases": [
          [
            "ColumnsGrid",
            [
              "Figma.Layout.Columns"
            ]
          ],
          [
            "RowsGrid",
            [
              "Figma.Layout.Rows"
            ]
          ],
          [
            "SquareGrid",
            [
              "Figma.Layout.Grid"
            ]
          ]
        ]
      },
      {
        "name": "LayoutHorizontalConstraint",
        "comment": " Horizontal constraint relative to containing frame.\n",
        "args": [],
        "cases": [
          [
            "LeftConstraint",
            []
          ],
          [
            "RightConstraint",
            []
          ],
          [
            "LeftRightConstraint",
            []
          ],
          [
            "CenterHorizontalConstraint",
            []
          ],
          [
            "ScaleHorizontalConstraint",
            []
          ]
        ]
      },
      {
        "name": "LayoutVerticalConstraint",
        "comment": " Vertical constraint relative to containing frame.\n",
        "args": [],
        "cases": [
          [
            "TopConstraint",
            []
          ],
          [
            "BottomConstraint",
            []
          ],
          [
            "TopBottomConstraint",
            []
          ],
          [
            "CenterVerticalConstraint",
            []
          ],
          [
            "ScaleVerticalConstraint",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Figma.Geometry",
    "comment": " \n \n@docs BoundingBox, Point, Position\n \n",
    "aliases": [
      {
        "name": "BoundingBox",
        "comment": " A rectangle expressing a bounding box in absolute coordinates.\n",
        "args": [],
        "type": "{ x : Float, y : Float, width : Float, height : Float }"
      },
      {
        "name": "Point",
        "comment": " A 2D point.  \n",
        "args": [],
        "type": "{ x : Float, y : Float }"
      }
    ],
    "types": [
      {
        "name": "Position",
        "comment": " Specify a position: either the absolute coordinates on the canvas\nor a relative offset within a frame.\n\nCurently used only for comments.\n",
        "args": [],
        "cases": [
          [
            "AbsolutePosition",
            [
              "Figma.Geometry.Point"
            ]
          ],
          [
            "RelativePositionTo",
            [
              "Figma.Geometry.NodeId",
              "Figma.Geometry.Point"
            ]
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  }
]