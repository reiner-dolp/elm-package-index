[{"name":"Bool.Extra","comment":" Convenience functions for working with Bools\n\n\n# Basics\n\n@docs all, none, any, notAll\n\n\n# Predicate\n\n@docs allPass, anyPass\n\n\n# Maybe\n\n@docs toMaybe\n\n\n# Util\n\n@docs toString\n\n","unions":[],"aliases":[],"values":[{"name":"all","comment":" All the bools are true.\n\n    all [ True, True ]\n    --> True\n\n    all [ True, False ]\n    --> False\n\n    all [ False, False ]\n    --> False\n\n","type":"List.List Basics.Bool -> Basics.Bool"},{"name":"allPass","comment":" Determine if all predicates are satisfied by the value.\n\n    allPass [ (>) 20, (<) 10 ] 11\n    --> True\n\n    allPass [ (>) 20, (<) 10 ] 21\n    --> False\n\n    allPass [ (>) 20, (<) 10 ] 4\n    --> False\n\n    allPass [] 21\n    --> True\n\n","type":"List.List (a -> Basics.Bool) -> a -> Basics.Bool"},{"name":"any","comment":" At least one of the bools is true.\n\n    any [ True, True ]\n    --> True\n\n    any [ True, False ]\n    --> True\n\n    any [ False, False ]\n    --> False\n\n","type":"List.List Basics.Bool -> Basics.Bool"},{"name":"anyPass","comment":" Determine if any predicate is satisfied by the value.\n\n    anyPass [ (>) 20, (<) 10 ] 100\n    --> True\n\n    anyPass [ (>) 20, (==) 10 ] 21\n    --> False\n\n    anyPass [] 21\n    --> False\n\n","type":"List.List (a -> Basics.Bool) -> a -> Basics.Bool"},{"name":"none","comment":" None of the bools are true.\n\n    none [ True, True ]\n    --> False\n\n    none [ True, False ]\n    --> False\n\n    none [ False, False ]\n    --> True\n\n","type":"List.List Basics.Bool -> Basics.Bool"},{"name":"notAll","comment":" Not all of them are true\n\n    notAll [ True, True ]\n    --> False\n\n    notAll [ True, False ]\n    --> True\n\n    notAll [ False, False ]\n    --> True\n\n","type":"List.List Basics.Bool -> Basics.Bool"},{"name":"toMaybe","comment":" Take a value, and wrap it with `Just` from a `Bool`\n\n    toMaybe 4 True\n    --> Just 4\n\n    toMaybe 4 False\n    --> Nothing\n\n","type":"a -> Basics.Bool -> Maybe.Maybe a"},{"name":"toString","comment":" Turn a bool into a string\n\n    toString True\n    --> \"True\"\n\n    toString False\n    --> \"False\"\n\n","type":"Basics.Bool -> String.String"}],"binops":[]}]