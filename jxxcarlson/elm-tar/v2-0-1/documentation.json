[{"name":"Tar","comment":" Use\n\n       encodeFiles : List ( FileRecord, Data ) -> Encode.Encoder\n\nto tar an arbitrary set of files, whch may contain either text or binary\ndata, where\n\n      type Data\n          = StringData String\n          | BinaryData Bytes\n\nTo tar a set of text files, you can use\n\n       encodeTextFiles : List (FileRecord, String) -> Encode.Encoder\n\nFor more details, see the README. See also the demo app `./examples/Main.elm\n\n@docs Data, encodeFiles, encodeTextFiles, defaultFileRecord`\n\n","unions":[{"name":"Data","comment":" Use `StringData String` for text data,\n`BinaryData Bytes` for binary data\n","args":[],"cases":[["StringData",["String.String"]],["BinaryData",["Bytes.Bytes"]]]}],"aliases":[],"values":[{"name":"defaultFileRecord","comment":"\n\n> encodeFileRecord defaultFileRecord |> encode |> Hex.fromBytes\n> encodeFileRecord defaultFileRecord |> encode |> width\n","type":"Tar.FileRecord"},{"name":"encodeFiles","comment":"\n\n      Example\n\n      fileRecord_ =\n          Tar.defaultFileRecord\n\n      fileRecord1 =\n          { fileRecord_ | filename = \"a.txt\" }\n\n      content1 =\n          \"One two three\\n\"\n\n      fileRecord2 =\n          { fileRecord_ | filename = \"c.binary\" }\n\n      content2 =\n          Hex.toBytes \"616263646566\" |> Maybe.withDefault (encode (Bytes.Encode.unsignedInt8 0))\n\n      Tar.encodeFiles\n          [ ( fileRecord1, StringData content1 )\n          , ( fileRecord2, BinaryData content2 )\n          ]\n          |> encode\n","type":"List.List ( Tar.FileRecord, Tar.Data ) -> Bytes.Encode.Encoder"},{"name":"encodeTextFiles","comment":"\n\n> encodeFiles [(defaultFileRecord, \"This is a test\"), (defaultFileRecord, \"Lah di dah do day!\")] |> encode\n> <2594 bytes> : Bytes\n","type":"List.List ( Tar.FileRecord, String.String ) -> Bytes.Encode.Encoder"}],"binops":[]}]