[{"name":"Data","comment":" This module provides functions for\nextracting `Data` both from strings and\n`RawData` values.\n\n@docs Point, Data, xCoord, yCoord, makePoint\n\n","unions":[],"aliases":[{"name":"Data","comment":" A list of points in the xy plane. Used for making graphs.\n","args":[],"type":"List.List Data.Point"},{"name":"Point","comment":" A point ni the xy plane\n","args":[],"type":"( Basics.Float, Basics.Float )"}],"values":[{"name":"makePoint","comment":" Construct a point\n","type":"Basics.Float -> Basics.Float -> Data.Point"},{"name":"xCoord","comment":" Get the x-coordinate of a point\n","type":"Data.Point -> Basics.Float"},{"name":"yCoord","comment":" Get the y-coordinate of a point\n","type":"Data.Point -> Basics.Float"}],"binops":[]},{"name":"ErrorBars","comment":" The `ErrorBars` module provides functions for\ndrawing graphs with errors bars. Suppose that\nwe have dome data:\n\n    > data = SampleData.eb2 |> Data.fromString 0 1\n\nThen\n\n    > ErrorBars.mean data\n\nproduces a list of ponts that pass through the\nmean valjues of data points with given x value.\nFor error bars with extreme ponts one standard\ndeviatoin from the mean, use\n\n    > ErrorBars.normal 1.0 data\n\nFor error bars with endpoints at the maximumn\nand minimum of the data with given x value, use\n\n    > ErrorBars.maxmin data\n\n@docs ErrorBar, mean, normal, maxmin\n\n","unions":[],"aliases":[{"name":"ErrorBar","comment":" The type of an error bar containing\n(x,y) with extreme points (x,top) and\n(x,bottom)\n","args":[],"type":"{ x : Basics.Float, y : Basics.Float, top : Basics.Float, bottom : Basics.Float }"}],"values":[{"name":"maxmin","comment":"\n\n    > SampleData.eb2 |> Data.fromString 0 1 |> ErrorBars.maxmin\n      [{ bottom = 0.9, y = 1, top = 1.1, x = 0 }\n       ,{ bottom = 1.8, y = 2, top = 2.2, x = 1 }]\n","type":"Data.Data -> List.List ErrorBars.ErrorBar"},{"name":"mean","comment":" Use to ompute the y-centroids of the data, as in this example:\n\n    > SampleData.eb2 |> Data.fromString 0 1 |> ErrorBars.mean\n    [{ x = 0, y = 1 },{ x = 1, y = 2 }]\n\n","type":"Data.Data -> Data.Data"},{"name":"normal","comment":" Use to ompute error bars, as in this example:\n\n    > SampleData.eb2 |> Data.fromString 0 1 |> ErrorBars.normal 0.5\n      [{ bottom = 0.99667, y = 1, top = 1.003333, x = 0 }\n      ,{ bottom = 1.98, y = 2, top = 2.02, x = 1 }]\n\n","type":"Basics.Float -> Data.Data -> List.List ErrorBars.ErrorBar"}],"binops":[]},{"name":"RawData","comment":" The purpose of the RawData module is\nto intelligently extract a data table,\ncolumn headers, and metadata from a string\nrepresenting data in one of several formats â€”\ncsv, tab-delimited, or space-delimited. With\nthe second, one can extract a list of Points\nin the xy plane from a data table.\n\n@docs RawData, get, toData\n\n","unions":[],"aliases":[{"name":"RawData","comment":" A RawData value consists of metadata, columnHeaders,\nand data. The first two are lists of strings, while the\nlast is a list of records, where a record is a lest of\nstrings.\n","args":[],"type":"{ metadata : List.List String.String, columnHeaders : List.List String.String, data : Table.Table String.String }"}],"values":[{"name":"get","comment":" `Here is an example of how one extracts RawData from a string:\n\n    > import SampleData\n    > import RawData\n    > RawData.get SampleData.temperature\n         Just {\n             columnHeaders = [\"Year\",\"Value\"]\n           , metadata = [\"Global Land and Ocean Temperature Anomalies\"\n                         ,\"January-December 1880-2016\"\n                         ,\"Units: Degrees Celsius\"\n                        ]\n           , rawData = [[\"1880\",\"-0.12\"],[\"1881\",\"-0.07\"],[\"1882\",\"-0.08\"]\n                        [\"1883\",\"-0.15\"], ...\n\n","type":"String.String -> Maybe.Maybe RawData.RawData"},{"name":"toData","comment":" Examples:\n\n    > SampleData.eb2 |> RawData.get\n      Just { columnHeaders = [\"x\",\"y\"]\n          , data = [[\"0\",\"1.0\"],[\"0\",\"0.9\"],[\"1\",\"1.8\"],[\"0\",\"1.0\"],[\"1\",\"2.0\"]\n                   ,[\"1\",\"2.2\"],[\"0\",\"1.1\"]]\n          , metadata = [] }\n\n","type":"Basics.Int -> Basics.Int -> RawData.RawData -> Maybe.Maybe Data.Data"}],"binops":[]},{"name":"Stat","comment":" The aim of this library is to compute statistics for 2D data.\n\n@docs Statistics, mean, mode, filter, maximum, minimum, statistics, stdev\n\n","unions":[],"aliases":[{"name":"Statistics","comment":" A `Statistics` value holds information like\nthe mean and standard deviation of the x and y\nvalues of `Data` value (list of points), as well\nas the coefficients `m` and `b` of the regression\nline, the `R^2` value, etc. Compute using\n`statistics data`.\n","args":[],"type":"{ m : Basics.Float, b : Basics.Float, n : Basics.Int, r2 : Basics.Float, xMin : Basics.Float, xMax : Basics.Float, xMean : Basics.Float, yMean : Basics.Float, xStdev : Basics.Float, yStdev : Basics.Float, leftDataPoint : Data.Point, rightDataPoint : Data.Point, leftRegressionPoint : Data.Point, rightRegressionPoint : Data.Point }"}],"values":[{"name":"filter","comment":" Apply filters to the data, This is set\nup as a pipeline so that other filters\ncan be added later. We may have to go\nwith different architectue if we have\nmay filters -- best to avoid too many\nrepeated list traversals.\n","type":"Stat.Filter -> Data.Data -> Data.Data"},{"name":"maximum","comment":" Compute the maximum of a column in a list of data, e.g.,\n\n    maximum xCoord data\n\nwhich computes the maximum of the x-values.\n\n","type":"(data -> Basics.Float) -> List.List data -> Maybe.Maybe Basics.Float"},{"name":"mean","comment":" Compute the mean of a column in a list of data, e.g.,\n\n    mean xCoord data\n\nwhich computes the mean of the x-values.\n\n","type":"(data -> Basics.Float) -> List.List data -> Maybe.Maybe Basics.Float"},{"name":"minimum","comment":" Compute the minimum of a column in a list of data, e.g.,\n\n    minimum xCoord data\n\nwhich computes the minimum of the x-values.\n\n","type":"(data -> Basics.Float) -> List.List data -> Maybe.Maybe Basics.Float"},{"name":"mode","comment":" Compute the mode of the data:\n\n    > data = [1, 5, 2, 2, 2, 2, 5, 3, 1]\n    > mode data\n      Just (2,4) : Maybe ( number, Int )\n\n    > data = [\"red\", \"green\", \"red\", \"blue\", \"blue\", \"red\"]\n    > mode data\n      Just (\"red\",3) : Maybe ( String, Int )\n\n","type":"List.List comparable -> Maybe.Maybe ( comparable, Basics.Int )"},{"name":"statistics","comment":" Compute the statistics of a `Data` value.\n","type":"Data.Data -> Maybe.Maybe Stat.Statistics"},{"name":"stdev","comment":" Compute the standard deviation of a column in a list of data, e.g.,\n\n    stdev xCoord data\n\nwhich computes the standard deviation of the x-values.\n\n","type":"(data -> Basics.Float) -> List.List data -> Maybe.Maybe Basics.Float"}],"binops":[]}]