[{"name":"Hex","comment":" The Hex package exposes three functions\n\n  - fromBytes : Bytes -> String\n  - toBytes : String -> Maybe Bytes\n  - stringBlocks :\n\nThe first gives a hexadecimal representation of a Bytes, value, e.g.,\nsomething like `\"6A45F2\"`. The second takes a string like the one\njust given and returns a value of type `Maybe Bytes`. Such a function\ncall can fail, e.g., on an input `\"6A45F!\"`. The third is used\nto \"format\" output into blocks.\n\n@docs fromBytes, toBytes, stringBlocks\n\n","unions":[],"aliases":[],"values":[{"name":"fromBytes","comment":" Hex.toBytes \"FF66\" |> Maybe.map Hex.fromBytes == Just \"FF66\"\n\n> import Bytes.Encode as Encode exposing(encode)\n> encode (Encode.string \"Hello\") |> Hex.fromBytes\n> \"48656C6C6F\" : String\n\n> Hex.toBytes \"FF66!!\" |> Maybe.map Hex.fromBytes\n> Nothing : Maybe String\n\n","type":"Bytes.Bytes -> String.String"},{"name":"stringBlocks","comment":"\n\n> \"abcdefhij\" |> stringBlocks 3\n> [\"abc\",\"def\",\"hij\"]\n","type":"Basics.Int -> String.String -> List.List String.String"},{"name":"toBytes","comment":" Hex.toBytes \"FF66\" |> Maybe.map Hex.fromBytes == Just \"FF66\"\n","type":"String.String -> Maybe.Maybe Bytes.Bytes"}],"binops":[]}]