[
  {
    "name": "Components.Svg.Keyed",
    "comment": " A keyed node helps optimize cases where children are getting added, moved,\nremoved, etc. Common examples include:\n\n  - The user can delete items from a list.\n  - The user can create new items in a list.\n  - You can sort a list based on name or date or whatever.\n    When you use a keyed node, every child is paired with a string identifier.\n    This makes it possible for the underlying diffing algorithm to reuse nodes\n    more efficiently.\n\n\n# Keyed Nodes\n\n@docs node\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "node",
        "comment": " Works just like `Components.Svg.node`, but you add a unique identifier to\neach child node. You want this when you have a list of nodes that is changing:\nadding nodes, removing nodes, etc. In these cases, the unique identifiers help\nmake the DOM modifications more efficient.\n",
        "type": "String -> List (Components.Svg.Attribute msg parts) -> List ( String, Components.Svg.Svg msg parts ) -> Components.Svg.Svg msg parts"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Components.Svg.Events",
    "comment": " The only difference from the `elm-lang/html` package is that the functions\naccept [`Signal`s](Components#Signal) instead of raw messages.\n\n\n# Animation event attributes\n\n@docs onBegin, onEnd, onRepeat\n\n\n# Document event attributes\n\n@docs onAbort, onError, onResize, onScroll, onLoad, onUnload, onZoom\n\n\n# Graphical event attributes\n\n@docs onActivate, onClick, onFocusIn, onFocusOut, onMouseDown, onMouseMove, onMouseOut, onMouseOver, onMouseUp\n\n\n# Custom Events\n\n@docs on, onWithOptions, Options, defaultOptions\n\n",
    "aliases": [
      {
        "name": "Options",
        "comment": " Options for an event listener. If `stopPropagation` is true, it means the\nevent stops traveling through the DOM so it will not trigger any other event\nlisteners. If `preventDefault` is true, any built-in browser behavior related\nto the event is prevented. For example, this is used with touch events when you\nwant to treat them as gestures of your own, not as scrolls.\n",
        "args": [],
        "type": "VirtualDom.Options"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "defaultOptions",
        "comment": " Everything is `False` by default.\n\n    defaultOptions =\n        { stopPropagation = False\n        , preventDefault = False\n        }\n\n",
        "type": "Components.Svg.Events.Options"
      },
      {
        "name": "on",
        "comment": " Create a custom event listener.\n\n    import Json.Decode as Json\n\n    onClick : Signal msg parts -> Attribute msg parts\n    onClick signal signal =\n        on \"click\" (Json.succeed signal)\n\nYou first specify the name of the event in the same format as with JavaScriptâ€™s\n`addEventListener`. Next you give a JSON decoder, which lets you pull\ninformation out of the event object. If the decoder succeeds, it will produce\na message and route it to your `update` function.\n\n",
        "type": "String -> Json.Decode.Decoder (Components.Signal msg parts) -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onAbort",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onActivate",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onBegin",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onClick",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onEnd",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onError",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onFocusIn",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onFocusOut",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onLoad",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onMouseDown",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onMouseMove",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onMouseOut",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onMouseOver",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onMouseUp",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onRepeat",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onResize",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onScroll",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onUnload",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onWithOptions",
        "comment": " Same as `on` but you can set a few options.\n",
        "type": "String -> Components.Svg.Events.Options -> Json.Decode.Decoder (Components.Signal msg parts) -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "onZoom",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Svg.Attribute msg parts"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Components.Svg.Attributes",
    "comment": " Differences from the `elm-lang/svg` package: new [`none`](#none),\n[`plain`](#plain) and [`css`](#css) functions.\n\n\n# Primitives\n\n@docs attribute, attributeNS, none, plain, map\n\n\n# CSS\n\n@docs css, style\n\n\n# Regular attributes\n\n@docs accentHeight, accelerate, accumulate, additive, alphabetic, allowReorder, amplitude, arabicForm, ascent, attributeName, attributeType, autoReverse, azimuth, baseFrequency, baseProfile, bbox, begin, bias, by, calcMode, capHeight, class, clipPathUnits, contentScriptType, contentStyleType, cx, cy, d, decelerate, descent, diffuseConstant, divisor, dur, dx, dy, edgeMode, elevation, end, exponent, externalResourcesRequired, filterRes, filterUnits, format, from, fx, fy, g1, g2, glyphName, glyphRef, gradientTransform, gradientUnits, hanging, height, horizAdvX, horizOriginX, horizOriginY, id, ideographic, in_, in2, intercept, k, k1, k2, k3, k4, kernelMatrix, kernelUnitLength, keyPoints, keySplines, keyTimes, lang, lengthAdjust, limitingConeAngle, local, markerHeight, markerUnits, markerWidth, maskContentUnits, maskUnits, mathematical, max, media, method, min, mode, name, numOctaves, offset, operator, order, orient, orientation, origin, overlinePosition, overlineThickness, panose1, path, pathLength, patternContentUnits, patternTransform, patternUnits, pointOrder, points, pointsAtX, pointsAtY, pointsAtZ, preserveAlpha, preserveAspectRatio, primitiveUnits, r, radius, refX, refY, renderingIntent, repeatCount, repeatDur, requiredExtensions, requiredFeatures, restart, result, rotate, rx, ry, scale, seed, slope, spacing, specularConstant, specularExponent, speed, spreadMethod, startOffset, stdDeviation, stemh, stemv, stitchTiles, strikethroughPosition, strikethroughThickness, string, surfaceScale, systemLanguage, tableValues, target, targetX, targetY, textLength, title, to, transform, type_, u1, u2, underlinePosition, underlineThickness, unicode, unicodeRange, unitsPerEm, vAlphabetic, vHanging, vIdeographic, vMathematical, values, version, vertAdvY, vertOriginX, vertOriginY, viewBox, viewTarget, width, widths, x, xHeight, x1, x2, xChannelSelector, xlinkActuate, xlinkArcrole, xlinkHref, xlinkRole, xlinkShow, xlinkTitle, xlinkType, xmlBase, xmlLang, xmlSpace, y, y1, y2, yChannelSelector, z, zoomAndPan\n\n\n# Presentation attributes\n\n@docs alignmentBaseline, baselineShift, clipPath, clipRule, clip, colorInterpolationFilters, colorInterpolation, colorProfile, colorRendering, color, cursor, direction, display, dominantBaseline, enableBackground, fillOpacity, fillRule, fill, filter, floodColor, floodOpacity, fontFamily, fontSizeAdjust, fontSize, fontStretch, fontStyle, fontVariant, fontWeight, glyphOrientationHorizontal, glyphOrientationVertical, imageRendering, kerning, letterSpacing, lightingColor, markerEnd, markerMid, markerStart, mask, opacity, overflow, pointerEvents, shapeRendering, stopColor, stopOpacity, strokeDasharray, strokeDashoffset, strokeLinecap, strokeLinejoin, strokeMiterlimit, strokeOpacity, strokeWidth, stroke, textAnchor, textDecoration, textRendering, unicodeBidi, visibility, wordSpacing, writingMode\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "accelerate",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "accentHeight",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "accumulate",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "additive",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "alignmentBaseline",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "allowReorder",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "alphabetic",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "amplitude",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "arabicForm",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "ascent",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "attribute",
        "comment": " Create a custom attribute.\n",
        "type": "String -> String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "attributeNS",
        "comment": " Create a custom \"namespaced\" attribute. This corresponds to JavaScript's\n`setAttributeNS` function under the hood.\n",
        "type": "String -> String -> String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "attributeName",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "attributeType",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "autoReverse",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "azimuth",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "baseFrequency",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "baseProfile",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "baselineShift",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "bbox",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "begin",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "bias",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "by",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "calcMode",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "capHeight",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "class",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "clip",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "clipPath",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "clipPathUnits",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "clipRule",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "color",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "colorInterpolation",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "colorInterpolationFilters",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "colorProfile",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "colorRendering",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "contentScriptType",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "contentStyleType",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "css",
        "comment": " Apply styles to an element.\n\nStyles are created with the help of\n[`rtfeldman/elm-css`](http://package.elm-lang.org/packages/rtfeldman/elm-css/latest/Css)\npackage, so you need to install it.\n\n",
        "type": "List Css.Style -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "cursor",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "cx",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "cy",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "d",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "decelerate",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "descent",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "diffuseConstant",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "direction",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "display",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "divisor",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "dominantBaseline",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "dur",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "dx",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "dy",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "edgeMode",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "elevation",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "enableBackground",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "end",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "exponent",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "externalResourcesRequired",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fill",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fillOpacity",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fillRule",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "filter",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "filterRes",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "filterUnits",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "floodColor",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "floodOpacity",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fontFamily",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fontSize",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fontSizeAdjust",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fontStretch",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fontStyle",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fontVariant",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fontWeight",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "format",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "from",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fx",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "fy",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "g1",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "g2",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "glyphName",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "glyphOrientationHorizontal",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "glyphOrientationVertical",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "glyphRef",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "gradientTransform",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "gradientUnits",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "hanging",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "height",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "horizAdvX",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "horizOriginX",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "horizOriginY",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "id",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "ideographic",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "imageRendering",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "in2",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "in_",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "intercept",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "k",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "k1",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "k2",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "k3",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "k4",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "kernelMatrix",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "kernelUnitLength",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "kerning",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "keyPoints",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "keySplines",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "keyTimes",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "lang",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "lengthAdjust",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "letterSpacing",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "lightingColor",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "limitingConeAngle",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "local",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "map",
        "comment": " Transform the [`Signal`s](Components#Signal) produced by an `Attribute`.\n",
        "type": "(Components.Signal a b -> Components.Signal c d) -> Components.Svg.Attribute a b -> Components.Svg.Attribute c d"
      },
      {
        "name": "markerEnd",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "markerHeight",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "markerMid",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "markerStart",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "markerUnits",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "markerWidth",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "mask",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "maskContentUnits",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "maskUnits",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "mathematical",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "max",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "media",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "method",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "min",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "mode",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "name",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "none",
        "comment": " Don't generate any attribute.\n\n    let\n        class =\n            if someCondition then\n                Attributes.class \"someClass\"\n            else\n                Attributes.none\n\n    in\n    rect [ class ] [ ...  ]\n\n",
        "type": "Components.Svg.Attribute msg parts"
      },
      {
        "name": "numOctaves",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "offset",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "opacity",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "operator",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "order",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "orient",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "orientation",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "origin",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "overflow",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "overlinePosition",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "overlineThickness",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "panose1",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "path",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "pathLength",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "patternContentUnits",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "patternTransform",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "patternUnits",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "plain",
        "comment": " Use an attribute that was created with another package like\n[`elm-lang/svg`](http://package.elm-lang.org/packages/elm-lang/svg/latest).\n",
        "type": "VirtualDom.Property msg -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "pointOrder",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "pointerEvents",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "points",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "pointsAtX",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "pointsAtY",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "pointsAtZ",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "preserveAlpha",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "preserveAspectRatio",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "primitiveUnits",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "r",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "radius",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "refX",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "refY",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "renderingIntent",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "repeatCount",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "repeatDur",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "requiredExtensions",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "requiredFeatures",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "restart",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "result",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "rotate",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "rx",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "ry",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "scale",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "seed",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "shapeRendering",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "slope",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "spacing",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "specularConstant",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "specularExponent",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "speed",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "spreadMethod",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "startOffset",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "stdDeviation",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "stemh",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "stemv",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "stitchTiles",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "stopColor",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "stopOpacity",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "strikethroughPosition",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "strikethroughThickness",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "string",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "stroke",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "strokeDasharray",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "strokeDashoffset",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "strokeLinecap",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "strokeLinejoin",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "strokeMiterlimit",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "strokeOpacity",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "strokeWidth",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "style",
        "comment": " Specify a list of inline styles. This will generate a `style` attribute in\nthe DOM.\n",
        "type": "List ( String, String ) -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "surfaceScale",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "systemLanguage",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "tableValues",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "target",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "targetX",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "targetY",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "textAnchor",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "textDecoration",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "textLength",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "textRendering",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "title",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "to",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "transform",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "type_",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "u1",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "u2",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "underlinePosition",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "underlineThickness",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "unicode",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "unicodeBidi",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "unicodeRange",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "unitsPerEm",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "vAlphabetic",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "vHanging",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "vIdeographic",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "vMathematical",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "values",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "version",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "vertAdvY",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "vertOriginX",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "vertOriginY",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "viewBox",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "viewTarget",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "visibility",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "width",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "widths",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "wordSpacing",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "writingMode",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "x",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "x1",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "x2",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xChannelSelector",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xHeight",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xlinkActuate",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xlinkArcrole",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xlinkHref",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xlinkRole",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xlinkShow",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xlinkTitle",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xlinkType",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xmlBase",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xmlLang",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "xmlSpace",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "y",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "y1",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "y2",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "yChannelSelector",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "z",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      },
      {
        "name": "zoomAndPan",
        "comment": " ",
        "type": "String -> Components.Svg.Attribute msg parts"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Components.Html.Keyed",
    "comment": " A keyed node helps optimize cases where children are getting added, moved,\nremoved, etc. Common examples include:\n\n  - The user can delete items from a list.\n  - The user can create new items in a list.\n  - You can sort a list based on name or date or whatever.\n    When you use a keyed node, every child is paired with a string identifier.\n    This makes it possible for the underlying diffing algorithm to reuse nodes\n    more efficiently.\n\n\n# Keyed Nodes\n\n@docs node\n\n\n# Commonly Keyed Nodes\n\n@docs div, ol, ul\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "div",
        "comment": " ",
        "type": "List (Components.Html.Attribute msg parts) -> List ( String, Components.Html.Html msg parts ) -> Components.Html.Html msg parts"
      },
      {
        "name": "node",
        "comment": " Works just like `Components.Html.node`, but you add a unique identifier to\neach child node. You want this when you have a list of nodes that is changing:\nadding nodes, removing nodes, etc. In these cases, the unique identifiers help\nmake the DOM modifications more efficient.\n",
        "type": "String -> List (Components.Html.Attribute msg parts) -> List ( String, Components.Html.Html msg parts ) -> Components.Html.Html msg parts"
      },
      {
        "name": "ol",
        "comment": " ",
        "type": "List (Components.Html.Attribute msg parts) -> List ( String, Components.Html.Html msg parts ) -> Components.Html.Html msg parts"
      },
      {
        "name": "ul",
        "comment": " ",
        "type": "List (Components.Html.Attribute msg parts) -> List ( String, Components.Html.Html msg parts ) -> Components.Html.Html msg parts"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Components.Html.Events",
    "comment": " The only difference from the `elm-lang/html` package is that the functions\naccept [`Signal`s](Components#Signal) instead of raw messages.\n\n\n# Mouse Helpers\n\n@docs onClick, onDoubleClick, onMouseDown, onMouseUp, onMouseEnter, onMouseLeave, onMouseOver, onMouseOut\n\n\n# Form Helpers\n\n@docs onInput, onCheck, onSubmit\n\n\n# Focus Helpers\n\n@docs onBlur, onFocus\n\n\n# Custom Event Handlers\n\n@docs on, onWithOptions, Options, defaultOptions\n\n\n# Custom Decoders\n\n@docs targetValue, targetChecked, keyCode\n\n",
    "aliases": [
      {
        "name": "Options",
        "comment": " Options for an event listener. If `stopPropagation` is true, it means the\nevent stops traveling through the DOM so it will not trigger any other event\nlisteners. If `preventDefault` is true, any built-in browser behavior related\nto the event is prevented. For example, this is used with touch events when you\nwant to treat them as gestures of your own, not as scrolls.\n",
        "args": [],
        "type": "VirtualDom.Options"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "defaultOptions",
        "comment": " Everything is `False` by default.\n\n    defaultOptions =\n        { stopPropagation = False\n        , preventDefault = False\n        }\n\n",
        "type": "Components.Html.Events.Options"
      },
      {
        "name": "keyCode",
        "comment": " A `Json.Decoder` for grabbing `event.keyCode`. This helps you define\nkeyboard listeners like this:\n\n    import Json.Decode as Json\n\n    onKeyUp : (Int -> Signal msg parts) -> Attribute msg parts\n    onKeyUp tagger =\n        on \"keyup\" (Json.map tagger keyCode)\n\n**Note:** It looks like the spec is moving away from `event.keyCode` and\ntowards `event.key`. Once this is supported in more browsers, we may add\nhelpers here for `onKeyUp`, `onKeyDown`, `onKeyPress`, etc.\n\n",
        "type": "Json.Decode.Decoder Int"
      },
      {
        "name": "on",
        "comment": " Create a custom event listener. Normally this will not be necessary, but\nyou have the power! Here is how `onClick` is defined for example:\n\n    import Json.Decode as Json\n\n    onClick : Signal msg parts -> Attribute msg parts\n    onClick signal =\n        on \"click\" (Json.succeed signal)\n\nThe first argument is the event name in the same format as with JavaScript's\n[`addEventListener`][aEL] function.\n\nThe second argument is a JSON decoder. Read more about these [here][decoder].\nWhen an event occurs, the decoder tries to turn the event object into an Elm\nvalue. If successful, the value is routed to your `update` function. In the\ncase of `onClick` we always just succeed with the given `signal`.\n\nIf this is confusing, work through the [Elm Architecture Tutorial][tutorial].\nIt really does help!\n\n[aEL]: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n[decoder]: http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode\n[tutorial]: https://github.com/evancz/elm-architecture-tutorial/\n\n",
        "type": "String -> Json.Decode.Decoder (Components.Signal msg parts) -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onBlur",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onCheck",
        "comment": " Capture [change](https://developer.mozilla.org/en-US/docs/Web/Events/change)\nevents on checkboxes. It will grab the boolean value from `event.target.checked`\non any input event.\n\nCheck out [targetChecked](#targetChecked) for more details on how this works.\n\n",
        "type": "(Bool -> Components.Signal msg parts) -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onClick",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onDoubleClick",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onFocus",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onInput",
        "comment": " Capture [input](https://developer.mozilla.org/en-US/docs/Web/Events/input)\nevents for things like text fields or text areas.\n\nIt grabs the **string** value at `event.target.value`, so it will not work if\nyou need some other type of information. For example, if you want to track\ninputs on a range slider, make a custom handler with [`on`](#on).\n\nFor more details on how `onInput` works, check out [targetValue](#targetValue).\n\n",
        "type": "(String -> Components.Signal msg parts) -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onMouseDown",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onMouseEnter",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onMouseLeave",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onMouseOut",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onMouseOver",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onMouseUp",
        "comment": " ",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onSubmit",
        "comment": " Capture a [submit](https://developer.mozilla.org/en-US/docs/Web/Events/submit)\nevent with [`preventDefault`](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\nin order to prevent the form from changing the pageâ€™s location. If you need\ndifferent behavior, use `onWithOptions` to create a customized version of\n`onSubmit`.\n",
        "type": "Components.Signal msg parts -> Components.Html.Attribute msg parts"
      },
      {
        "name": "onWithOptions",
        "comment": " Same as `on` but you can set a few options.\n",
        "type": "String -> Components.Html.Events.Options -> Json.Decode.Decoder (Components.Signal msg parts) -> Components.Html.Attribute msg parts"
      },
      {
        "name": "targetChecked",
        "comment": " A `Json.Decoder` for grabbing `event.target.checked`. We use this to define\n`onCheck` as follows:\n\n    import Json.Decode as Json\n\n    onCheck : (Bool -> Signal msg parts) -> Attribute msg parts\n    onCheck tagger =\n        on \"input\" (Json.map tagger targetChecked)\n\n",
        "type": "Json.Decode.Decoder Bool"
      },
      {
        "name": "targetValue",
        "comment": " A `Json.Decoder` for grabbing `event.target.value`. We use this to define\n`onInput` as follows:\n\n    import Json.Decode as Json\n\n    onInput : (String -> Signal msg parts) -> Attribute msg parts\n    onInput tagger =\n        on \"input\" (Json.map tagger targetValue)\n\nYou probably will never need this, but hopefully it gives some insights into\nhow to make custom event handlers.\n\n",
        "type": "Json.Decode.Decoder String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Components.Svg",
    "comment": " Build SVG views, just like with the `elm-lang/svg` package.\n\nDifferences from `elm-lang/svg`:\n\n  - New functions: [`none`](#none) and [`plain`](#plain).\n  - No [`map`](http://package.elm-lang.org/packages/elm-lang/svg/latest/Svg#map).\n  - It supports [adding dynamic styles](Components-Svg-Attributes#css)\n    via the\n    [`elm-css`](http://package.elm-lang.org/packages/rtfeldman/elm-css/latest)\n    package.\n\n\n# SVG Nodes\n\n@docs Svg, Attribute, node, text, none, plain\n\n\n# HTML Embedding\n\n@docs svg, foreignObject\n\n\n# Graphics elements\n\n@docs circle, ellipse, image, line, path, polygon, polyline, rect, use\n\n\n# Animation elements\n\n@docs animate, animateColor, animateMotion, animateTransform, mpath, set\n\n\n# Descriptive elements\n\n@docs desc, metadata, title\n\n\n# Containers\n\n@docs a, defs, g, marker, mask, pattern, switch, symbol\n\n\n# Text\n\n@docs altGlyph, altGlyphDef, altGlyphItem, glyph, glyphRef, textPath, text_, tref, tspan\n\n\n# Fonts\n\n@docs font\n\n\n# Gradients\n\n@docs linearGradient, radialGradient, stop\n\n\n# Filters\n\n@docs feBlend, feColorMatrix, feComponentTransfer, feComposite, feConvolveMatrix, feDiffuseLighting, feDisplacementMap, feFlood, feFuncA, feFuncB, feFuncG, feFuncR, feGaussianBlur, feImage, feMerge, feMergeNode, feMorphology, feOffset, feSpecularLighting, feTile, feTurbulence\n\n\n# Light source elements\n\n@docs feDistantLight, fePointLight, feSpotLight\n\n\n# Miscellaneous\n\n@docs clipPath, colorProfile, cursor, filter, script, style, view\n\n",
    "aliases": [
      {
        "name": "Attribute",
        "comment": " ",
        "args": [
          "msg",
          "parts"
        ],
        "type": "Components.Internal.Core.Attribute msg parts"
      },
      {
        "name": "Svg",
        "comment": " ",
        "args": [
          "msg",
          "parts"
        ],
        "type": "Components.Node msg parts"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "a",
        "comment": " The SVG Anchor Element defines a hyperlink.\n",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "altGlyph",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "altGlyphDef",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "altGlyphItem",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "animate",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "animateColor",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "animateMotion",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "animateTransform",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "circle",
        "comment": " The circle element is an SVG basic shape, used to create circles based on\na center point and a radius.\n\n    circle [ cx \"60\", cy \"60\", r \"50\" ]\n\n",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "clipPath",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "colorProfile",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "cursor",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "defs",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "desc",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "ellipse",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feBlend",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feColorMatrix",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feComponentTransfer",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feComposite",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feConvolveMatrix",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feDiffuseLighting",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feDisplacementMap",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feDistantLight",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feFlood",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feFuncA",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feFuncB",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feFuncG",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feFuncR",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feGaussianBlur",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feImage",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feMerge",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feMergeNode",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feMorphology",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feOffset",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "fePointLight",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feSpecularLighting",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feSpotLight",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feTile",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "feTurbulence",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "filter",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "font",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "foreignObject",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "g",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "glyph",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "glyphRef",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "image",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "line",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "linearGradient",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "marker",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "mask",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "metadata",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "mpath",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "node",
        "comment": " Create any SVG node. To create a `<rect>` helper function, you would write:\n\n    rect : List (Attribute msg parts) -> List (Svg msg parts) -> Svg msg parts\n    rect attributes children =\n        node \"rect\" attributes children\n\nYou should always be able to use the helper functions already defined in this\nlibrary though!\n\n",
        "type": "String -> List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "none",
        "comment": " Same as `text \"\"`.\n",
        "type": "Components.Svg.Svg msg parts"
      },
      {
        "name": "path",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "pattern",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "plain",
        "comment": " Embed a node that was created with another package like `elm-lang/svg`.\n",
        "type": "VirtualDom.Node msg -> Components.Svg.Svg msg parts"
      },
      {
        "name": "polygon",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "polyline",
        "comment": " The polyline element is an SVG basic shape, used to create a series of\nstraight lines connecting several points. Typically a polyline is used to\ncreate open shapes.\n\n    polyline [ fill \"none\", stroke \"black\", points \"20,100 40,60 70,80 100,20\" ]\n\n",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "radialGradient",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "rect",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "script",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "set",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "stop",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "style",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "svg",
        "comment": " The root `<svg>` node for any SVG scene. This example shows a scene\ncontaining a rounded rectangle:\n\n    import Components.Html exposing (Html)\n    import Components.Svg exposing (..)\n    import Components.Svg.Attributes exposing (..)\n\n    roundRect : Html msg parts\n    roundRect =\n        svg\n            [ width \"120\", height \"120\", viewBox \"0 0 120 120\" ]\n            [ rect\n                [ x \"10\"\n                , y \"10\"\n                , width \"100\"\n                , height \"100\"\n                , rx \"15\"\n                , ry \"15\"\n                ]\n                []\n            ]\n\n",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "switch",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "symbol",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "text",
        "comment": " A simple text node, no tags at all.\n\nWarning: not to be confused with `text_` which produces the SVG `<text>` tag!\n\n",
        "type": "String -> Components.Svg.Svg msg parts"
      },
      {
        "name": "textPath",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "text_",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "title",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "tref",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "tspan",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "use",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      },
      {
        "name": "view",
        "comment": " ",
        "type": "List (Components.Svg.Attribute msg parts) -> List (Components.Svg.Svg msg parts) -> Components.Svg.Svg msg parts"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Components.Html.Attributes",
    "comment": " Differences from the `elm-lang/html` package : new [`none`](#none),\n[`plain`](#plain) and [`css`](#css) functions.\n\n\n# Primitives\n\n@docs property, attribute, none, plain, map\n\n\n# CSS\n\n@docs css, style\n\n\n# Super Common Attributes\n\n@docs class, classList, id, title, hidden\n\n\n# Inputs\n\n@docs type_, value, defaultValue, checked, placeholder, selected\n\n\n## Input Helpers\n\n@docs accept, acceptCharset, action, autocomplete, autofocus, disabled, enctype, formaction, list, maxlength, minlength, method, multiple, name, novalidate, pattern, readonly, required, size, for, form\n\n\n## Input Ranges\n\n@docs max, min, step\n\n\n## Input Text Areas\n\n@docs cols, rows, wrap\n\n\n# Links and Areas\n\n@docs href, target, download, downloadAs, hreflang, media, ping, rel\n\n\n## Maps\n\n@docs ismap, usemap, shape, coords\n\n\n# Embedded Content\n\n@docs src, height, width, alt\n\n\n## Audio and Video\n\n@docs autoplay, controls, loop, preload, poster, default, kind, srclang\n\n\n## iframes\n\n@docs sandbox, seamless, srcdoc\n\n\n# Ordered Lists\n\n@docs reversed, start\n\n\n# Tables\n\n@docs align, colspan, rowspan, headers, scope\n\n\n# Header Stuff\n\n@docs async, charset, content, defer, httpEquiv, language, scoped\n\n\n# Less Common Global Attributes\n\nAttributes that can be attached to any HTML tag but are less commonly used.\n\n@docs accesskey, contenteditable, contextmenu, dir, draggable, dropzone, itemprop, lang, spellcheck, tabindex\n\n\n# Key Generation\n\n@docs challenge, keytype\n\n\n# Miscellaneous\n\n@docs cite, datetime, pubdate, manifest\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "accept",
        "comment": " List of types the server accepts, typically a file type.\nFor `form` and `input`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "acceptCharset",
        "comment": " List of supported charsets in a `form`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "accesskey",
        "comment": " Defines a keyboard shortcut to activate or add focus to the element.\n",
        "type": "Char -> Components.Html.Attribute msg parts"
      },
      {
        "name": "action",
        "comment": " The URI of a program that processes the information submitted via a `form`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "align",
        "comment": " Specifies the horizontal alignment of a `caption`, `col`, `colgroup`,\n`hr`, `iframe`, `img`, `table`, `tbody`, `td`, `tfoot`, `th`, `thead`, or\n`tr`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "alt",
        "comment": " Alternative text in case an image can't be displayed. Works with `img`,\n`area`, and `input`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "async",
        "comment": " Indicates that the `script` should be executed asynchronously.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "attribute",
        "comment": " Create _attributes_, like saying `domNode.setAttribute('class', 'greeting')`\nin JavaScript.\n\n    class : String -> Attribute msg parts\n    class name =\n        attribute \"class\" name\n\nRead more about the difference between properties and attributes [here].\n[here]: <https://github.com/elm-lang/html/blob/master/properties-vs-attributes.md>\n\n",
        "type": "String -> String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "autocomplete",
        "comment": " Indicates whether a `form` or an `input` can have their values automatically\ncompleted by the browser.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "autofocus",
        "comment": " The element should be automatically focused after the page loaded.\nFor `button`, `input`, `keygen`, `select`, and `textarea`.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "autoplay",
        "comment": " The `audio` or `video` should play as soon as possible.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "challenge",
        "comment": " A challenge string that is submitted along with the public key in a `keygen`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "charset",
        "comment": " Declares the character encoding of the page or script. Common values include:\n\n  - UTF-8 - Character encoding for Unicode\n  - ISO-8859-1 - Character encoding for the Latin alphabet\n    For `meta` and `script`.\n\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "checked",
        "comment": " Indicates whether an `input` of type checkbox is checked.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "cite",
        "comment": " Contains a URI which points to the source of the quote or change in a\n`blockquote`, `del`, `ins`, or `q`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "class",
        "comment": " Often used with CSS to style elements with common properties.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "classList",
        "comment": " This function makes it easier to build a space-separated class attribute.\nEach class can easily be added and removed depending on the boolean value it\nis paired with. For example, maybe we want a way to view notices:\n\n    viewNotice : Notice -> Html msg parts\n    viewNotice notice =\n        div\n            [ classList\n                [ ( \"notice\", True )\n                , ( \"notice-important\", notice.isImportant )\n                , ( \"notice-seen\", notice.isSeen )\n                ]\n            ]\n            [ text notice.content ]\n\n",
        "type": "List ( String, Bool ) -> Components.Html.Attribute msg parts"
      },
      {
        "name": "cols",
        "comment": " Defines the number of columns in a `textarea`.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "colspan",
        "comment": " The colspan attribute defines the number of columns a cell should span.\nFor `td` and `th`.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "content",
        "comment": " A value associated with http-equiv or name depending on the context. For\n`meta`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "contenteditable",
        "comment": " Indicates whether the element's content is editable.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "contextmenu",
        "comment": " Defines the ID of a `menu` element which will serve as the element's\ncontext menu.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "controls",
        "comment": " Indicates whether the browser should show playback controls for the `audio`\nor `video`.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "coords",
        "comment": " A set of values specifying the coordinates of the hot-spot region in an\n`area`. Needs to be paired with a `shape` attribute to be meaningful.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "css",
        "comment": " Apply styles to an element.\n\nStyles are created with the help of\n[`rtfeldman/elm-css`](http://package.elm-lang.org/packages/rtfeldman/elm-css/latest/Css)\npackage, so you need to install it.\n\n",
        "type": "List Css.Style -> Components.Html.Attribute msg parts"
      },
      {
        "name": "datetime",
        "comment": " Indicates the date and time associated with the element.\nFor `del`, `ins`, `time`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "default",
        "comment": " Indicates that the `track` should be enabled unless the user's preferences\nindicate something different.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "defaultValue",
        "comment": " Defines an initial value which will be displayed in an `input` when that\n`input` is added to the DOM. Unlike `value`, altering `defaultValue` after the\n`input` element has been added to the DOM has no effect.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "defer",
        "comment": " Indicates that a `script` should be executed after the page has been\nparsed.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "dir",
        "comment": " Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl\n(Right-To-Left).\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "disabled",
        "comment": " Indicates whether the user can interact with a `button`, `fieldset`,\n`input`, `keygen`, `optgroup`, `option`, `select` or `textarea`.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "download",
        "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "downloadAs",
        "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly, and that the downloaded resource with have the given filename.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "draggable",
        "comment": " Defines whether the element can be dragged.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "dropzone",
        "comment": " Indicates that the element accept the dropping of content on it.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "enctype",
        "comment": " How `form` data should be encoded when submitted with the POST method.\nOptions include: application/x-www-form-urlencoded, multipart/form-data, and\ntext/plain.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "for",
        "comment": " The element ID described by this `label` or the element IDs that are used\nfor an `output`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "form",
        "comment": " Indicates the element ID of the `form` that owns this particular `button`,\n`fieldset`, `input`, `keygen`, `label`, `meter`, `object`, `output`,\n`progress`, `select`, or `textarea`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "formaction",
        "comment": " Indicates the action of an `input` or `button`. This overrides the action\ndefined in the surrounding `form`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "headers",
        "comment": " A space separated list of element IDs indicating which `th` elements are\nheaders for this cell. For `td` and `th`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "height",
        "comment": " Declare the height of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "hidden",
        "comment": " Indicates the relevance of an element.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "href",
        "comment": " The URL of a linked resource, such as `a`, `area`, `base`, or `link`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "hreflang",
        "comment": " Two-letter language code of the linked resource of an `a`, `area`, or `link`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "httpEquiv",
        "comment": " This attribute is an indicator that is paired with the `content` attribute,\nindicating what that content means. `httpEquiv` can take on three different\nvalues: content-type, default-style, or refresh. For `meta`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "id",
        "comment": " Often used with CSS to style a specific element. The value of this\nattribute must be unique.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "ismap",
        "comment": " When an `img` is a descendent of an `a` tag, the `ismap` attribute\nindicates that the click location should be added to the parent `a`'s href as\na query string.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "itemprop",
        "comment": " ",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "keytype",
        "comment": " Specifies the type of key generated by a `keygen`. Possible values are:\nrsa, dsa, and ec.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "kind",
        "comment": " Specifies the kind of text `track`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "lang",
        "comment": " Defines the language used in the element.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "language",
        "comment": " Defines the script language used in a `script`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "list",
        "comment": " Associates an `input` with a `datalist` tag. The datalist gives some\npre-defined options to suggest to the user as they interact with an input.\nThe value of the list attribute must match the id of a `datalist` node.\nFor `input`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "loop",
        "comment": " Indicates whether the `audio` or `video` should start playing from the\nstart when it's finished.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "manifest",
        "comment": " Specifies the URL of the cache manifest for an `html` tag.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "map",
        "comment": " Transform the [`Signal`s](Components#Signal) produced by an `Attribute`.\n",
        "type": "(Components.Signal a b -> Components.Signal c d) -> Components.Html.Attribute a b -> Components.Html.Attribute c d"
      },
      {
        "name": "max",
        "comment": " Indicates the maximum value allowed. When using an input of type number or\ndate, the max value must be a number or date. For `input`, `meter`, and `progress`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "maxlength",
        "comment": " Defines the maximum number of characters allowed in an `input` or\n`textarea`.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "media",
        "comment": " Specifies a hint of the target media of a `a`, `area`, `link`, `source`,\nor `style`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "method",
        "comment": " Defines which HTTP method to use when submitting a `form`. Can be GET\n(default) or POST.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "min",
        "comment": " Indicates the minimum value allowed. When using an input of type number or\ndate, the min value must be a number or date. For `input` and `meter`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "minlength",
        "comment": " Defines the minimum number of characters allowed in an `input` or\n`textarea`.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "multiple",
        "comment": " Indicates whether multiple values can be entered in an `input` of type\nemail or file. Can also indicate that you can `select` many options.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "name",
        "comment": " Name of the element. For example used by the server to identify the fields\nin form submits. For `button`, `form`, `fieldset`, `iframe`, `input`, `keygen`,\n`object`, `output`, `select`, `textarea`, `map`, `meta`, and `param`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "none",
        "comment": " Don't generate any attribute.\n\n    let\n        class =\n            if someCondition then\n                Attributes.class \"someClass\"\n            else\n                Attributes.none\n\n    in\n    button [ class ] [ ...  ]\n\n",
        "type": "Components.Html.Attribute msg parts"
      },
      {
        "name": "novalidate",
        "comment": " This attribute indicates that a `form` shouldn't be validated when\nsubmitted.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "pattern",
        "comment": " Defines a regular expression which an `input`'s value will be validated\nagainst.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "ping",
        "comment": " Specify a URL to send a short POST request to when the user clicks on an\n`a` or `area`. Useful for monitoring and tracking.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "placeholder",
        "comment": " Provides a hint to the user of what can be entered into an `input` or\n`textarea`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "plain",
        "comment": " Use an attribute that was created with another package like\n[`elm-lang/html`](http://package.elm-lang.org/packages/elm-lang/html/latest).\n",
        "type": "VirtualDom.Property msg -> Components.Html.Attribute msg parts"
      },
      {
        "name": "poster",
        "comment": " A URL indicating a poster frame to show until the user plays or seeks the\n`video`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "preload",
        "comment": " Control how much of an `audio` or `video` resource should be preloaded.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "property",
        "comment": " Create _properties_, like saying `domNode.className = 'greeting'` in\nJavaScript.\n\n    import Json.Encode\n\n    class : String -> Attribute msg parts\n    class name =\n        property \"className\" (Json.Encode.string name)\n\nRead more about the difference between properties and attributes [here].\n[here]: <https://github.com/elm-lang/html/blob/master/properties-vs-attributes.md>\n\n",
        "type": "String -> Json.Encode.Value -> Components.Html.Attribute msg parts"
      },
      {
        "name": "pubdate",
        "comment": " Indicates whether this date and time is the date of the nearest `article`\nancestor element. For `time`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "readonly",
        "comment": " Indicates whether an `input` or `textarea` can be edited.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "rel",
        "comment": " Specifies the relationship of the target object to the link object.\nFor `a`, `area`, `link`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "required",
        "comment": " Indicates whether this element is required to fill out or not.\nFor `input`, `select`, and `textarea`.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "reversed",
        "comment": " Indicates whether an ordered list `ol` should be displayed in a descending\norder instead of a ascending.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "rows",
        "comment": " Defines the number of rows in a `textarea`.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "rowspan",
        "comment": " Defines the number of rows a table cell should span over.\nFor `td` and `th`.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "sandbox",
        "comment": " A space separated list of security restrictions you'd like to lift for an\n`iframe`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "scope",
        "comment": " Specifies the scope of a header cell `th`. Possible values are: col, row,\ncolgroup, rowgroup.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "scoped",
        "comment": " Indicates that a `style` should only apply to its parent and all of the\nparents children.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "seamless",
        "comment": " Make an `iframe` look like part of the containing document.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "selected",
        "comment": " Defines which `option` will be selected on page load.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "shape",
        "comment": " Declare the shape of the clickable area in an `a` or `area`. Valid values\ninclude: default, rect, circle, poly. This attribute can be paired with\n`coords` to create more particular shapes.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "size",
        "comment": " For `input` specifies the width of an input in characters.\nFor `select` specifies the number of visible options in a drop-down list.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "spellcheck",
        "comment": " Indicates whether spell checking is allowed for the element.\n",
        "type": "Bool -> Components.Html.Attribute msg parts"
      },
      {
        "name": "src",
        "comment": " The URL of the embeddable content. For `audio`, `embed`, `iframe`, `img`,\n`input`, `script`, `source`, `track`, and `video`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "srcdoc",
        "comment": " An HTML document that will be displayed as the body of an `iframe`. It will\noverride the content of the `src` attribute if it has been specified.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "srclang",
        "comment": " A two letter language code indicating the language of the `track` text data.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "start",
        "comment": " Defines the first number of an ordered list if you want it to be something\nbesides 1.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "step",
        "comment": " Add a step size to an `input`. Use `step \"any\"` to allow any floating-point\nnumber to be used in the input.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "style",
        "comment": " Specify a list of inline styles. This will generate a `style` attribute in\nthe DOM.\n\n    myStyle : Attribute msg parts\n    myStyle =\n        style\n            [ ( \"backgroundColor\", \"red\" )\n            , ( \"height\", \"90px\" )\n            , ( \"width\", \"100%\" )\n            ]\n\n    greeting : Html msg parts\n    greeting =\n        div [ myStyle ] [ text \"Hello!\" ]\n\n",
        "type": "List ( String, String ) -> Components.Html.Attribute msg parts"
      },
      {
        "name": "tabindex",
        "comment": " Overrides the browser's default tab order and follows the one specified\ninstead.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "target",
        "comment": " Specify where the results of clicking an `a`, `area`, `base`, or `form`\nshould appear. Possible special values include:\n\n  - _blank &mdash; a new window or tab\n  - _self &mdash; the same frame (this is default)\n  - _parent &mdash; the parent frame\n  - _top &mdash; the full body of the window\n    You can also give the name of any `frame` you have created.\n\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "title",
        "comment": " Text to be displayed in a tooltip when hovering over the element.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "type_",
        "comment": " Defines the type of a `button`, `input`, `embed`, `object`, `script`,\n`source`, `style`, or `menu`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "usemap",
        "comment": " Specify the hash name reference of a `map` that should be used for an `img`\nor `object`. A hash name reference is a hash symbol followed by the element's name or id.\nE.g. `\"#planet-map\"`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "value",
        "comment": " Defines a default value which will be displayed in a `button`, `option`,\n`input`, `li`, `meter`, `progress`, or `param`.\n",
        "type": "String -> Components.Html.Attribute msg parts"
      },
      {
        "name": "width",
        "comment": " Declare the width of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n",
        "type": "Int -> Components.Html.Attribute msg parts"
      },
      {
        "name": "wrap",
        "comment": " Indicates whether the text should be wrapped in a `textarea`. Possible\nvalues are \"hard\" and \"soft\".\n",
        "type": "String -> Components.Html.Attribute msg parts"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Components.Lazy",
    "comment": " The `lazy` functions allow you to skip recalculation of view parts by\nchecking whether the values they depend on have changed since the last update.\n\nInternally it is implemented as a special kind of\n[`Component`](Components#Component) so you need to use it like any other\ncomponent:\n\n    import Components exposing (Component, send, slot, x1)\n    import Components.Html exposing (Html, button, div, text)\n    import Components.Html.Events exposing (onClick)\n    import Components.Lazy as Lazy\n\n    type alias Container =\n        Components.Container State Msg Parts\n\n    type alias State =\n        Int\n\n    type Msg\n        = Increment\n\n    type alias Parts =\n        { content : Lazy.Container State\n        }\n\n    counter : Component Container m p\n    counter =\n        Components.regular\n            { init = \\_ -> ( 0, Cmd.none, [] )\n            , update = \\_ Increment state -> ( state + 1, Cmd.none, [] )\n            , subscriptions = \\_ _ -> Sub.none\n            , view = \\_ -> view\n            , parts = x1 Parts\n            }\n\n    view : State -> Html Msg Parts\n    view state =\n        Lazy.lazy content state\n            |> slot ( .content, \\x y -> { y | content = x } )\n\n    content : State -> Html Msg Parts\n    content state =\n        div []\n            [ text (toString state.value)\n            , button [ onClick (send Increment) ] [ text \"+\" ]\n            ]\n\nThere are some issues/limitations of laziness that you should be aware of:\n\n  - Things that you pass to `lazy` are compared\n    [_by value_](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#==).\n    This means that you should be careful when you use laziness with large data\n    structures. Also, this means that you can't use it with values that contain\n    functions. This includes `Signal`s and `Node`s.\n  - Don't use laziness around components directly for now because you can run\n    into this bug: <https://github.com/elm-lang/virtual-dom/issues/73>. Wrapping\n    them in a `div` should help.\n  - Don't change the function you pass to `lazy` dynamically. Consider the\n    following:\n\n```\ntype alias Parts =\n    { ...\n    , form : Lazy.Container State\n    }\n\nview state =\n    case state.route of\n        RegistrationRoute ->\n            Lazy.lazy registrationForm state\n                |> slot ( .form, \\x y -> { y | form = x } )\n\n        LoginRoute ->\n            Lazy.lazy loginForm state\n                |> slot ( .form, \\x y -> { y | form = x } )\n\n        ...\n```\n\nelm-components can't compare functions by reference so it won't be able to\ndetect the change. Use different slots instead:\n\n    type alias Parts =\n        { ...\n        , registrationForm : Lazy.Container State\n        , loginForm : Lazy.Container State\n        }\n\n    view state =\n        case state.route of\n            RegistrationRoute ->\n                Lazy.lazy registrationForm state\n                    |> slot ( .registrationForm, \\x y -> { y | registrationForm = x } )\n\n            LoginRoute ->\n                Lazy.lazy loginForm state\n                    |> slot ( .loginForm, \\x y -> { y | loginForm = x } )\n\n            ...\n\n  - Don't pass anonymous functions to `lazy` since it's very easy to introduce\n    bugs with them for the same reason as above. The `VirtualDom` package is\n    able to compare those functions by references so it disables laziness in\n    such cases and saves you from silly mistakes. `elm-components` can't do\n    this.\n  - Currently lazy blocks are cached on the level of the component inside which\n    they are rendered (not where they are registered in the `Parts` type). This\n    means that if you change the place where they are rendered during the update\n    (for example, if you pass it to some `Layout` [`mixed`](Components#mixed)\n    component and then move it to `AnotherLayout`), it will be invalidated and\n    recalculated.\n  - Using `lazy` on a node will prepend a `style` element to its children if you\n    [style](Components-Html-Attributes#styles)\n    it with\n    [`elm-css`](http://package.elm-lang.org/packages/rtfeldman/elm-css/latest)\n    This can break your markup.\n\n@docs Container, lazy, lazy2, lazy3, lazy4, lazy5\n\n",
    "aliases": [
      {
        "name": "Container",
        "comment": " Add it to the `Parts` type of your component.\n\nThe `a` type variable is the type of the argument that the function you pass\nto `lazy` receive. If you use [`lazyN`](#lazy2) functions, group the types of\nthe arguments in a tuple:\n\n    type alias Parts =\n        { lazyBlock : Components.Lazy.Container ( Int, String )\n        }\n\n",
        "args": [
          "a"
        ],
        "type": "Components.Container (Components.Lazy.State a) Components.Lazy.Msg ()"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "lazy",
        "comment": " Call it with a function that receives an argument and returns a `Node` to\navoid recalculation of that `Node` on updates unless the argument is changed.\n",
        "type": "(a -> Components.Node msg parts) -> a -> Components.Component (Components.Lazy.Container a) msg parts"
      },
      {
        "name": "lazy2",
        "comment": " Same as [`lazy`](#lazy) but for two arguments.\n",
        "type": "(a -> b -> Components.Node msg parts) -> a -> b -> Components.Component (Components.Lazy.Container ( a, b )) msg parts"
      },
      {
        "name": "lazy3",
        "comment": " Same as [`lazy`](#lazy) but for three arguments.\n",
        "type": "(a -> b -> c -> Components.Node msg parts) -> a -> b -> c -> Components.Component (Components.Lazy.Container ( a, b, c )) msg parts"
      },
      {
        "name": "lazy4",
        "comment": " Same as [`lazy`](#lazy) but for four arguments.\n",
        "type": "(a -> b -> c -> d -> Components.Node msg parts) -> a -> b -> c -> d -> Components.Component (Components.Lazy.Container ( a, b, c, d )) msg parts"
      },
      {
        "name": "lazy5",
        "comment": " Same as [`lazy`](#lazy) but for five arguments.\n",
        "type": "(a -> b -> c -> d -> e -> Components.Node msg parts) -> a -> b -> c -> d -> e -> Components.Component (Components.Lazy.Container ( a, b, c, d, e )) msg parts"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Components.Html",
    "comment": " Build HTML views, just like with the `elm-lang/html` package.\n\nDifferences from `elm-lang/html`:\n\n  - New functions: [`none`](#none) and [`plain`](#plain).\n  - Functions for tags that can't contain children like [`input`](#input) or\n    [`br`](#br) don't require a second argument.\n  - No [`map`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html#map).\n  - It supports [adding dynamic styles](Components-Html-Attributes#css)\n    via the\n    [`elm-css`](http://package.elm-lang.org/packages/rtfeldman/elm-css/latest)\n    package.\n\n\n# Primitives\n\n@docs Html, Attribute, node, text, none, plain\n\n\n# Tags\n\n\n## Headers\n\n@docs h1, h2, h3, h4, h5, h6\n\n\n## Grouping Content\n\n@docs div, p, hr, pre, blockquote\n\n\n## Text\n\n@docs span, a, code, em, strong, i, b, u, sub, sup, br\n\n\n## Lists\n\n@docs ol, ul, li, dl, dt, dd\n\n\n## Emdedded Content\n\n@docs img, iframe, canvas, math\n\n\n## Inputs\n\n@docs form, input, textarea, button, select, option\n\n\n## Sections\n\n@docs section, nav, article, aside, header, footer, address, main_, body\n\n\n## Figures\n\n@docs figure, figcaption\n\n\n## Tables\n\n@docs table, caption, colgroup, col, tbody, thead, tfoot, tr, td, th\n\n\n## Less Common Elements\n\n\n### Less Common Inputs\n\n@docs fieldset, legend, label, datalist, optgroup, keygen, output, progress, meter\n\n\n### Audio and Video\n\n@docs audio, video, source, track\n\n\n### Embedded Objects\n\n@docs embed, object, param\n\n\n### Text Edits\n\n@docs ins, del\n\n\n### Semantic Text\n\n@docs small, cite, dfn, abbr, time, var, samp, kbd, s, q\n\n\n### Less Common Text Tags\n\n@docs mark, ruby, rt, rp, bdi, bdo, wbr\n\n\n## Interactive Elements\n\n@docs details, summary, menuitem, menu\n\n",
    "aliases": [
      {
        "name": "Attribute",
        "comment": " ",
        "args": [
          "msg",
          "parts"
        ],
        "type": "Components.Internal.Core.Attribute msg parts"
      },
      {
        "name": "Html",
        "comment": " ",
        "args": [
          "msg",
          "parts"
        ],
        "type": "Components.Node msg parts"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "a",
        "comment": " Represents a hyperlink, linking to another resource.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "abbr",
        "comment": " Represents an abbreviation or an acronym; the expansion of the\nabbreviation can be represented in the title attribute.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "address",
        "comment": " Defines a section containing contact information.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "article",
        "comment": " Defines self-contained content that could exist independently of the rest\nof the content.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "aside",
        "comment": " Defines some content loosely related to the page content. If it is removed,\nthe remaining content still makes sense.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "audio",
        "comment": " Represents a sound or audio stream.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "b",
        "comment": " Represents a text which to which attention is drawn for utilitarian\npurposes. It doesn't convey extra importance and doesn't imply an alternate\nvoice.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "bdi",
        "comment": " Represents text that must be isolated from its surrounding for\nbidirectional text formatting. It allows embedding a span of text with a\ndifferent, or unknown, directionality.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "bdo",
        "comment": " Represents the directionality of its children, in order to explicitly\noverride the Unicode bidirectional algorithm.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "blockquote",
        "comment": " Represents a content that is quoted from another source.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "body",
        "comment": " Represents the content of an HTML document. There is only one `body`\nelement in a document.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "br",
        "comment": " Represents a line break.\n",
        "type": "List (Components.Html.Attribute msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "button",
        "comment": " Represents a button.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "canvas",
        "comment": " Represents a bitmap area for graphics rendering.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "caption",
        "comment": " Represents the title of a table.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "cite",
        "comment": " Represents the title of a work.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "code",
        "comment": " Represents computer code.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "col",
        "comment": " Represents a column of a table.\n",
        "type": "List (Components.Html.Attribute msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "colgroup",
        "comment": " Represents a set of one or more columns of a table.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "datalist",
        "comment": " Represents a set of predefined options for other controls.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "dd",
        "comment": " Represents the definition of the terms immediately listed before it.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "del",
        "comment": " Defines a removal from the document.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "details",
        "comment": " Represents a widget from which the user can obtain additional information\nor controls.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "dfn",
        "comment": " Represents a term whose definition is contained in its nearest ancestor\ncontent.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "div",
        "comment": " Represents a generic container with no special meaning.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "dl",
        "comment": " Defines a definition list, that is, a list of terms and their associated\ndefinitions.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "dt",
        "comment": " Represents a term defined by the next `dd`.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "em",
        "comment": " Represents emphasized text, like a stress accent.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "embed",
        "comment": " Represents a integration point for an external, often non-HTML,\napplication or interactive content.\n",
        "type": "List (Components.Html.Attribute msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "fieldset",
        "comment": " Represents a set of controls.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "figcaption",
        "comment": " Represents the legend of a figure.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "figure",
        "comment": " Represents a figure illustrated as part of the document.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "footer",
        "comment": " Defines the footer for a page or section. It often contains a copyright\nnotice, some links to legal information, or addresses to give feedback.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "form",
        "comment": " Represents a form, consisting of controls, that can be submitted to a\nserver for processing.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "h1",
        "comment": " ",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "h2",
        "comment": " ",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "h3",
        "comment": " ",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "h4",
        "comment": " ",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "h5",
        "comment": " ",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "h6",
        "comment": " ",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "header",
        "comment": " Defines the header of a page or section. It often contains a logo, the\ntitle of the web site, and a navigational table of content.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "hr",
        "comment": " Represents a thematic break between paragraphs of a section or article or\nany longer content.\n",
        "type": "List (Components.Html.Attribute msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "i",
        "comment": " Represents some text in an alternate voice or mood, or at least of\ndifferent quality, such as a taxonomic designation, a technical term, an\nidiomatic phrase, a thought, or a ship name.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "iframe",
        "comment": " Embedded an HTML document.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "img",
        "comment": " Represents an image.\n",
        "type": "List (Components.Html.Attribute msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "input",
        "comment": " Represents a typed data field allowing the user to edit the data.\n",
        "type": "List (Components.Html.Attribute msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "ins",
        "comment": " Defines an addition to the document.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "kbd",
        "comment": " Represents user input, often from the keyboard, but not necessarily; it\nmay represent other input, like transcribed voice commands.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "keygen",
        "comment": " Represents a key-pair generator control.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "label",
        "comment": " Represents the caption of a form pontrol.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "legend",
        "comment": " Represents the caption for a `fieldset`.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "li",
        "comment": " Defines a item of an enumeration list.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "main_",
        "comment": " Defines the main or important content in the document. There is only one\n`main` element in the document.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "mark",
        "comment": " Represents text highlighted for reference purposes, that is for its\nrelevance in another context.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "math",
        "comment": " Defines a mathematical formula.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "menu",
        "comment": " Represents a list of commands.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "menuitem",
        "comment": " Represents a command that the user can invoke.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "meter",
        "comment": " Represents a scalar measurement (or a fractional value), within a known\nrange.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "nav",
        "comment": " Defines a section that contains only navigation links.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "node",
        "comment": " General way to create HTML nodes. It is used to define all of the helper\nfunctions in this library.\n\n    div : List (Attribute msg parts) -> List (Html msg parts) -> Html msg parts\n    div attributes children =\n        node \"div\" attributes children\n\nYou can use this to create custom nodes if you need to create something that\nis not covered by the helper functions in this library.\n\n",
        "type": "String -> List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "none",
        "comment": " Same as `text \"\"`.\n",
        "type": "Components.Html.Html msg parts"
      },
      {
        "name": "object",
        "comment": " Represents an external resource, which is treated as an image, an HTML\nsub-document, or an external resource to be processed by a plug-in.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "ol",
        "comment": " Defines an ordered list of items.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "optgroup",
        "comment": " Represents a set of options, logically grouped.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "option",
        "comment": " Represents an option in a `select` element or a suggestion of a `datalist`\nelement.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "output",
        "comment": " Represents the result of a calculation.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "p",
        "comment": " Defines a portion that should be displayed as a paragraph.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "param",
        "comment": " Defines parameters for use by plug-ins invoked by `object` elements.\n",
        "type": "List (Components.Html.Attribute msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "plain",
        "comment": " Embed a node that was created with another package like `elm-lang/html`.\n",
        "type": "VirtualDom.Node msg -> Components.Html.Html msg parts"
      },
      {
        "name": "pre",
        "comment": " Indicates that its content is preformatted and that this format must be\npreserved.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "progress",
        "comment": " Represents the completion progress of a task.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "q",
        "comment": " Represents an inline quotation.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "rp",
        "comment": " Represents parenthesis around a ruby annotation, used to display the\nannotation in an alternate way by browsers not supporting the standard display\nfor annotations.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "rt",
        "comment": " Represents the text of a ruby annotation.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "ruby",
        "comment": " Represents content to be marked with ruby annotations, short runs of text\npresented alongside the text. This is often used in conjunction with East Asian\nlanguage where the annotations act as a guide for pronunciation, like the\nJapanese furigana.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "s",
        "comment": " Represents content that is no longer accurate or relevant.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "samp",
        "comment": " Represents the output of a program or a computer.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "section",
        "comment": " Defines a section in a document.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "select",
        "comment": " Represents a control allowing selection among a set of options.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "small",
        "comment": " Represents a side comment, that is, text like a disclaimer or a\ncopyright, which is not essential to the comprehension of the document.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "source",
        "comment": " Allows authors to specify alternative media resources for media elements\nlike `video` or `audio`.\n",
        "type": "List (Components.Html.Attribute msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "span",
        "comment": " Represents text with no specifim peaning. This has to be used when no other\ntext-semantic element conveys an adequate meaning, which, in this case, is\noften brought by global attributes like `class`, `lang`, or `dir`.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "strong",
        "comment": " Represents especially important text.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "sub",
        "comment": " Represent a subscript.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "summary",
        "comment": " Represents a summary, caption, or legend for a given `details`.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "sup",
        "comment": " Represent a superscript.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "table",
        "comment": " Represents data with more than one dimension.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "tbody",
        "comment": " Represents the block of rows that describes the concrete data of a table.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "td",
        "comment": " Represents a data cell in a table.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "text",
        "comment": " Just put plain text in the DOM. It will escape the string so that it appears\nexactly as you specify.\n\n    text \"Hello World!\"\n\n",
        "type": "String -> Components.Html.Html msg parts"
      },
      {
        "name": "textarea",
        "comment": " Represents a multiline text edit control.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "tfoot",
        "comment": " Represents the block of rows that describes the column summaries of a table.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "th",
        "comment": " Represents a header cell in a table.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "thead",
        "comment": " Represents the block of rows that describes the column labels of a table.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "time",
        "comment": " Represents a date and time value; the machine-readable equivalent can be\nrepresented in the datetime attribute.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "tr",
        "comment": " Represents a row of cells in a table.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "track",
        "comment": " Allows authors to specify timed text track for media elements like `video`\nor `audio`.\n",
        "type": "List (Components.Html.Attribute msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "u",
        "comment": " Represents a non-textual annoatation for which the conventional\npresentation is underlining, such labeling the text as being misspelt or\nlabeling a proper name in Chinese text.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "ul",
        "comment": " Defines an unordered list of items.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "var",
        "comment": " Represents a variable. Specific cases where it should be used include an\nactual mathematical expression or programming context, an identifier\nrepresenting a constant, a symbol identifying a physical quantity, a function\nparameter, or a mere placeholder in prose.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "video",
        "comment": " Represents a video, the associated audio and captions, and controls.\n",
        "type": "List (Components.Html.Attribute msg parts) -> List (Components.Html.Html msg parts) -> Components.Html.Html msg parts"
      },
      {
        "name": "wbr",
        "comment": " Represents a line break opportunity, that is a suggested point for\nwrapping text in order to improve readability of text split on several lines.\n",
        "type": "List (Components.Html.Attribute msg parts) -> Components.Html.Html msg parts"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Components",
    "comment": " A typical component definition looks like this:\n\n    module MyComponent exposing (Container, myComponent)\n\n    import Components exposing (Component)\n    ...\n\n\n    type alias Container =\n        Components.Container State Msg Parts\n\n\n    type alias State =\n        { field : Int\n        , anotherField : String\n        }\n\n\n    type Msg\n        = DoSomething\n        | DoSomethingElse\n\n\n    type alias Parts =\n        { subcomponent : MyComponent1.Container\n        , anotherSubcomponent : MyComponent2.Container\n        }\n\n\n    myComponent : Component Container m p\n    myComponent =\n        Components.regular\n            { init = init\n            , update = update\n            , subscriptions = subscriptions\n            , view = view\n            , parts = Components.x2 Parts\n            }\n\n    ...\n\nBe sure to check out the README which contains a detailed guide for how to use\nthis package.\n\n\n# Core Types\n\n@docs Node, Component, Container, Signal, Slot\n\n\n# Working With Components\n\n@docs regular, regularWithOptions, mixed, mixedWithOptions, Self, ComponentInternalStuff, Options, defaultOptions, send, slot, dictSlot, sendToPart ,convertNode, convertSignal, convertSlot\n\n\n# Running Components\n\nTo run a component do the following:\n\n  - Add the [`State`](#State) to the `State`/`Model` of your program.\n  - Add the [`Msg`](#Msg) to the `Msg` of your program.\n  - Connect a component in the `init`, `update`, `subscriptions` and `view`\n    functions of your program with the help of the functions provided below.\n\nExample:\n\n    import MyComponent\n    import VirtualDom\n\n\n    type alias State =\n        { componentState : Components.State MyComponent.Container MsgFromComponent\n        }\n\n\n    type Msg\n        = ComponentMsg (Components.Msg MyComponent.Container MsgFromComponent)\n\n\n    type MsgFromComponent\n        = SomethingHappened\n\n\n    main : Program Never State Msg\n    main =\n        VirtualDom.program\n            { init = init\n            , update = update\n            , subscriptions = subscriptions\n            , view = view\n            }\n\n\n    init : ( State, Cmd Msg )\n    init =\n        let\n            ( componentState, componentCmd ) =\n                MyComponent.myComponent\n                    { onSomeEvent = send SomethingHappened\n                    }\n                    |> Components.init\n        in\n        ( { componentState = componentState\n          }\n        , Cmd.map ComponentMsg componentCmd\n        )\n\n    ...\n\nYou will receive a `List MsgFromComponent` from the [`update`](#update)\nfunction. Alternatively, use `Never` in place of `MsgFromComponent` if your\ncomponent doesn't send any messages to the surrounding context.\n\nUse [`wrapMsg`](#wrapMsg) to send messages to your component.\n\n@docs State, Msg, init, update, subscriptions, view, wrapMsg\n\n\n# Declaring Parts\n\nWhen you define a component you must explicitly create a `Parts` record\npopulated with default values because `elm-components` can't do this\nautomatically. You can do this in one line with the `x1`-`x50` helper functions\nlisted below.\n\n    type alias Parts =\n        { button : Button.Container\n        , dialog : Dialog.Container\n        }\n\n    myComponent : Component Container m p\n    myComponent =\n        Components.regular\n            { init = init\n            , update = update\n            , subscriptions = subscriptions\n            , view = view\n            , parts = Components.x2 Parts\n            }\n\nIf you have more than 50 `Parts` you can easily compose these functions:\n\n    x51 =\n        x50 >> x1\n\nAlso, if you have a `Dict` of components you can declare your `Parts` like this:\n\n    type alias Parts =\n        { button : Button.Container\n        , dialog : Dialog.Container\n        , counterDict : Dict Counter.Container\n        }\n\n    myComponent : Component Container m p\n    myComponent =\n        Components.regular\n            { ...\n            , parts = Components.x2 Parts <| Dict.empty\n            }\n\n@docs x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50\n\n",
    "aliases": [
      {
        "name": "Component",
        "comment": " Represents a component. You can define components with the help of functions\nlike [`regular`](#regular):\n\n    button : Component Container msg parts\n    button =\n        Components.regular\n            { init = init\n            , update = update\n            , subscriptions = subscriptions\n            , view = view\n            , parts = ()\n            }\n\nThis can be read as the following: a button is a component which defines a\n[container](#Container) of type `Container` and can be converted into a\n`Node msg parts` and therefore embedded inside a view of another component which\nhas a `Msg` of type `msg` and `Parts` of type `parts`. You can do it passing\na `Component` into the [`slot`](#slot) function and giving it a [`Slot`](#Slot).\n\n",
        "args": [
          "container",
          "msg",
          "parts"
        ],
        "type": "Components.Internal.Core.Component container msg parts"
      },
      {
        "name": "ComponentInternalStuff",
        "comment": " Some internal stuff you don't have access to. It is stored inside of\n[`Self`](#Self) and is used in functions like [`sendToPart`](#sendToPart) or\n[`convertNode`](#convertNode) that receive `Self` as an argument.\n",
        "args": [
          "state",
          "msg",
          "parts",
          "consumerParts"
        ],
        "type": "Components.Internal.Core.ComponentInternalStuff state msg parts consumerParts"
      },
      {
        "name": "Container",
        "comment": " Each component should define a `Container` type:\n\n    type alias Container =\n        Components.Container State Msg Parts\n\nIt can be then used by consumers to register that component in their `Parts`:\n\n    type alias Parts =\n        { button : Button.Container\n        , dialog : Dialog.Container\n        , ...\n        }\n\nInternally, a `Container` is used to group together a component's state and\nstates of all its `Parts`, or to carry a message to a component or one of its\n`Parts`.\n\n",
        "args": [
          "state",
          "msg",
          "parts"
        ],
        "type": "Components.Internal.Core.Container state msg parts"
      },
      {
        "name": "Msg",
        "comment": " Add this to the `Msg` of your program as shown in the example above.\n",
        "args": [
          "container",
          "outMsg"
        ],
        "type": "Components.Internal.Run.Msg container outMsg"
      },
      {
        "name": "Node",
        "comment": " Views are built with nodes. A node can be either an\n[element](Components-Html) or a [component](#Component). It can emit messages of\ntype `msg` and contain components which are described by the type `parts`.\n",
        "args": [
          "msg",
          "parts"
        ],
        "type": "Components.Internal.Core.Node msg parts"
      },
      {
        "name": "Options",
        "comment": " The options you can provide when you define components.\n\nCurrently this is only the `onContextUpdate` field. It allows you to specify a\nmessage that you want your component to receive each time its consumer is\nupdated. In this way, you can check whether the input parameters of your\ncomponent has changed. This might be useful when you can't synchronously\ncalculate your view from the value of a parameter and want, for example, to\nperform an HTTP request or a call to a port when it changes, or when you need to\nknow both its previous and its current values.\n\n",
        "args": [
          "msg"
        ],
        "type": "{ onContextUpdate : Maybe.Maybe msg }"
      },
      {
        "name": "Self",
        "comment": " Contains some useful information about your component (currently only an\n`id` field) and some internal stuff which is used by functions like\n[`sendToPart`](#sendToPart) or [`convertNode`](#convertNode) that receive\n`Self` as an argument.\n\nAn `id` is a string of form `_06f8786c-fd3f-4057-ada2-9561883241db_9`. You can\nuse it for things like HTML `id` attributes or CSS classes. It consists of an\nUUID and a sequential number. The UUID is the same for all components in the\nsame tree.\n\n",
        "args": [
          "state",
          "msg",
          "parts",
          "consumerParts"
        ],
        "type": "{ id : String , internal : Components.ComponentInternalStuff state msg parts consumerParts }"
      },
      {
        "name": "Signal",
        "comment": " Represents a message that has been [`sent`](#send) either to a component or\nto one of its `Parts`.\n\n**Note:** it has nothing to do with the `Signal` type which Elm had in earlier\nversions.\n\n`Signal`s are used in views and for communication between components. One of the\nreason for this type to be exposed is to provide a way to [convert messages\nbetween types of different components](#convertSignal).\n\n",
        "args": [
          "msg",
          "parts"
        ],
        "type": "Components.Internal.Core.Signal msg parts"
      },
      {
        "name": "Slot",
        "comment": " A `Slot` is just a pair of functions that define a strategy for reading and\nwriting a component's [`Container`](#Container) from/to the `Parts` type of its\nconsumer:\n\n    type alias Parts =\n        { button : Button.Container\n        , ...\n        }\n\n\n    buttonSlot : Slot Button.Container Parts\n    buttonSlot =\n        ( .button, \\x y -> { y | button = x } )\n\nYou need to specify a `Slot` when you want to [embed a component in another\ncomponent](#slot) or [send a message to it](#sendToPart).\n\n",
        "args": [
          "container",
          "parts"
        ],
        "type": "Components.Internal.Core.Slot container parts"
      },
      {
        "name": "State",
        "comment": " Add this to the `State`/`Model` of your program as shown in the example\nabove.\n",
        "args": [
          "container",
          "outMsg"
        ],
        "type": "Components.Internal.Run.State container outMsg"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "convertNode",
        "comment": " Convert a `Node` to consumer's types. Useful when working with\n[`mixed`](#mixed) components:\n\n    view : List (Html m p) -> Self State Msg Parts p -> State -> Html m p\n    view contents self state =\n        div []\n            [ div [] contents\n            , button |> convertNode self\n            , ...\n            ]\n\n    button : Html Msg Parts\n    button =\n        Html.button [ onClick (send DoSomething) ]\n            [ text \"Do something\"\n            ]\n\n",
        "type": "Components.Self state msg parts consumerParts -> Components.Node msg parts -> Components.Node consumerMsg consumerParts"
      },
      {
        "name": "convertSignal",
        "comment": " Convert a `Signal` to consumer's types.\n\nThis is useful when you're working with a [`mixed`](#mixed) component and want\nto send a message to it from a [`Node`](#Node) that is parametrized on types of\na consumer:\n\n    view : List (Html m p) -> Self State Msg Parts p -> State -> Html m p\n    view contents self state =\n        div [ onClick (send DoSomething |> convertSignal self) ]\n            [ div [] contents\n            , ...\n            ]\n\n",
        "type": "Components.Self state msg parts consumerParts -> Components.Signal msg parts -> Components.Signal consumerMsg consumerParts"
      },
      {
        "name": "convertSlot",
        "comment": " Given a `Slot` for a component that is registered in your `Parts`, convert\nit in a such way that will make everything behave like if it's registered in the\n`Parts` of a consumer.\n\nThis is useful when you're working with a [`mixed`](#mixed) component and want\nto accept a view block from a consumer and pass it further to one of your\n`Parts`:\n\n    type alias Parts =\n        { dialog : Dialog.Container\n        }\n\n    view : List (Html m p) -> Self State Msg Parts p -> State -> Html m p\n    view contents self state =\n        Dialog.dialog\n            { onClose = send Closed |> convertSignal self\n            }\n            contents\n            |> slot (convertSlot self dialogSlot)\n\n    dialogSlot : Slot Dialog.Container Parts\n    dialogSlot =\n        ( .dialog, \\x y -> { y | dialog = x } )\n\n",
        "type": "Components.Self state msg parts consumerParts -> Components.Slot (Components.Container partState partMsg partParts) parts -> Components.Slot (Components.Container partState partMsg partParts) consumerParts"
      },
      {
        "name": "defaultOptions",
        "comment": "\n\n    defaultOptions =\n        { onContextUpdate = Nothing\n        }\n\n",
        "type": "Components.Options msg"
      },
      {
        "name": "dictSlot",
        "comment": " Given a `Slot` for a `Dict` of components and a key, produce a `Slot` for a\nspecific component that is identified by that key. Then you can use it to\n[render that component](#slot) or to [send a message to it](#sendToPart):\n\n    type alias Parts =\n        { counterDict : Dict Counter.Container\n        }\n\n    counterFromDict : Int -> Html Msg Parts\n    counterFromDict key =\n        Counter.counter\n            |> slot (dictSlot counterDictSlot key)\n\n    counterDictSlot : Slot (Dict Int Counter.Container) Parts\n    counterDictSlot =\n        ( .counterDict, \\x y -> { y | counterDict = x } )\n\n",
        "type": "Components.Slot (Dict.Dict comparable (Components.Container state msg parts)) consumerParts -> comparable -> Components.Slot (Components.Container state msg parts) consumerParts"
      },
      {
        "name": "init",
        "comment": " Use this to init a component.\n\nNotice how `Container state msg parts` is used twice in the type of the first\nargument. It need to be like that to satifsy the type checker. If you're curious\nwhy: the second time it's used in place of the `parts` type variable of the\n`Component` type which simply means that the consumer (your program) is not\ngoing to have any other `Parts` (it can run as much components as it needs, but\nthey all will be completely independent from each other). In other words, it's\nthe same if your program defined a `Parts` type like this (of course you don't\nneed to define it at all):\n\n    type alias Parts =\n        MyComponent.Container\n\nAnd the `init` function uses a `Slot` for it that can be defined like this:\n\n    identitySlot : Slot (Container state msg parts) (Container state msg parts)\n    identitySlot =\n        ( \\x -> x, \\x _ -> x )\n\nYou don't need to understand anything like that to use this function though. It\nshould just accept any of your components.\n\n",
        "type": "Components.Component (Components.Container state msg parts) outMsg (Components.Container state msg parts) -> ( Components.State (Components.Container state msg parts) outMsg , Platform.Cmd.Cmd (Components.Msg (Components.Container state msg parts) outMsg) )"
      },
      {
        "name": "mixed",
        "comment": " Same as [`regular`](#regular) but its `view` returns\n`Node consumerMsg consumerParts`. This gives you an ability to accept view\nblocks from a consumer and embed it inside the `view` function.\n\nSee also [`convertNode`](#convertNode), [`convertSignal`](#convertSignal) and\n[`convertSlot`](#convertSlot) functions that are designed to help you compose\ndifferently typed views together.\n\n",
        "type": "{ init : Components.Self state msg parts consumerParts -> ( state , Platform.Cmd.Cmd msg , List (Components.Signal consumerMsg consumerParts) ) , update : Components.Self state msg parts consumerParts -> msg -> state -> ( state , Platform.Cmd.Cmd msg , List (Components.Signal consumerMsg consumerParts) ) , subscriptions : Components.Self state msg parts consumerParts -> state -> Platform.Sub.Sub msg , view : Components.Self state msg parts consumerParts -> state -> Components.Node consumerMsg consumerParts , parts : parts } -> Components.Component (Components.Container state msg parts) consumerMsg consumerParts"
      },
      {
        "name": "mixedWithOptions",
        "comment": " Same as [`mixed`](#mixed) but with [`Options`](#Options).\n",
        "type": "{ init : Components.Self state msg parts consumerParts -> ( state , Platform.Cmd.Cmd msg , List (Components.Signal consumerMsg consumerParts) ) , update : Components.Self state msg parts consumerParts -> msg -> state -> ( state , Platform.Cmd.Cmd msg , List (Components.Signal consumerMsg consumerParts) ) , subscriptions : Components.Self state msg parts consumerParts -> state -> Platform.Sub.Sub msg , view : Components.Self state msg parts consumerParts -> state -> Components.Node consumerMsg consumerParts , parts : parts , options : Components.Options msg } -> Components.Component (Components.Container state msg parts) consumerMsg consumerParts"
      },
      {
        "name": "regular",
        "comment": " Defines a regular component. If you need the ability to accept view blocks\nfrom a consumer and embed them inside your `view`, use the [`mixed`](#mixed)\nfunction instead.\n\nThe `init` and `update` functions can transmit signals to a consumer (which the\ncomponent need to accept as arguments) or [to the `parts`](#sendToPart).\n\nRead the [Declaring Parts](#declaring-parts) section to see how to specify\n`parts`.\n\n",
        "type": "{ init : Components.Self state msg parts consumerParts -> ( state , Platform.Cmd.Cmd msg , List (Components.Signal consumerMsg consumerParts) ) , update : Components.Self state msg parts consumerParts -> msg -> state -> ( state , Platform.Cmd.Cmd msg , List (Components.Signal consumerMsg consumerParts) ) , subscriptions : Components.Self state msg parts consumerParts -> state -> Platform.Sub.Sub msg , view : Components.Self state msg parts consumerParts -> state -> Components.Node msg parts , parts : parts } -> Components.Component (Components.Container state msg parts) consumerMsg consumerParts"
      },
      {
        "name": "regularWithOptions",
        "comment": " Same as [`regular`](#regular) but with [`Options`](#Options).\n",
        "type": "{ init : Components.Self state msg parts consumerParts -> ( state , Platform.Cmd.Cmd msg , List (Components.Signal consumerMsg consumerParts) ) , update : Components.Self state msg parts consumerParts -> msg -> state -> ( state , Platform.Cmd.Cmd msg , List (Components.Signal consumerMsg consumerParts) ) , subscriptions : Components.Self state msg parts consumerParts -> state -> Platform.Sub.Sub msg , view : Components.Self state msg parts consumerParts -> state -> Components.Node msg parts , parts : parts , options : Components.Options msg } -> Components.Component (Components.Container state msg parts) consumerMsg consumerParts"
      },
      {
        "name": "send",
        "comment": " Turns a message into a `Signal`. Use this in your views:\n\n    button [ onClick (send DoSomething) ]\n        [ text \"Do something\"\n        ]\n\n",
        "type": "msg -> Components.Signal msg parts"
      },
      {
        "name": "sendToPart",
        "comment": " Allows you to send messages to the `Parts` of your component. Return the\nresult from the `init` or `update` function:\n\n    update self msg state =\n        case msg of\n            ResetCounter ->\n                ( state\n                , Cmd.none\n                , [ sendToPart self counterSlot Counter.reset ]\n                )\n\n",
        "type": "Components.Self state msg parts consumerParts -> Components.Slot (Components.Container partState partMsg partParts) parts -> partMsg -> Components.Signal consumerMsg consumerParts"
      },
      {
        "name": "slot",
        "comment": " Converts a `Component` to a `Node` allowing you to embed it in the view of\nanother component:\n\n    type alias Parts =\n        { button : Button.Container\n        }\n\n    button : Html Msg Parts\n    button =\n        Button.button\n            { label = \"Do something\"\n            , onClick = send DoSomething\n            }\n            |> slot ( .button, \\x y -> { y | button = x } )\n\n**Don't use it with the same `Slot` more than one time! This is not currently\nhandled and the result is unpredictable!**\n\n",
        "type": "Components.Slot (Components.Container state msg parts) consumerParts -> Components.Component (Components.Container state msg parts) consumerMsg consumerParts -> Components.Node consumerMsg consumerParts"
      },
      {
        "name": "subscriptions",
        "comment": " Use this to connect a component in the `subscriptions` function of your\nprogram.\n",
        "type": "Components.State (Components.Container state msg parts) outMsg -> Platform.Sub.Sub (Components.Msg (Components.Container state msg parts) outMsg)"
      },
      {
        "name": "update",
        "comment": " Use this to connect a component in the `update` function of your program.\n",
        "type": "Components.Msg (Components.Container state msg parts) outMsg -> Components.State (Components.Container state msg parts) outMsg -> ( Components.State (Components.Container state msg parts) outMsg , Platform.Cmd.Cmd (Components.Msg (Components.Container state msg parts) outMsg) , List outMsg )"
      },
      {
        "name": "view",
        "comment": " Use this to render a component.\n",
        "type": "Components.State (Components.Container state msg parts) outMsg -> VirtualDom.Node (Components.Msg (Components.Container state msg parts) outMsg)"
      },
      {
        "name": "wrapMsg",
        "comment": " Allows you to send a message to a component from your program:\n\n    update msg state =\n        case msg of\n            LocationChanged newLocation ->\n                ( newAppState, appCmd, messagesFromApp ) =\n                    Components.update\n                        (Components.wrapMsg App.UpdateLocation)\n                        state.appState\n\n                ...\n\n",
        "type": "msg -> Components.Msg (Components.Container state msg parts) outMsg"
      },
      {
        "name": "x1",
        "comment": " ",
        "type": "(Components.Container s m p -> parts) -> parts"
      },
      {
        "name": "x10",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> parts) -> parts"
      },
      {
        "name": "x11",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> parts) -> parts"
      },
      {
        "name": "x12",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> parts) -> parts"
      },
      {
        "name": "x13",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> parts) -> parts"
      },
      {
        "name": "x14",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> parts) -> parts"
      },
      {
        "name": "x15",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> parts) -> parts"
      },
      {
        "name": "x16",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> parts) -> parts"
      },
      {
        "name": "x17",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> parts) -> parts"
      },
      {
        "name": "x18",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> parts) -> parts"
      },
      {
        "name": "x19",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> parts) -> parts"
      },
      {
        "name": "x2",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> parts) -> parts"
      },
      {
        "name": "x20",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> parts) -> parts"
      },
      {
        "name": "x21",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> parts) -> parts"
      },
      {
        "name": "x22",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> parts) -> parts"
      },
      {
        "name": "x23",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> parts) -> parts"
      },
      {
        "name": "x24",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> parts) -> parts"
      },
      {
        "name": "x25",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> parts) -> parts"
      },
      {
        "name": "x26",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> parts) -> parts"
      },
      {
        "name": "x27",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> parts) -> parts"
      },
      {
        "name": "x28",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> parts) -> parts"
      },
      {
        "name": "x29",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> parts) -> parts"
      },
      {
        "name": "x3",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> parts) -> parts"
      },
      {
        "name": "x30",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> parts) -> parts"
      },
      {
        "name": "x31",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> parts) -> parts"
      },
      {
        "name": "x32",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> parts) -> parts"
      },
      {
        "name": "x33",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> parts) -> parts"
      },
      {
        "name": "x34",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> parts) -> parts"
      },
      {
        "name": "x35",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> parts) -> parts"
      },
      {
        "name": "x36",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> parts) -> parts"
      },
      {
        "name": "x37",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> parts) -> parts"
      },
      {
        "name": "x38",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> parts) -> parts"
      },
      {
        "name": "x39",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> parts) -> parts"
      },
      {
        "name": "x4",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> parts) -> parts"
      },
      {
        "name": "x40",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> parts) -> parts"
      },
      {
        "name": "x41",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> Components.Container s41 m41 p41 -> parts) -> parts"
      },
      {
        "name": "x42",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> Components.Container s41 m41 p41 -> Components.Container s42 m42 p42 -> parts) -> parts"
      },
      {
        "name": "x43",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> Components.Container s41 m41 p41 -> Components.Container s42 m42 p42 -> Components.Container s43 m43 p43 -> parts) -> parts"
      },
      {
        "name": "x44",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> Components.Container s41 m41 p41 -> Components.Container s42 m42 p42 -> Components.Container s43 m43 p43 -> Components.Container s44 m44 p44 -> parts) -> parts"
      },
      {
        "name": "x45",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> Components.Container s41 m41 p41 -> Components.Container s42 m42 p42 -> Components.Container s43 m43 p43 -> Components.Container s44 m44 p44 -> Components.Container s45 m45 p45 -> parts) -> parts"
      },
      {
        "name": "x46",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> Components.Container s41 m41 p41 -> Components.Container s42 m42 p42 -> Components.Container s43 m43 p43 -> Components.Container s44 m44 p44 -> Components.Container s45 m45 p45 -> Components.Container s46 m46 p46 -> parts) -> parts"
      },
      {
        "name": "x47",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> Components.Container s41 m41 p41 -> Components.Container s42 m42 p42 -> Components.Container s43 m43 p43 -> Components.Container s44 m44 p44 -> Components.Container s45 m45 p45 -> Components.Container s46 m46 p46 -> Components.Container s47 m47 p47 -> parts) -> parts"
      },
      {
        "name": "x48",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> Components.Container s41 m41 p41 -> Components.Container s42 m42 p42 -> Components.Container s43 m43 p43 -> Components.Container s44 m44 p44 -> Components.Container s45 m45 p45 -> Components.Container s46 m46 p46 -> Components.Container s47 m47 p47 -> Components.Container s48 m48 p48 -> parts) -> parts"
      },
      {
        "name": "x49",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> Components.Container s41 m41 p41 -> Components.Container s42 m42 p42 -> Components.Container s43 m43 p43 -> Components.Container s44 m44 p44 -> Components.Container s45 m45 p45 -> Components.Container s46 m46 p46 -> Components.Container s47 m47 p47 -> Components.Container s48 m48 p48 -> Components.Container s49 m49 p49 -> parts) -> parts"
      },
      {
        "name": "x5",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> parts) -> parts"
      },
      {
        "name": "x50",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> Components.Container s10 m10 p10 -> Components.Container s11 m11 p11 -> Components.Container s12 m12 p12 -> Components.Container s13 m13 p13 -> Components.Container s14 m14 p14 -> Components.Container s15 m15 p15 -> Components.Container s16 m16 p16 -> Components.Container s17 m17 p17 -> Components.Container s18 m18 p18 -> Components.Container s19 m19 p19 -> Components.Container s20 m20 p20 -> Components.Container s21 m21 p21 -> Components.Container s22 m22 p22 -> Components.Container s23 m23 p23 -> Components.Container s24 m24 p24 -> Components.Container s25 m25 p25 -> Components.Container s26 m26 p26 -> Components.Container s27 m27 p27 -> Components.Container s28 m28 p28 -> Components.Container s29 m29 p29 -> Components.Container s30 m30 p30 -> Components.Container s31 m31 p31 -> Components.Container s32 m32 p32 -> Components.Container s33 m33 p33 -> Components.Container s34 m34 p34 -> Components.Container s35 m35 p35 -> Components.Container s36 m36 p36 -> Components.Container s37 m37 p37 -> Components.Container s38 m38 p38 -> Components.Container s39 m39 p39 -> Components.Container s40 m40 p40 -> Components.Container s41 m41 p41 -> Components.Container s42 m42 p42 -> Components.Container s43 m43 p43 -> Components.Container s44 m44 p44 -> Components.Container s45 m45 p45 -> Components.Container s46 m46 p46 -> Components.Container s47 m47 p47 -> Components.Container s48 m48 p48 -> Components.Container s49 m49 p49 -> Components.Container s50 m50 p50 -> parts) -> parts"
      },
      {
        "name": "x6",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> parts) -> parts"
      },
      {
        "name": "x7",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> parts) -> parts"
      },
      {
        "name": "x8",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> parts) -> parts"
      },
      {
        "name": "x9",
        "comment": " ",
        "type": "(Components.Container s1 m1 p1 -> Components.Container s2 m2 p2 -> Components.Container s3 m3 p3 -> Components.Container s4 m4 p4 -> Components.Container s5 m5 p5 -> Components.Container s6 m6 p6 -> Components.Container s7 m7 p7 -> Components.Container s8 m8 p8 -> Components.Container s9 m9 p9 -> parts) -> parts"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]