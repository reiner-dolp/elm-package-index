[
  {
    "name": "App",
    "comment": "\n\n\n# Create an app\n\n@docs Config, Application, application\n\n\n# Link helpers\n\n@docs link, button\n\n",
    "aliases": [
      {
        "name": "Application",
        "comment": " ",
        "args": [
          "app",
          "route",
          "page",
          "msg"
        ],
        "type": "Platform.Program Basics.Never (App.Model route app page) (App.Msg route msg)"
      },
      {
        "name": "Config",
        "comment": " The configuration. In this world, your model will\ncontain data which is shared across all pages, as well as past\nmodel of each page if you wish to keep them. These past models\ncan then be used to reinitialize your page when re-visiting it.\n\n  - init: The initial state of all your data and pages.\n  - parser: The parser for your routes.\n  - load: Get the past model of your page, if any, and initialize a page.\n  - save: Save the model once you're leaving the page.\n  - update: Update your current page.\n  - view: View your current page.\n\n",
        "args": [
          "app",
          "route",
          "page",
          "msg"
        ],
        "type": "{ init : app , parser : UrlParser.Parser (route -> route) route , composer : route -> String , load : Result.Result Navigation.Location route -> app -> ( page, Platform.Cmd.Cmd msg ) , save : page -> app -> app , update : msg -> page -> ( page, Platform.Cmd.Cmd msg ) , view : page -> Html.Html msg , subscriptions : page -> Platform.Sub.Sub msg }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "application",
        "comment": " Create a single page app.\n",
        "type": "App.Config app route page msg -> App.Application app route page msg"
      },
      {
        "name": "button",
        "comment": " A button link which prevents default.\n",
        "type": "(route -> String) -> (route -> msg) -> route -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "link",
        "comment": " A link which prevents default.\n",
        "type": "(route -> String) -> (route -> msg) -> route -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Flags.App",
    "comment": "\n\n\n# Create an app with flags\n\n@docs Config, Application, application\n\n",
    "aliases": [
      {
        "name": "Application",
        "comment": " ",
        "args": [
          "app",
          "route",
          "page",
          "msg"
        ],
        "type": "Platform.Program Json.Decode.Value (Flags.App.Model route app page) (Flags.App.Msg route msg)"
      },
      {
        "name": "Config",
        "comment": " Almost identitcal to `App.Config`, except for some important differences:\n\n  - `init` takes flags.\n  - `decoder` decodes your flags\n  - `broken` gives you the decoding error and returns a page.\n\nNote: Want to handle decoding errors your own way? Just set `decoder`\nto `Json.succeed` and have your `init` take a `Json.Value` which you can\nthen decode for real however you like.\n\n",
        "args": [
          "flags",
          "app",
          "route",
          "page",
          "msg"
        ],
        "type": "{ init : flags -> app , decoder : Json.Decode.Decoder flags , broken : String -> ( page, Platform.Cmd.Cmd msg ) , parser : UrlParser.Parser (route -> route) route , composer : route -> String , load : Result.Result Navigation.Location route -> app -> ( page, Platform.Cmd.Cmd msg ) , save : page -> app -> app , update : msg -> page -> ( page, Platform.Cmd.Cmd msg ) , view : page -> Html.Html msg , subscriptions : page -> Platform.Sub.Sub msg }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "application",
        "comment": " Create a single page app with flags\n",
        "type": "Flags.App.Config flags app route page msg -> Flags.App.Application app route page msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]