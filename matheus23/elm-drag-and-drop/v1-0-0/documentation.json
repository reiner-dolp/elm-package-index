[
  {
    "name": "DragAndDrop.ReorderList",
    "comment": "\n\n\n# Make a reorderable list of elements\n\nThis module is ment to be imported like this:\n\n    import DragAndDrop.ReorderList as ReorderList\n    import DragAndDrop.Divider as Divider\n\nUsing this module you can simply refactor your `List a` of non-reorderable\nelements in your model to reorderable elements, by changing the type to\n`ReorderList.Model a` and adding some update functions, subscriptions and\nmessages.\n\n\n# Model\n\n@docs Model, init, Msg\n\n\n# Update\n\n@docs update, subscriptions\n\n\n# View\n\n@docs ViewConfig, view\n\n\n# Model utilities\n\n@docs elements\n\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " The model for a list of reorderable elements.\n\nYou can use this as a replacement for lists in your model\n(which werent reorderable before). So if you have this:\n\n    type alias Model =\n        { catImages : List CatImage\n        }\n\nYou can refactor it to this:\n\n    type alias Model =\n        { catImages : ReorderList.Model CatImage\n        }\n\nUse `init` to create an initial model.\n\nMaintains the `DragAndDrop.Model` for making use of the\n`DragAndDrop`-module.\n\n",
        "args": [
          "a"
        ],
        "type": "{ elements : List a, dragModel : DragAndDrop.Model Int Int }"
      },
      {
        "name": "ViewConfig",
        "comment": " A configuration for the viewing function. It should be the same\nfor all of your calls, so could be top-level defined.\n\n    reorderListConfig : ViewConfig MyStyle MyVariants Msg\n    reorderListConfig =\n        { nostyle = MyNoStyle -- your representation of no styles for an element\n        , dividerSize = 40 -- size for the dividers between elements, that can be dropped to in pixels\n        , orientation = Divider.Horizontal -- the orientation the the *dividers* have (not the overall list)\n        , viewItems = myViewFunction -- : List a -> List (Element MyStyle MyVariants Msg)\n        }\n\n",
        "args": [
          "style",
          "variant",
          "a",
          "msg"
        ],
        "type": "{ nostyle : style , dividerSize : Float , orientation : DragAndDrop.Divider.Orientation , viewItems : List a -> List (Element.Element style variant msg) }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Use this union type to extend your messages so that you can\nuse the `ReorderList.update` function.\n\nWhen you had these messages before:\n\n    type Msg\n        = UpdateCatImage Int ...\n        | RemoveCatImage Int\n\nYou refactor it to be like this:\n\n    type CatImageMsg\n        = UpdateCatImage Int ...\n        | RemoveCatImage Int\n\n    type alias Msg =\n        ReorderList.Msg CatImageMsg\n\n",
        "args": [
          "msg"
        ],
        "cases": [
          [
            "ElementsMsg",
            [
              "msg"
            ]
          ],
          [
            "DragAndDropMsg",
            [
              "DragAndDrop.Msg Int Int"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "elements",
        "comment": " Focus on a subpart of the model, the list of elements.\n",
        "type": "Focus.Setter (DragAndDrop.ReorderList.Model a) (DragAndDrop.ReorderList.Model b) (List a) (List b)"
      },
      {
        "name": "init",
        "comment": " Create an initial `ReorderList.Model` from a list of elements.\n",
        "type": "List a -> DragAndDrop.ReorderList.Model a"
      },
      {
        "name": "subscriptions",
        "comment": " The subscriptions necessary for running this module and generating needed\nmessages for drag and drop actions.\n",
        "type": "DragAndDrop.ReorderList.Model a -> Platform.Sub.Sub (DragAndDrop.ReorderList.Msg msg)"
      },
      {
        "name": "update",
        "comment": " The updating function that takes care of messages. Refactor your code from\n\n    update : Msg -> Model -> Model\n    update =\n        <handle msgs>\n\nto\n\n    updateCatImages : CatImageMsg -> List CatImage -> List CatImage\n    updateCatImages =\n        ...\n\n    update : Msg -> Model -> Model\n    update msg model =\n        { model | catImages = ReorderList.update updateCatImages msg model.catImages }\n\n",
        "type": "(msg -> List a -> List a) -> DragAndDrop.ReorderList.Msg msg -> DragAndDrop.ReorderList.Model a -> DragAndDrop.ReorderList.Model a"
      },
      {
        "name": "view",
        "comment": " View a reorderable list of elements, but without combining them all together. You get\nback a `List (Element style variant (Msg msg))`. You can work with this list however you\nwant to. Only show the first 10 elements, or only the last 7, or you can interleave these\nelements with other `Element`s.\n\nYou need to provide a `ViewConfig` and a `ReorderList.Model`. This already attaches\ndividers when dragging elements.\n\nSee `ViewConfig` and `Model`.\n\n",
        "type": "DragAndDrop.ReorderList.ViewConfig style variant a msg -> DragAndDrop.ReorderList.Model a -> List (Element.Element style variant (DragAndDrop.ReorderList.Msg msg))"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "DragAndDrop",
    "comment": "\n\n\n# DragAndDrop\n\nThis model is the low-level interface for drag and drop. It can still directly be\nuseful for applications, though.\n\n\n# Model\n\n@docs Model, DraggingData, NotDraggingData, init\n\n\n# Messages\n\n@docs Msg, Event\n\n\n# Updating\n\n@docs updateWithEvents, update, subscriptions\n\n\n# Make Elements draggable/droppable in your View\n\n@docs draggable, droppable, draggableHtml, droppableHtml\n\n\n# Querying the Dragging Model\n\n@docs isDragging, isDraggingId, isHoveringDraggableId, isHoveringDroppableId\n\n",
    "aliases": [
      {
        "name": "DraggingData",
        "comment": " This is the Model that is present during a Dragging action. The `dragId`\nis the element that was dragged, and the `hoverDropId` is `Just dropId`, if\nthe user is currently dragging above a droppable element, but has not released\nthe mouse yet, or `Nothing` if not hovering any droppable element.\n\nDroppable elements are elements with attributes from the functions\n`droppable` or `droppableHtml`.\n\n",
        "args": [
          "dragId",
          "dropId"
        ],
        "type": "{ dragId : dragId, hoverDropId : Maybe.Maybe dropId }"
      },
      {
        "name": "NotDraggingData",
        "comment": " This is the Model that is present while no element is being dragged.\nIn this case `hoverDragId` stores `Just dragId` if the mouse is currently\nover a draggable element (see `draggable` and `draggableHtml`), but the user\ndid not yet started to drag the element.\n",
        "args": [
          "dragId"
        ],
        "type": "{ hoverDragId : Maybe.Maybe dragId }"
      }
    ],
    "types": [
      {
        "name": "Event",
        "comment": " Events that can be produced by the `updateWithEvents` function after\na drop action, that is a user hovering a draggable element, starting to\ndrag the mouse and then releasing the mouse.\n\nIf the user has released the mouse while hovering a droppable element,\nthen a `SuccessfulDrop dragId dropId`, if not, a\n`FailedDrop dragId` is generated.\n\nUpon starting to drag a draggable element, a `StartedDrag dragId` event is\nproduced.\n\n",
        "args": [
          "dragId",
          "dropId"
        ],
        "cases": [
          [
            "StartedDrag",
            [
              "dragId"
            ]
          ],
          [
            "SuccessfulDrop",
            [
              "dragId",
              "dropId"
            ]
          ],
          [
            "FailedDrop",
            [
              "dragId"
            ]
          ]
        ]
      },
      {
        "name": "Model",
        "comment": " The model for the low level drag-and-drop api. It is ment to be stored\ninside the model of the component using this module.\n\nAlong the lines of this:\n\n    type alias Model =\n        { draggableCatImages : List CatIdentifier\n        , droppableCatBaskets : List (List CatIdentifier)\n        , dragModel : DragAndDrop.Model CatIdentifier Int\n        }\n\nWhere the `dragId` is the `CatIdentifier` used to find out what cat image\nwas dragged by the user, and `dropId` is an `Int` for identifying the\nbasked that the cat image was dropped to.\n\n",
        "args": [
          "dragId",
          "dropId"
        ],
        "cases": [
          [
            "Dragging",
            [
              "DragAndDrop.DraggingData dragId dropId"
            ]
          ],
          [
            "NotDragging",
            [
              "DragAndDrop.NotDraggingData dragId"
            ]
          ]
        ]
      },
      {
        "name": "Msg",
        "comment": " The messages for this module. Include them in your Msg type like so:\n\n    type Msg\n        = ...\n        | DragAndDropMsg (DragAndDrop.Msg CatIdentifier Int)\n\n",
        "args": [
          "dragId",
          "dropId"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "draggable",
        "comment": " Make a style-element `Element` draggable in your view by appending these attributes:\n\n    viewCatImage : Model -> CatIdentifier -> Element Style Variation Msg\n    viewCatImage model identifier =\n        Element.el Style\n            (DragAndDrop.draggable model.dragModel DragAndDropMsg identifier)\n            (viewImage model identifier)\n\n",
        "type": "DragAndDrop.Model dragId dropId -> (DragAndDrop.Msg dragId dropId -> msg) -> dragId -> List (Element.Attribute varying msg)"
      },
      {
        "name": "draggableHtml",
        "comment": " A version of `draggable` for usage without the style-elements package, but with\nelm-lang/html.\n",
        "type": "DragAndDrop.Model dragId dropId -> (DragAndDrop.Msg dragId dropId -> msg) -> dragId -> List (Html.Attribute msg)"
      },
      {
        "name": "droppable",
        "comment": " Make a style-element `Element` droppable in your view by appending these attributes:\n\n    viewBasket : Model -> Int -> Element Style Variation Msg\n    viewBasket model basketIndex =\n        Element.el Style\n            (DragAndDrop.droppable model.dragModel DragAndDropMsg basketIndex)\n            renderedBasket\n\n",
        "type": "DragAndDrop.Model dragId dropId -> (DragAndDrop.Msg dragId dropId -> msg) -> dropId -> List (Element.Attribute varying msg)"
      },
      {
        "name": "droppableHtml",
        "comment": " A version of `droppable` for usage without the style-elements package, but with\nelm-lang/html.\n",
        "type": "DragAndDrop.Model dragId dropId -> (DragAndDrop.Msg dragId dropId -> msg) -> dropId -> List (Html.Attribute msg)"
      },
      {
        "name": "init",
        "comment": " The initial model for this module's `Model`\n",
        "type": "DragAndDrop.Model dragId dropId"
      },
      {
        "name": "isDragging",
        "comment": " Find out whether the user is currently dragging an element.\n",
        "type": "DragAndDrop.Model dragId dropId -> Bool"
      },
      {
        "name": "isDraggingId",
        "comment": " Find out whether the user is currently dragging a specific element\n",
        "type": "dragId -> DragAndDrop.Model dragId dropId -> Bool"
      },
      {
        "name": "isHoveringDraggableId",
        "comment": " Find out wheter the user is currently hovering over a specific draggable\nelement (while not dragging)\n",
        "type": "dragId -> DragAndDrop.Model dragId dragId -> Bool"
      },
      {
        "name": "isHoveringDroppableId",
        "comment": " Find out whether the user is currently hovering over a specific droppable\nelement (while dragging)\n",
        "type": "dropId -> DragAndDrop.Model dragId dropId -> Bool"
      },
      {
        "name": "subscriptions",
        "comment": " You need to include the subscriptions for this project in order for\ndrop events to be registered, since this listens on `Mouse.ups`.\n\nAdd it to your subscriptions like this:\n\n    subscriptions : Sub Msg\n    subscriptions model =\n        Sub.batch\n            [ ...\n            , Sub.map DragAndDropMsg (DragAndDrop.subscriptions model.dragModel)\n            ]\n\n",
        "type": "DragAndDrop.Model dragId dropId -> Platform.Sub.Sub (DragAndDrop.Msg dragId dropId)"
      },
      {
        "name": "update",
        "comment": " Similar to `updateWithEvents` but non-sticky by default and without\nproducing events.\n\nIn your own update function:\n\n    update : Msg -> Model -> Model\n    update msg model =\n        case msg of\n            DragAndDropMsg dragAndDropMsg ->\n                { model | dragModel = DragAndDrop.update dragAndDropMsg model.dragModel }\n\n            ... -> ...\n\n",
        "type": "DragAndDrop.Msg dragId dropId -> DragAndDrop.Model dragId dropId -> DragAndDrop.Model dragId dropId"
      },
      {
        "name": "updateWithEvents",
        "comment": " Use this method in your update function to receive `Event`s if\nthe user sucessfully drag-and-dropped an element or failed to do so, etc.\n(see `Event`).\n\nUpdating can be done sticky, that means a drop is successful, even if the user\ndoes not hover the droppable area anymore, but has done so before.\n\nUse it in your update function:\n\n    update : Msg -> Model -> Model\n    update msg model =\n        case DragAndDropMsg dndMsg ->\n            let ( dragModel, maybeEvent ) =\n                    updateWithEvents True dndMsg model.dragModel\n\n                newModel = { model | dragModel = dragModel }\n            in\n            Maybe.withDefault newModel (Maybe.map maybeEvent (updateDrop newModel))\n\n    updateDrop : DragAndDrop.Event CatIdentifier Int -> Model -> Model\n    updateDrop event = ...\n\n",
        "type": "Bool -> DragAndDrop.Msg dragId dropId -> DragAndDrop.Model dragId dropId -> ( DragAndDrop.Model dragId dropId , Maybe.Maybe (DragAndDrop.Event dragId dropId) )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "DragAndDrop.Divider",
    "comment": " This module's contents are almost all unexposed right now. This might change in the future,\nwhen you can customize the dividers in your `ReorderList`.\n\n    import DragAndDrop.Divider as Divider\n\n@docs Orientation\n\n\n# Unstable API\n\n@docs viewWith, defaultDivider\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Orientation",
        "comment": " The orientation the divider is dividing.\n\nThink of a divider as a fine line between elements. It is a horizontal divider,\nwhen the line is horizontal (even though it divides elements vertically).\n\nThis might be really confusing right now can should change in the future.\n\n",
        "args": [],
        "cases": [
          [
            "Horizontal",
            []
          ],
          [
            "Vertical",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "defaultDivider",
        "comment": " A default divider.\n\nShows a fine, black line when hovered and a fine grey line when not hovered.\n\nThe line is oriented the way given as orientation.\n\nApi might change in the future.\n\n",
        "type": "DragAndDrop.Divider.DividerImage msg"
      },
      {
        "name": "viewWith",
        "comment": " View a divider\n\n    Divider.viewWith (Divider.defaultDivider isHovered) orientation size attributes\n\nApi might change in the future.\n\n",
        "type": "(DragAndDrop.Divider.Orientation -> Float -> Html.Html msg) -> DragAndDrop.Divider.ViewFunction msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]