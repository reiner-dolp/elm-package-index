[
  {
    "name": "NaturalUi",
    "comment": " Opinionated design system with a friendly API. [Demo.](https://peterszerzo.github.io/elm-natural-ui)\n\n\n# UI elements\n\n@docs authScreen, layout, button, card, input, checkbox, searchBar, modal, loader, select, link, loaderWrapper, formPack, listEditor, sidebar, tabs, switch, toggle, table, simpleLink, notification, chipElement, slider\n\n\n# Attributes\n\n@docs title, body, popup, help, state, data, children, toMsg, warning, error, enabled, placeholder, htmlAttrs, inputHtmlAttrs, icon, id, label, navigate, onClick, onClose, onSuggestion, suggestions, url, discrete, options, loading, css\n\n\n# Icons\n\n@docs plus, plusInCircle, barbell, webhook, checkmarkInCircle, variable, slot, duplicate, trash, target, channels, pen, gear, tree, chip, bot, caretLeft, chevronLeft, chevronRight, chevronUp, chevronDown, search, close, pen, questionInCircle, chart, logout, person, hammer\n\n\n# Misc\n\n@docs globalStyles\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "authScreen",
        "comment": " AuthScreen element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "barbell",
        "comment": " Barbell icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "body",
        "comment": " Content body attribute\n",
        "type": "String -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "bot",
        "comment": " Tree icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "button",
        "comment": " Button element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "card",
        "comment": " Card element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "caretLeft",
        "comment": " Caret left icon - DEPRECATED, use [chevronLeft](#chevronLeft)\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "channels",
        "comment": " Channels icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "chart",
        "comment": " Chart icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "checkbox",
        "comment": " Checkbox element\n",
        "type": "List (NaturalUi.Settings.Setting {} (List String) msg) -> Html.Styled.Html msg"
      },
      {
        "name": "checkmarkInCircle",
        "comment": " Checkmark icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "chevronDown",
        "comment": " ChevronDown icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "chevronLeft",
        "comment": " ChevronLeft icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "chevronRight",
        "comment": " ChevronRight icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "chevronUp",
        "comment": " ChevronUp icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "children",
        "comment": " Html children\n",
        "type": "List (Html.Styled.Html msg) -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "chip",
        "comment": " Chip icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "chipElement",
        "comment": " Chip element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "close",
        "comment": " Close icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "css",
        "comment": " `elm-css` styles\n",
        "type": "Css.Style -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "data",
        "comment": " View data 'owned' by the outside application. Of course, all state is owned by the outside app, but contrary to [state](#state), this holds core application data that may reach servers later.\n",
        "type": "data -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "discrete",
        "comment": " Discrete theme\n",
        "type": "NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "duplicate",
        "comment": " Duplicate icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "enabled",
        "comment": " Enabled state\n",
        "type": "Bool -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "error",
        "comment": " Error theme\n",
        "type": "NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "formPack",
        "comment": " FormPack element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "gear",
        "comment": " Gear icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "globalStyles",
        "comment": " Global setup styles\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "hammer",
        "comment": " Hammer icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "help",
        "comment": " Help text\n",
        "type": "String -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "htmlAttrs",
        "comment": " Html attributes for the UI element's container node (style, class name, etc.)\n",
        "type": "List (Html.Styled.Attribute msg) -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "icon",
        "comment": " SVG icon\n",
        "type": "Html.Styled.Html msg -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "id",
        "comment": " Id\n",
        "type": "String -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "input",
        "comment": " Input element\n",
        "type": "List (NaturalUi.Settings.Setting Int String msg) -> Html.Styled.Html msg"
      },
      {
        "name": "inputHtmlAttrs",
        "comment": " Html attributes for the main input field inside the element. Useful to set attributes such as focus/blur handlers.\n",
        "type": "List (Html.Styled.Attribute msg) -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "label",
        "comment": " Labels, used for forms and sections\n",
        "type": "String -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "layout",
        "comment": " AppLayout element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "link",
        "comment": " Link element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "listEditor",
        "comment": " List editor element\n",
        "type": "List (NaturalUi.Settings.Setting NaturalUi.ListEditor.State NaturalUi.ListEditor.Data msg) -> Html.Styled.Html msg"
      },
      {
        "name": "loader",
        "comment": " Loader element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "loaderWrapper",
        "comment": " LoaderWrapper element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "loading",
        "comment": " Specifies whether the UI element is in a loading state\n",
        "type": "Bool -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "logout",
        "comment": " Logout icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "modal",
        "comment": " Modal element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "navigate",
        "comment": " Client-side navigation message, taking a path string as a parameter\n",
        "type": "(String -> msg) -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "notification",
        "comment": " Notification element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "onClick",
        "comment": " Click handler\n",
        "type": "msg -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "onClose",
        "comment": " Close handler\n",
        "type": "msg -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "onSuggestion",
        "comment": " Handler for when the user accepts a suggestion\n",
        "type": "(String -> msg) -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "options",
        "comment": " List of options, e.g. for select\n",
        "type": "List String -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "pen",
        "comment": " Pen icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "person",
        "comment": " Person icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "placeholder",
        "comment": " Placeholder\n",
        "type": "String -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "plus",
        "comment": " Plus icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "plusInCircle",
        "comment": " PlusInCircle icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "popup",
        "comment": " Popup attribute - specify children that go into a popup belonging to the element.\n",
        "type": "List (Html.Styled.Html msg) -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "questionInCircle",
        "comment": " QuestionInCircle icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "search",
        "comment": " Search icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "searchBar",
        "comment": " SearchBar element\n",
        "type": "List (NaturalUi.Settings.Setting {} String msg) -> Html.Styled.Html msg"
      },
      {
        "name": "select",
        "comment": " Select element\n",
        "type": "List (NaturalUi.Settings.Setting {} String msg) -> Html.Styled.Html msg"
      },
      {
        "name": "sidebar",
        "comment": " Sidebar element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never (NaturalUi.Sidebar.Data msg) msg) -> Html.Styled.Html msg"
      },
      {
        "name": "simpleLink",
        "comment": " Simple link element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "slider",
        "comment": " Slider element\n",
        "type": "List (NaturalUi.Settings.Setting NaturalUi.Slider.State NaturalUi.Slider.Data msg) -> Html.Styled.Html msg"
      },
      {
        "name": "slot",
        "comment": " Slot icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "state",
        "comment": " Internal UI widget state, see <http://package.elm-lang.org/packages/evancz/elm-sortable-table/1.0.1/Table#view>\n",
        "type": "state -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "suggestions",
        "comment": " Suggestions for words that autocomplete should recognize\n",
        "type": "List String -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "switch",
        "comment": " SearchBar element\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never Basics.Never msg) -> Html.Styled.Html msg"
      },
      {
        "name": "table",
        "comment": " Smart table\n",
        "type": "List (NaturalUi.Settings.Setting NaturalUi.Table.State (NaturalUi.Table.Data msg) msg) -> Html.Styled.Html msg"
      },
      {
        "name": "tabs",
        "comment": " Tabs element\n",
        "type": "List (NaturalUi.Settings.Setting NaturalUi.Tabs.State (NaturalUi.Tabs.Data msg) msg) -> Html.Styled.Html msg"
      },
      {
        "name": "target",
        "comment": " Target icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "title",
        "comment": " Title attribute\n",
        "type": "String -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "toMsg",
        "comment": " A'la [elm-sortable-table](http://package.elm-lang.org/packages/evancz/elm-sortable-table/1.0.1/Table#view), this is how components communicate to the outside application. The slight modification is that components always pass back both their new internal state and the new data through this method.\n",
        "type": "((state -> data -> ( state, data )) -> msg) -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "toggle",
        "comment": " Toggle element\n",
        "type": "List (NaturalUi.Settings.Setting NaturalUi.Toggle.State NaturalUi.Toggle.Data msg) -> Html.Styled.Html msg"
      },
      {
        "name": "trash",
        "comment": " Trash icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "tree",
        "comment": " Tree icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "url",
        "comment": " Url for links and help sections\n",
        "type": "String -> NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "variable",
        "comment": " Variable icon\n",
        "type": "Html.Styled.Html msg"
      },
      {
        "name": "warning",
        "comment": " Warning theme\n",
        "type": "NaturalUi.Settings.Setting state data msg"
      },
      {
        "name": "webhook",
        "comment": " Webhooks icon\n",
        "type": "Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "NaturalUi.Table",
    "comment": " Smart table\n\n\n# Types\n\n@docs State, SortState, Data, Row\n\n\n# Methods\n\n@docs getConfig, init, view\n\n",
    "aliases": [
      {
        "name": "Data",
        "comment": " Data\n",
        "args": [
          "msg"
        ],
        "type": "{ headers : List String, rows : List (NaturalUi.Table.Row msg) }"
      },
      {
        "name": "Row",
        "comment": " Row\n",
        "args": [
          "msg"
        ],
        "type": "{ cells : List ( String, Html.Styled.Html msg ) , isEnabled : Bool , actions : List { icon : Html.Styled.Html msg , action : msg , withDeletePrompt : Bool } , defaultAction : Maybe.Maybe msg }"
      },
      {
        "name": "SortState",
        "comment": " Sort state\n",
        "args": [],
        "type": "{ columnIndex : Int, isAscending : Bool }"
      }
    ],
    "types": [
      {
        "name": "State",
        "comment": " State\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getConfig",
        "comment": " Get configuration from a list of settings\n",
        "type": "List (NaturalUi.Settings.Setting NaturalUi.Table.State (NaturalUi.Table.Data msg) msg) -> NaturalUi.Table.Config msg"
      },
      {
        "name": "init",
        "comment": " Init\n",
        "type": "NaturalUi.Table.State"
      },
      {
        "name": "view",
        "comment": " View\n",
        "type": "NaturalUi.Table.Config msg -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "NaturalUi.ListEditor",
    "comment": " List editor component\n\n@docs State, Data, getConfig, init, view\n\n",
    "aliases": [
      {
        "name": "Data",
        "comment": " Data\n",
        "args": [],
        "type": "List String"
      },
      {
        "name": "State",
        "comment": " State\n",
        "args": [],
        "type": "{ editing : Maybe.Maybe { index : Int, cursor : Int } , inputFieldsExpanded : Int }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "getConfig",
        "comment": " Get configuration from a list of settings\n",
        "type": "List (NaturalUi.Settings.Setting NaturalUi.ListEditor.State NaturalUi.ListEditor.Data msg) -> NaturalUi.ListEditor.Config msg"
      },
      {
        "name": "init",
        "comment": " Init\n",
        "type": "NaturalUi.ListEditor.State"
      },
      {
        "name": "view",
        "comment": " View\n",
        "type": "NaturalUi.ListEditor.Config msg -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "NaturalUi.Toggle",
    "comment": " Toggle component\n\n@docs State, Data, getConfig, view\n\n",
    "aliases": [
      {
        "name": "Data",
        "comment": " Data\n",
        "args": [],
        "type": "{ left : String, right : String, isLeft : Bool }"
      },
      {
        "name": "State",
        "comment": " State\n",
        "args": [],
        "type": "{}"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "getConfig",
        "comment": " Get configuration from a list of settings\n",
        "type": "List (NaturalUi.Settings.Setting NaturalUi.Toggle.State NaturalUi.Toggle.Data msg) -> NaturalUi.Toggle.Config msg"
      },
      {
        "name": "view",
        "comment": " View\n",
        "type": "NaturalUi.Toggle.Config msg -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "NaturalUi.Slider",
    "comment": " Slider component\n\n@docs State, Data, getConfig, view, init\n\n",
    "aliases": [
      {
        "name": "Data",
        "comment": " Data\n",
        "args": [],
        "type": "{ low : Float, minLow : Float, high : Float, maxHigh : Float }"
      }
    ],
    "types": [
      {
        "name": "State",
        "comment": " State\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getConfig",
        "comment": " Get configuration\n",
        "type": "List (NaturalUi.Settings.Setting NaturalUi.Slider.State NaturalUi.Slider.Data msg) -> NaturalUi.Slider.Config msg"
      },
      {
        "name": "init",
        "comment": " init\n",
        "type": "NaturalUi.Slider.State"
      },
      {
        "name": "view",
        "comment": " View\n",
        "type": "NaturalUi.Slider.Config msg -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "NaturalUi.Sidebar",
    "comment": " Select component\n\n@docs Data, getConfig, view\n\n",
    "aliases": [
      {
        "name": "Data",
        "comment": " Data\n",
        "args": [
          "msg"
        ],
        "type": "{ currentPath : String , linkGroups : List { title : String , links : List { label : String, path : String, icon : Html.Styled.Html msg } } }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "getConfig",
        "comment": " Get configuration from a list of settings\n",
        "type": "List (NaturalUi.Settings.Setting Basics.Never (NaturalUi.Sidebar.Data msg) msg) -> NaturalUi.Sidebar.Config msg"
      },
      {
        "name": "view",
        "comment": " View\n",
        "type": "NaturalUi.Sidebar.Config msg -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "NaturalUi.Tabs",
    "comment": " Tabs component\n\n@docs State, Data, getConfig, view\n\n",
    "aliases": [
      {
        "name": "Data",
        "comment": " Data\n",
        "args": [
          "msg"
        ],
        "type": "List ( String, Html.Styled.Html msg )"
      },
      {
        "name": "State",
        "comment": " State\n",
        "args": [],
        "type": "Int"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "getConfig",
        "comment": " Get configuration from a list of settings\n",
        "type": "List (NaturalUi.Settings.Setting NaturalUi.Tabs.State (NaturalUi.Tabs.Data msg) msg) -> NaturalUi.Tabs.Config msg"
      },
      {
        "name": "view",
        "comment": " View\n",
        "type": "NaturalUi.Tabs.Config msg -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "NaturalUi.Mixins",
    "comment": " Style mixins\n\n\n# Typography\n\n@docs title, heading, body, strongBody, label, small\n\n\n# Z-indices\n\n@docs lowZIndex, regularZIndex, higherZIndex, popupZIndex, almightyZIndex\n\n\n# Miscellaneous skin styles\n\n@docs standardBorderRadius, standardBoxShadow, inputFocus\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "almightyZIndex",
        "comment": " Almighty z-index\n",
        "type": "Css.Style"
      },
      {
        "name": "body",
        "comment": " Regular body type\n",
        "type": "Css.Style"
      },
      {
        "name": "heading",
        "comment": " Heading type\n",
        "type": "Css.Style"
      },
      {
        "name": "higherZIndex",
        "comment": " Higher z-index\n",
        "type": "Css.Style"
      },
      {
        "name": "inputFocus",
        "comment": " Focused input style\n",
        "type": "Css.Style"
      },
      {
        "name": "label",
        "comment": " Label\n",
        "type": "Css.Style"
      },
      {
        "name": "lowZIndex",
        "comment": " Low z-index\n",
        "type": "Css.Style"
      },
      {
        "name": "popupZIndex",
        "comment": " Popup z-index\n",
        "type": "Css.Style"
      },
      {
        "name": "regularZIndex",
        "comment": " Regular z-index\n",
        "type": "Css.Style"
      },
      {
        "name": "small",
        "comment": " Small type\n",
        "type": "Css.Style"
      },
      {
        "name": "standardBorderRadius",
        "comment": " Standard border radius\n",
        "type": "Css.Style"
      },
      {
        "name": "standardBoxShadow",
        "comment": " Standard box shadow\n",
        "type": "Css.Style"
      },
      {
        "name": "strongBody",
        "comment": " Regular bolder body type\n",
        "type": "Css.Style"
      },
      {
        "name": "title",
        "comment": " Title type\n",
        "type": "Css.Style"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "NaturalUi.Constants",
    "comment": " Styling constants\n\n\n# Sizes\n\n@docs headerHeight, footerHeight, sidebarWidth\n\n\n# Colors\n\n@docs black, lighterGray, lightGray, gray, orange, lighterOrange, lightOrange, red, lighterRed, lightRed, dark, white, faintBlue, blue, lightBlue, lighterBlue\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "black",
        "comment": " Black color\n",
        "type": "String"
      },
      {
        "name": "blue",
        "comment": " Blue color\n",
        "type": "String"
      },
      {
        "name": "dark",
        "comment": " Dark color\n",
        "type": "String"
      },
      {
        "name": "faintBlue",
        "comment": " Faint blue color\n",
        "type": "String"
      },
      {
        "name": "footerHeight",
        "comment": " Footer height\n",
        "type": "Float"
      },
      {
        "name": "gray",
        "comment": " Gray color\n",
        "type": "String"
      },
      {
        "name": "headerHeight",
        "comment": " Header height\n",
        "type": "Float"
      },
      {
        "name": "lightBlue",
        "comment": " Light blue color\n",
        "type": "String"
      },
      {
        "name": "lightGray",
        "comment": " Light gray color\n",
        "type": "String"
      },
      {
        "name": "lightOrange",
        "comment": " Light orange color\n",
        "type": "String"
      },
      {
        "name": "lightRed",
        "comment": " Light red color\n",
        "type": "String"
      },
      {
        "name": "lighterBlue",
        "comment": " Slightly lighter blue color\n",
        "type": "String"
      },
      {
        "name": "lighterGray",
        "comment": " Light gray color\n",
        "type": "String"
      },
      {
        "name": "lighterOrange",
        "comment": " Lighter orange color\n",
        "type": "String"
      },
      {
        "name": "lighterRed",
        "comment": " Lighter red color\n",
        "type": "String"
      },
      {
        "name": "orange",
        "comment": " Orange color\n",
        "type": "String"
      },
      {
        "name": "red",
        "comment": " Red color\n",
        "type": "String"
      },
      {
        "name": "sidebarWidth",
        "comment": " Sidebar width\n",
        "type": "Float"
      },
      {
        "name": "white",
        "comment": " White color\n",
        "type": "String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]