[
  {
    "name": "Form.DatePicker",
    "comment": " This module is useful if you want to add a DatePicker Form element to your app.\n\n# Initialise and update\n@docs Model, init, Msg, update\n\n# View and render\n@docs view, render\n\n# State Setters\n@docs reInitialise, reset, setInitialDate, setSelectedDate\n\n# View Setters\n@docs setMinDate, setMaxDate, setIncludeTime, setIsInput, setIsError, setIsLocked, setIsClearable, setDefaultLabel, setToLabel, setId\n\n# Getters\n@docs getIsChanged, getIsOpen, getInitialDate, getSelectedDate, getId\n\n",
    "aliases": [
      {
        "name": "Msg",
        "comment": " Add a DatePicker.Msg to your Msg.\n\n    type MyMsg\n        = UpdateMyDatePicker DatePicker.Msg\n",
        "args": [],
        "type": "Form.DatePicker.Internal.Msg"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Add a DatePicker.Model to your model.\n\n    type alias MyModel =\n        { myDatePicker : DatePicker.Model\n        }\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getId",
        "comment": " Useful if you need the id of the datePicker in your update function, to set focus etc.\n",
        "type": "Form.DatePicker.View -> Maybe.Maybe String"
      },
      {
        "name": "getInitialDate",
        "comment": " Get the initial Date of your datePicker.\n",
        "type": "Form.DatePicker.Model -> Maybe.Maybe Date.Date"
      },
      {
        "name": "getIsChanged",
        "comment": " Whether your datePicker was changed. Useful if you want to disable save buttons unless there were changes etc.\n",
        "type": "Form.DatePicker.Model -> Bool"
      },
      {
        "name": "getIsOpen",
        "comment": " Whether this datePicker is currently open.\n",
        "type": "Form.DatePicker.Model -> Bool"
      },
      {
        "name": "getSelectedDate",
        "comment": " Get the current Date of your datePicker. This is what you'd use to display the data somewhere outside of your datePicker,\nor to send the data to the backend for example etc.\n",
        "type": "Form.DatePicker.Model -> Maybe.Maybe Date.Date"
      },
      {
        "name": "init",
        "comment": " Init a DatePicker.Model in your model.\n\n    myInitialModel : MyModel\n    myInitialModel =\n        { myDatePicker = DatePicker.init\n        }\n",
        "type": "Form.DatePicker.Model"
      },
      {
        "name": "reInitialise",
        "comment": " ReInitialise your DatePicker.Model.\n",
        "type": "Form.DatePicker.Model -> Form.DatePicker.Model"
      },
      {
        "name": "render",
        "comment": " Transforms an DatePicker.View into Html DatePicker.Msg\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ DatePicker.view model.myDatePicker\n                |> DatePicker.render\n                |> Html.map UpdateMyDatePicker\n            ]\n",
        "type": "Form.DatePicker.View -> Html.Styled.Html Form.DatePicker.Internal.Msg"
      },
      {
        "name": "reset",
        "comment": " Reset your DatePicker.Model.\n",
        "type": "Form.DatePicker.Model -> Form.DatePicker.Model"
      },
      {
        "name": "setDefaultLabel",
        "comment": " Set the default label, for example (-- NOTHING SELECTED --).\n",
        "type": "String -> Form.DatePicker.View -> Form.DatePicker.View"
      },
      {
        "name": "setId",
        "comment": " Give your datePicker an id. Can be useful for DOM selectors (focus, WebComponents etc.)\n",
        "type": "String -> Form.DatePicker.View -> Form.DatePicker.View"
      },
      {
        "name": "setIncludeTime",
        "comment": " Sets whether your date picker should include a time picker.\n",
        "type": "Bool -> Form.DatePicker.View -> Form.DatePicker.View"
      },
      {
        "name": "setInitialDate",
        "comment": " Set the initial Date of your DatePicker.Model.\n",
        "type": "Maybe.Maybe Date.Date -> Form.DatePicker.Model -> Form.DatePicker.Model"
      },
      {
        "name": "setIsClearable",
        "comment": " Set whether your datePicker is clearable (x icon).\n",
        "type": "Bool -> Form.DatePicker.View -> Form.DatePicker.View"
      },
      {
        "name": "setIsError",
        "comment": " Set whether your datePicker is in error mode (red border).\n",
        "type": "Bool -> Form.DatePicker.View -> Form.DatePicker.View"
      },
      {
        "name": "setIsInput",
        "comment": " Set whether your date picker is displayed as an input.\n",
        "type": "Bool -> Form.DatePicker.View -> Form.DatePicker.View"
      },
      {
        "name": "setIsLocked",
        "comment": " Set whether your datePicker is locked (disabled).\n",
        "type": "Bool -> Form.DatePicker.View -> Form.DatePicker.View"
      },
      {
        "name": "setMaxDate",
        "comment": " Set the min. date. Dates subsequent to this can't be selected. Navigation is also capped to this date.\n",
        "type": "Maybe.Maybe Date.Date -> Form.DatePicker.View -> Form.DatePicker.View"
      },
      {
        "name": "setMinDate",
        "comment": " Set the min. date. Dates prior to this can't be selected. Navigation is also capped to this date.\n",
        "type": "Maybe.Maybe Date.Date -> Form.DatePicker.View -> Form.DatePicker.View"
      },
      {
        "name": "setSelectedDate",
        "comment": " Change the Date of your DatePicker.Model.\n",
        "type": "Maybe.Maybe Date.Date -> Form.DatePicker.Model -> Form.DatePicker.Model"
      },
      {
        "name": "setToLabel",
        "comment": " Set how your Dates are printed to the screen.\n",
        "type": "(Date.Date -> String) -> Form.DatePicker.View -> Form.DatePicker.View"
      },
      {
        "name": "update",
        "comment": " Use in your update function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            UpdateMyDatePicker datePickerMsg ->\n                let\n                    (newDatePicker, cmd) =\n                        DatePicker.update datePickerMsg mode.myDatePicker\n                in\n                    { model | myDatePicker = newDatePicker } ! [ cmd ]\n",
        "type": "Form.DatePicker.Internal.Msg -> Form.DatePicker.Model -> ( Form.DatePicker.Model , Platform.Cmd.Cmd Form.DatePicker.Internal.Msg )"
      },
      {
        "name": "view",
        "comment": " Transform an DatePicker.Model into an DatePicker.View, which allows us to pipe View Setters on it.\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ DatePicker.view model.myDatePicker -- pipe view setters here, for example |> setIsLocked 'your logic here'\n            ]\n",
        "type": "Form.DatePicker.Model -> Form.DatePicker.View"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Form.Select",
    "comment": " This module is useful if you want to add a Select Form element to your app.\n\n# Initialise and update\n@docs Model, init, Msg, update\n\n# View and render\n@docs view, render\n\n# State Setters\n@docs reInitialise, reset, setInitialOption, setSelectedOption, setIsOptionDisabled\n\n# View Setters\n@docs setIsError, setIsLocked, setIsClearable, setDefaultLabel, setToLabel, setId\n\n# Getters\n@docs getIsChanged, getIsOpen, getInitialOption, getSelectedOption, getId\n\n",
    "aliases": [
      {
        "name": "Msg",
        "comment": " Add a Select.Msg to your Msg.\n\n    type MyMsg\n        = UpdateMySelect Select.Msg\n",
        "args": [
          "option"
        ],
        "type": "Form.Select.Internal.Msg option"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Add a Select.Model to your model.\n\n    type Title\n        = Mr\n        | Ms\n        | Dr\n\n    type alias MyModel =\n        { mySelect : Select.Model Title\n        }\n",
        "args": [
          "option"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getId",
        "comment": " Useful if you need the id of the select in your update function, to set focus etc.\n",
        "type": "Form.Select.View option -> Maybe.Maybe String"
      },
      {
        "name": "getInitialOption",
        "comment": " Get the initial option of your select.\n",
        "type": "Form.Select.Model option -> Maybe.Maybe option"
      },
      {
        "name": "getIsChanged",
        "comment": " Whether your select was changed. Useful if you want to disable save buttons unless there were changes etc.\n",
        "type": "Form.Select.Model option -> Bool"
      },
      {
        "name": "getIsOpen",
        "comment": " Whether this select is currently open.\n",
        "type": "Form.Select.Model option -> Bool"
      },
      {
        "name": "getSelectedOption",
        "comment": " Get the current option of your select. This is what you'd use to display the data somewhere outside of your select,\nor to send the data to the backend for example etc.\n",
        "type": "Form.Select.Model option -> Maybe.Maybe option"
      },
      {
        "name": "init",
        "comment": " Add a Select.Model to your model.\n\n    myInitialModel : MyModel\n    myInitialModel =\n        { mySelect = Select.init [Mr, Ms, Dr]\n        }\n",
        "type": "List option -> Form.Select.Model option"
      },
      {
        "name": "reInitialise",
        "comment": " ReInitialise your Select.Model.\n",
        "type": "Form.Select.Model option -> Form.Select.Model option"
      },
      {
        "name": "render",
        "comment": " Transforms an Select.View into Html Select.Msg\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ Select.view model.mySelect\n                |> Select.render\n                |> Html.map UpdateMySelect\n            ]\n",
        "type": "Form.Select.View option -> Html.Styled.Html (Form.Select.Internal.Msg option)"
      },
      {
        "name": "reset",
        "comment": " Reset your Select.Model.\n",
        "type": "Form.Select.Model option -> Form.Select.Model option"
      },
      {
        "name": "setDefaultLabel",
        "comment": " Set the default label, for example (-- NOTHING SELECTED --).\n",
        "type": "String -> Form.Select.View option -> Form.Select.View option"
      },
      {
        "name": "setId",
        "comment": " Give your select an id. Can be useful for DOM selectors (focus, WebComponents etc.)\n",
        "type": "String -> Form.Select.View option -> Form.Select.View option"
      },
      {
        "name": "setInitialOption",
        "comment": " Set the initial option of your Select.Model.\n",
        "type": "Maybe.Maybe option -> Form.Select.Model option -> Form.Select.Model option"
      },
      {
        "name": "setIsClearable",
        "comment": " Set whether your select is clearable (x icon).\n",
        "type": "Bool -> Form.Select.View option -> Form.Select.View option"
      },
      {
        "name": "setIsError",
        "comment": " Set whether your select is in error mode (red border).\n",
        "type": "Bool -> Form.Select.View option -> Form.Select.View option"
      },
      {
        "name": "setIsLocked",
        "comment": " Set whether your select is locked (disabled).\n",
        "type": "Bool -> Form.Select.View option -> Form.Select.View option"
      },
      {
        "name": "setIsOptionDisabled",
        "comment": " This function allows you to disable specific options.\n",
        "type": "(option -> Bool) -> Form.Select.View option -> Form.Select.View option"
      },
      {
        "name": "setSelectedOption",
        "comment": " Change the option of your Select.Model.\n",
        "type": "Maybe.Maybe option -> Form.Select.Model option -> Form.Select.Model option"
      },
      {
        "name": "setToLabel",
        "comment": " Set how your options are printed to the screen.\n",
        "type": "(option -> String) -> Form.Select.View option -> Form.Select.View option"
      },
      {
        "name": "update",
        "comment": " Use in your update function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            UpdateMySelect selectMsg ->\n                let\n                    (newSelect, cmd) =\n                        Select.update selectMsg mode.mySelect\n                in\n                    { model | mySelect = newSelect } ! [ cmd ]\n",
        "type": "Form.Select.Internal.Msg option -> Form.Select.Model option -> ( Form.Select.Model option , Platform.Cmd.Cmd (Form.Select.Internal.Msg option) )"
      },
      {
        "name": "view",
        "comment": " Transform an Select.Model into an Select.View, which allows us to pipe View Setters on it.\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ Select.view model.mySelect -- pipe view setters here, for example |> setIsLocked 'your logic here'\n            ]\n",
        "type": "Form.Select.Model option -> Form.Select.View option"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Form.MultiSelect",
    "comment": " This module is useful if you want to add a MultiSelect Form element to your app.\n\n# Initialise and update\n@docs Model, init, Msg, update\n\n# View and render\n@docs view, render\n\n# State Setters\n@docs reInitialise, reset, setInitialOptions, setSelectedOptions, setIsOptionDisabled\n\n# View Setters\n@docs setIsError, setIsLocked, setIsClearable, setDefaultLabel, setToLabel, setId\n\n# Getters\n@docs getIsChanged, getIsOpen, getInitialOptions, getSelectedOptions, getId\n\n",
    "aliases": [
      {
        "name": "Msg",
        "comment": " Add a MultiSelect.Msg to your Msg.\n\n    type MyMsg\n        = UpdateMyMultiSelect MultiSelect.Msg\n",
        "args": [
          "option"
        ],
        "type": "Form.MultiSelect.Internal.Msg option"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Add a MultiSelect.Model to your model.\n\n    type MusicGenre\n        = Rock\n        | Jazz\n        | Blues\n        | Metal\n\n    type alias MyModel =\n        { myMultiSelect : MultiSelect.Model MusicGenre\n        }\n",
        "args": [
          "option"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getId",
        "comment": " Useful if you need the id of the select in your update function, to set focus etc.\n",
        "type": "Form.MultiSelect.View option -> Maybe.Maybe String"
      },
      {
        "name": "getInitialOptions",
        "comment": " Get the initial option of your select.\n",
        "type": "Form.MultiSelect.Model option -> List option"
      },
      {
        "name": "getIsChanged",
        "comment": " Whether your select was changed. Useful if you want to disable save buttons unless there were changes etc.\n",
        "type": "Form.MultiSelect.Model option -> Bool"
      },
      {
        "name": "getIsOpen",
        "comment": " Whether this select is currently open.\n",
        "type": "Form.MultiSelect.Model option -> Bool"
      },
      {
        "name": "getSelectedOptions",
        "comment": " Get the current option of your select. This is what you'd use to display the data somewhere outside of your select,\nor to send the data to the backend for example etc.\n",
        "type": "Form.MultiSelect.Model option -> List option"
      },
      {
        "name": "init",
        "comment": " Add a MultiSelect.Model to your model.\n\n    myInitialModel : MyModel\n    myInitialModel =\n        { myMultiSelect = MultiSelect.init <| Nonempty Rock [Jazz, Blues, Metal]\n        }\n",
        "type": "List.Nonempty.Nonempty option -> Form.MultiSelect.Model option"
      },
      {
        "name": "reInitialise",
        "comment": " ReInitialise your MultiSelect.Model.\n",
        "type": "Form.MultiSelect.Model option -> Form.MultiSelect.Model option"
      },
      {
        "name": "render",
        "comment": " Transforms an MultiSelect.View into Html MultiSelect.Msg\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ MultiSelect.view model.myMultiSelect\n                |> MultiSelect.render\n                |> Html.map UpdateMyMultiSelect\n            ]\n",
        "type": "Form.MultiSelect.View option -> Html.Styled.Html (Form.MultiSelect.Internal.Msg option)"
      },
      {
        "name": "reset",
        "comment": " Reset your MultiSelect.Model.\n",
        "type": "Form.MultiSelect.Model option -> Form.MultiSelect.Model option"
      },
      {
        "name": "setDefaultLabel",
        "comment": " Set the default label, for example (-- NOTHING SELECTED --).\n",
        "type": "String -> Form.MultiSelect.View option -> Form.MultiSelect.View option"
      },
      {
        "name": "setId",
        "comment": " Give your select an id. Can be useful for DOM selectors (focus, WebComponents etc.)\n",
        "type": "String -> Form.MultiSelect.View option -> Form.MultiSelect.View option"
      },
      {
        "name": "setInitialOptions",
        "comment": " Set the initial option of your MultiSelect.Model.\n",
        "type": "List option -> Form.MultiSelect.Model option -> Form.MultiSelect.Model option"
      },
      {
        "name": "setIsClearable",
        "comment": " Set whether your select is clearable (x icon).\n",
        "type": "Bool -> Form.MultiSelect.View option -> Form.MultiSelect.View option"
      },
      {
        "name": "setIsError",
        "comment": " Set whether your select is in error mode (red border).\n",
        "type": "Bool -> Form.MultiSelect.View option -> Form.MultiSelect.View option"
      },
      {
        "name": "setIsLocked",
        "comment": " Set whether your select is locked (disabled).\n",
        "type": "Bool -> Form.MultiSelect.View option -> Form.MultiSelect.View option"
      },
      {
        "name": "setIsOptionDisabled",
        "comment": " This function allows you to disable specific options.\n",
        "type": "(option -> Bool) -> Form.MultiSelect.View option -> Form.MultiSelect.View option"
      },
      {
        "name": "setSelectedOptions",
        "comment": " Change the option of your MultiSelect.Model.\n",
        "type": "List option -> Form.MultiSelect.Model option -> Form.MultiSelect.Model option"
      },
      {
        "name": "setToLabel",
        "comment": " Set how your options are printed to the screen.\n",
        "type": "(option -> String) -> Form.MultiSelect.View option -> Form.MultiSelect.View option"
      },
      {
        "name": "update",
        "comment": " Use in your update function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            UpdateMyMultiSelect selectMsg ->\n                let\n                    (newSelect, cmd) =\n                        MultiSelect.update selectMsg mode.myMultiSelect\n                in\n                    { model | myMultiSelect = newSelect } ! [ cmd ]\n",
        "type": "Form.MultiSelect.Internal.Msg option -> Form.MultiSelect.Model option -> ( Form.MultiSelect.Model option , Platform.Cmd.Cmd (Form.MultiSelect.Internal.Msg option) )"
      },
      {
        "name": "view",
        "comment": " Transform an MultiSelect.Model into an MultiSelect.View, which allows us to pipe View Setters on it.\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ MultiSelect.view model.myMultiSelect -- pipe view setters here, for example |> setIsLocked 'your logic here'\n            ]\n",
        "type": "Form.MultiSelect.Model option -> Form.MultiSelect.View option"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Form.FloatInput",
    "comment": " This module is useful if you want to add an Integer based Input element to your app.\n\n# Initialise and update\n@docs Model, init, Msg, update\n\n# View and render\n@docs view, render\n\n# State Setters\n@docs reInitialise, reset, setInitialValue, setValue, setDecimal\n\n# View Setters\n@docs setPlaceholder, setMaxLength, setIsError, setIsLocked, setId\n\n# Getters\n@docs getInitialValue, getValue, getIsChanged, getId\n\n",
    "aliases": [
      {
        "name": "Msg",
        "comment": " Add a Input.Msg to your Msg.\n\n    type MyMsg\n        = UpdateMyInput Input.Msg\n",
        "args": [],
        "type": "Form.FloatInput.Internal.Msg"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Add a Input.Model to your model.\n\n    type alias MyModel =\n        { myInput : Input.Model\n        }\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getId",
        "comment": " Useful if you need the id of the input in your update function, so set focus etc.\n",
        "type": "Form.FloatInput.View -> Maybe.Maybe String"
      },
      {
        "name": "getInitialValue",
        "comment": " Get the initial value of your input.\n",
        "type": "Form.FloatInput.Model -> Maybe.Maybe Float"
      },
      {
        "name": "getIsChanged",
        "comment": " Whether your input was changed. Useful if you want to disable save buttons unless there were changes etc.\n",
        "type": "Form.FloatInput.Model -> Bool"
      },
      {
        "name": "getValue",
        "comment": " Get the current value of your input. This is what you'd use to display the data somewhere outside of your input,\nor to send the data to the backend for example etc.\n",
        "type": "Form.FloatInput.Model -> Maybe.Maybe Float"
      },
      {
        "name": "init",
        "comment": " Add a Input.Model to your model.\n\n    myInitialModel : MyModel\n    myInitialModel =\n        { myInput = Input.init -- optionally pipe into State Setters\n        }\n",
        "type": "Form.FloatInput.Model"
      },
      {
        "name": "reInitialise",
        "comment": " ReInitialise your FloatInput.Model.\n",
        "type": "Form.FloatInput.Model -> Form.FloatInput.Model"
      },
      {
        "name": "render",
        "comment": " Transforms an Input.View into Html Input.Msg\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ Input.view model.myInput\n                |> Input.render\n                |> Html.map UpdateMyInput\n            ]\n",
        "type": "Form.FloatInput.View -> Html.Styled.Html Form.FloatInput.Internal.Msg"
      },
      {
        "name": "reset",
        "comment": " Reset your FloatInput.Model.\n",
        "type": "Form.FloatInput.Model -> Form.FloatInput.Model"
      },
      {
        "name": "setDecimal",
        "comment": " Change the number of decimal places of your FloatInput.Model.\n",
        "type": "Int -> Form.FloatInput.Model -> Form.FloatInput.Model"
      },
      {
        "name": "setId",
        "comment": " Give your input an id. Can be useful for DOM selectors (focus, WebComponents etc.)\n",
        "type": "String -> Form.FloatInput.View -> Form.FloatInput.View"
      },
      {
        "name": "setInitialValue",
        "comment": " Set the initial value of your FloatInput.Model.\n",
        "type": "Float -> Form.FloatInput.Model -> Form.FloatInput.Model"
      },
      {
        "name": "setIsError",
        "comment": " Set whether your input is in error mode (red border).\n",
        "type": "Bool -> Form.FloatInput.View -> Form.FloatInput.View"
      },
      {
        "name": "setIsLocked",
        "comment": " Set whether your input is locked (disabled).\n",
        "type": "Bool -> Form.FloatInput.View -> Form.FloatInput.View"
      },
      {
        "name": "setMaxLength",
        "comment": " Set the max length for your input string.\n",
        "type": "Int -> Form.FloatInput.View -> Form.FloatInput.View"
      },
      {
        "name": "setPlaceholder",
        "comment": " Set a placeholder for your input.\n",
        "type": "String -> Form.FloatInput.View -> Form.FloatInput.View"
      },
      {
        "name": "setValue",
        "comment": " Change the value of your FloatInput.Model.\n",
        "type": "Float -> Form.FloatInput.Model -> Form.FloatInput.Model"
      },
      {
        "name": "update",
        "comment": " Use in your update function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            UpdateMyInput inputMsg ->\n                { model | myInput = Input.update inputMsg mode.myInput } ! []\n",
        "type": "Form.FloatInput.Internal.Msg -> Form.FloatInput.Model -> Form.FloatInput.Model"
      },
      {
        "name": "view",
        "comment": " Transform an Input.Model into an Input.View, which allows us to pipe View Setters on it.\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ Input.view model.myInput -- pipe view setters here, for example |> setIsLocked 'your logic here'\n            ]\n",
        "type": "Form.FloatInput.Model -> Form.FloatInput.View"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Form.IntInput",
    "comment": " This module is useful if you want to add an Integer based Input element to your app.\n\n# Initialise and update\n@docs Model, init, Msg, update\n\n# View and render\n@docs view, render\n\n# State Setters\n@docs reInitialise, reset, setInitialValue, setValue\n\n# View Setters\n@docs setPlaceholder, setMaxLength, setIsError, setIsLocked, setId\n\n# Getters\n@docs getInitialValue, getValue, getIsChanged, getId\n\n",
    "aliases": [
      {
        "name": "Msg",
        "comment": " Add a Input.Msg to your Msg.\n\n    type MyMsg\n        = UpdateMyInput Input.Msg\n",
        "args": [],
        "type": "Form.IntInput.Internal.Msg"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Add a Input.Model to your model.\n\n    type alias MyModel =\n        { myInput : Input.Model\n        }\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getId",
        "comment": " Useful if you need the id of the input in your update function, so set focus etc.\n",
        "type": "Form.IntInput.View -> Maybe.Maybe String"
      },
      {
        "name": "getInitialValue",
        "comment": " Get the initial value of your input.\n",
        "type": "Form.IntInput.Model -> Maybe.Maybe Int"
      },
      {
        "name": "getIsChanged",
        "comment": " Whether your input was changed. Useful if you want to disable save buttons unless there were changes etc.\n",
        "type": "Form.IntInput.Model -> Bool"
      },
      {
        "name": "getValue",
        "comment": " Get the current value of your input. This is what you'd use to display the data somewhere outside of your input,\nor to send the data to the backend for example etc.\n",
        "type": "Form.IntInput.Model -> Maybe.Maybe Int"
      },
      {
        "name": "init",
        "comment": " Add a Input.Model to your model.\n\n    myInitialModel : MyModel\n    myInitialModel =\n        { myInput = Input.init -- optionally pipe into State Setters\n        }\n",
        "type": "Form.IntInput.Model"
      },
      {
        "name": "reInitialise",
        "comment": " ReInitialise your Input.Model.\n",
        "type": "Form.IntInput.Model -> Form.IntInput.Model"
      },
      {
        "name": "render",
        "comment": " Transforms an Input.View into Html Input.Msg\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ Input.view model.myInput\n                |> Input.render\n                |> Html.map UpdateMyInput\n            ]\n",
        "type": "Form.IntInput.View -> Html.Styled.Html Form.IntInput.Internal.Msg"
      },
      {
        "name": "reset",
        "comment": " Reset your Input.Model.\n",
        "type": "Form.IntInput.Model -> Form.IntInput.Model"
      },
      {
        "name": "setId",
        "comment": " Give your input an id. Can be useful for DOM selectors (focus, WebComponents etc.)\n",
        "type": "String -> Form.IntInput.View -> Form.IntInput.View"
      },
      {
        "name": "setInitialValue",
        "comment": " Set the initial value of your Input.Model.\n",
        "type": "Int -> Form.IntInput.Model -> Form.IntInput.Model"
      },
      {
        "name": "setIsError",
        "comment": " Set whether your input is in error mode (red border).\n",
        "type": "Bool -> Form.IntInput.View -> Form.IntInput.View"
      },
      {
        "name": "setIsLocked",
        "comment": " Set whether your input is locked (disabled).\n",
        "type": "Bool -> Form.IntInput.View -> Form.IntInput.View"
      },
      {
        "name": "setMaxLength",
        "comment": " Set the max length for your input string.\n",
        "type": "Int -> Form.IntInput.View -> Form.IntInput.View"
      },
      {
        "name": "setPlaceholder",
        "comment": " Set a placeholder for your input.\n",
        "type": "String -> Form.IntInput.View -> Form.IntInput.View"
      },
      {
        "name": "setValue",
        "comment": " Change the value of your Input.Model.\n",
        "type": "Int -> Form.IntInput.Model -> Form.IntInput.Model"
      },
      {
        "name": "update",
        "comment": " Use in your update function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            UpdateMyInput inputMsg ->\n                { model | myInput = Input.update inputMsg model.myInput } ! []\n",
        "type": "Form.IntInput.Internal.Msg -> Form.IntInput.Model -> Form.IntInput.Model"
      },
      {
        "name": "view",
        "comment": " Transform an Input.Model into an Input.View, which allows us to pipe View Setters on it.\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ Input.view model.myInput -- pipe view setters here, for example |> setIsLocked 'your logic here'\n            ]\n",
        "type": "Form.IntInput.Model -> Form.IntInput.View"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Form.SearchSelect",
    "comment": " This module is useful if you want to add a Select Form element to your app,\nwith the options being searchable and coming from the backend.\n\n# Initialise and update\n@docs Model, init, Msg, update\n\n# View and render\n@docs view, render\n\n# State Setters\n@docs reInitialise, reset, setInitialOption, setSelectedOption, setIsOptionDisabled\n\n# View Setters\n@docs setIsError, setIsLocked, setIsClearable, setDefaultLabel, setToLabel, setId\n\n# Getters\n@docs getIsChanged, getIsOpen, getInitialOption, getSelectedOption, getId\n\n",
    "aliases": [
      {
        "name": "Msg",
        "comment": " Add a SearchSelect.Msg to your Msg.\n\n    type MyMsg\n        = UpdateMySearchSelect SearchSelect.Msg\n",
        "args": [
          "option"
        ],
        "type": "Form.SearchSelect.Internal.Msg option"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Add a SearchSelect.Model to your model.\n\n    type alias MyModel =\n        { mySearchSelect : SearchSelect.Model String\n        }\n",
        "args": [
          "option"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getId",
        "comment": " Useful if you need the id of the search select in your update function, to set focus etc.\n",
        "type": "Form.SearchSelect.View option -> Maybe.Maybe String"
      },
      {
        "name": "getInitialOption",
        "comment": " Get the initial option of your search-select.\n",
        "type": "Form.SearchSelect.Model option -> Maybe.Maybe option"
      },
      {
        "name": "getIsChanged",
        "comment": " Whether your search-select was changed. Useful if you want to disable save buttons unless there were changes etc.\n",
        "type": "Form.SearchSelect.Model option -> Bool"
      },
      {
        "name": "getIsOpen",
        "comment": " Whether this select is currently open.\n",
        "type": "Form.SearchSelect.Model option -> Bool"
      },
      {
        "name": "getSelectedOption",
        "comment": " Get the current option of your search-select. This is what you'd use to display the data somewhere outside of your search-select,\nor to send the data to the backend for example etc.\n",
        "type": "Form.SearchSelect.Model option -> Maybe.Maybe option"
      },
      {
        "name": "init",
        "comment": " Init a SearchSelect.Model in your model.\n\n      myInitialModel : MyModel\n      myInitialModel =\n          { mySearchSelect = SearchSelect.init \"https://example.com/search\" Decode.string\n          }\n  ",
        "type": "String -> Json.Decode.Decoder option -> Form.SearchSelect.Model option"
      },
      {
        "name": "reInitialise",
        "comment": " ReInitialise your SearchSelect.Model.\n",
        "type": "Form.SearchSelect.Model option -> Form.SearchSelect.Model option"
      },
      {
        "name": "render",
        "comment": " Transforms an SearchSelect.View into Html SearchSelect.Msg\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ SearchSelect.view model.mySearchSelect\n                |> SearchSelect.render\n                |> Html.map UpdateMySearchSelect\n            ]\n",
        "type": "Form.SearchSelect.View option -> Html.Styled.Html (Form.SearchSelect.Internal.Msg option)"
      },
      {
        "name": "reset",
        "comment": " Reset your SearchSelect.Model.\n",
        "type": "Form.SearchSelect.Model option -> Form.SearchSelect.Model option"
      },
      {
        "name": "setDefaultLabel",
        "comment": " Set the default label, for example (-- NOTHING SELECTED --).\n",
        "type": "String -> Form.SearchSelect.View option -> Form.SearchSelect.View option"
      },
      {
        "name": "setId",
        "comment": " Give your search-select an id. Can be useful for DOM selectors (focus, WebComponents etc.)\n",
        "type": "String -> Form.SearchSelect.View option -> Form.SearchSelect.View option"
      },
      {
        "name": "setInitialOption",
        "comment": " Set the initial option of your SearchSelect.Model.\n",
        "type": "Maybe.Maybe option -> Form.SearchSelect.Model option -> Form.SearchSelect.Model option"
      },
      {
        "name": "setIsClearable",
        "comment": " Set whether your search-select is clearable (x icon).\n",
        "type": "Bool -> Form.SearchSelect.View option -> Form.SearchSelect.View option"
      },
      {
        "name": "setIsError",
        "comment": " Set whether your search-select is in error mode (red border).\n",
        "type": "Bool -> Form.SearchSelect.View option -> Form.SearchSelect.View option"
      },
      {
        "name": "setIsLocked",
        "comment": " Set whether your search-select is locked (disabled).\n",
        "type": "Bool -> Form.SearchSelect.View option -> Form.SearchSelect.View option"
      },
      {
        "name": "setIsOptionDisabled",
        "comment": " This function allows you to disable specific options.\n",
        "type": "(option -> Bool) -> Form.SearchSelect.View option -> Form.SearchSelect.View option"
      },
      {
        "name": "setSelectedOption",
        "comment": " Change the option of your SearchSelect.Model.\n",
        "type": "Maybe.Maybe option -> Form.SearchSelect.Model option -> Form.SearchSelect.Model option"
      },
      {
        "name": "setToLabel",
        "comment": " Set how your options are printed to the screen.\n",
        "type": "(option -> String) -> Form.SearchSelect.View option -> Form.SearchSelect.View option"
      },
      {
        "name": "update",
        "comment": " Use in your update function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            UpdateMySearchSelect selectMsg ->\n                let\n                    (newSelect, cmd) =\n                        SearchSelect.update selectMsg mode.mySearchSelect\n                in\n                    { model | mySearchSelect = newSelect } ! [ cmd ]\n",
        "type": "Form.SearchSelect.Internal.Msg option -> Form.SearchSelect.Model option -> ( Form.SearchSelect.Model option , Platform.Cmd.Cmd (Form.SearchSelect.Internal.Msg option) )"
      },
      {
        "name": "view",
        "comment": " Transform an SearchSelect.Model into an SearchSelect.View, which allows us to pipe View Setters on it.\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ SearchSelect.view model.mySearchSelect -- pipe view setters here, for example |> setIsLocked 'your logic here'\n            ]\n",
        "type": "Form.SearchSelect.Model option -> Form.SearchSelect.View option"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Form.Input",
    "comment": " This module is useful if you want to add an Input Form element to your app.\n\n# Initialise and update\n@docs Model, init, Msg, update\n\n# View and render\n@docs view, render\n\n# State Setters\n@docs reInitialise, reset, setInitialValue, setValue\n\n# View Setters\n@docs setPlaceholder, setMaxLength, setIsError, setIsLocked, setId\n\n# Type Setters\n@docs setTextType, setEmailType, setPasswordType, setTelType, setNumberType\n\n# Getters\n@docs getInitialValue, getValue, getIsChanged, getId\n\n",
    "aliases": [
      {
        "name": "Msg",
        "comment": " Add a Input.Msg to your Msg.\n\n    type MyMsg\n        = UpdateMyInput Input.Msg\n",
        "args": [],
        "type": "Form.Input.Internal.Msg"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Add a Input.Model to your model.\n\n    type alias MyModel =\n        { myInput : Input.Model\n        }\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getId",
        "comment": " Useful if you need the id of the input in your update function, so set focus etc.\n",
        "type": "Form.Input.View -> Maybe.Maybe String"
      },
      {
        "name": "getInitialValue",
        "comment": " Get the initial value of your input.\n",
        "type": "Form.Input.Model -> String"
      },
      {
        "name": "getIsChanged",
        "comment": " Whether your input was changed. Useful if you want to disable save buttons unless there were changes etc.\n",
        "type": "Form.Input.Model -> Bool"
      },
      {
        "name": "getValue",
        "comment": " Get the current value of your input. This is what you'd use to display the data somewhere outside of your input,\nor to send the data to the backend for example etc.\n",
        "type": "Form.Input.Model -> String"
      },
      {
        "name": "init",
        "comment": " Add a Input.Model to your model.\n\n    myInitialModel : MyModel\n    myInitialModel =\n        { myInput = Input.init -- optionally pipe into State Setters\n        }\n",
        "type": "Form.Input.Model"
      },
      {
        "name": "reInitialise",
        "comment": " ReInitialise your Input.Model.\n",
        "type": "Form.Input.Model -> Form.Input.Model"
      },
      {
        "name": "render",
        "comment": " Transforms an Input.View into Html Input.Msg\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ Input.view model.myInput\n                |> Input.render\n                |> Html.map UpdateMyInput\n            ]\n",
        "type": "Form.Input.View -> Html.Styled.Html Form.Input.Internal.Msg"
      },
      {
        "name": "reset",
        "comment": " Reset your Input.Model.\n",
        "type": "Form.Input.Model -> Form.Input.Model"
      },
      {
        "name": "setEmailType",
        "comment": " Set the type_ of your input to \"email\"\n",
        "type": "Form.Input.View -> Form.Input.View"
      },
      {
        "name": "setId",
        "comment": " Give your input an id. Can be useful for DOM selectors (focus, WebComponents etc.)\n",
        "type": "String -> Form.Input.View -> Form.Input.View"
      },
      {
        "name": "setInitialValue",
        "comment": " Set the initial value of your Input.Model.\n",
        "type": "String -> Form.Input.Model -> Form.Input.Model"
      },
      {
        "name": "setIsError",
        "comment": " Set whether your input is in error mode (red border).\n",
        "type": "Bool -> Form.Input.View -> Form.Input.View"
      },
      {
        "name": "setIsLocked",
        "comment": " Set whether your input is locked (disabled).\n",
        "type": "Bool -> Form.Input.View -> Form.Input.View"
      },
      {
        "name": "setMaxLength",
        "comment": " Set the max length for your input string.\n",
        "type": "Int -> Form.Input.View -> Form.Input.View"
      },
      {
        "name": "setNumberType",
        "comment": " Set the type_ of your input to \"number\"\n",
        "type": "Form.Input.View -> Form.Input.View"
      },
      {
        "name": "setPasswordType",
        "comment": " Set the type_ of your input to \"password\"\n",
        "type": "Form.Input.View -> Form.Input.View"
      },
      {
        "name": "setPlaceholder",
        "comment": " Set a placeholder for your input.\n",
        "type": "String -> Form.Input.View -> Form.Input.View"
      },
      {
        "name": "setTelType",
        "comment": " Set the type_ of your input to \"tel\"\n",
        "type": "Form.Input.View -> Form.Input.View"
      },
      {
        "name": "setTextType",
        "comment": " Set the type_ of your input to \"text\"\n",
        "type": "Form.Input.View -> Form.Input.View"
      },
      {
        "name": "setValue",
        "comment": " Change the value of your Input.Model.\n",
        "type": "String -> Form.Input.Model -> Form.Input.Model"
      },
      {
        "name": "update",
        "comment": " Use in your update function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            UpdateMyInput inputMsg ->\n                { model | myInput = Input.update inputMsg mode.myInput } ! []\n",
        "type": "Form.Input.Internal.Msg -> Form.Input.Model -> Form.Input.Model"
      },
      {
        "name": "view",
        "comment": " Transform an Input.Model into an Input.View, which allows us to pipe View Setters on it.\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ Input.view model.myInput -- pipe view setters here, for example |> setIsLocked 'your logic here'\n            ]\n",
        "type": "Form.Input.Model -> Form.Input.View"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Modal",
    "comment": " Module to create Modals with Headers, ModalBlocks and Footers\n\n# Init\n@docs view, viewIf, setSize\n\n# Create blocks\n@docs header, body, footer, block, blockSizes\n\n# Render\n@docs render\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "block",
        "comment": " Add a block\n",
        "type": "Grid.Size.Cols -> List (Html.Styled.Html msg) -> Modal.ModalBlock msg"
      },
      {
        "name": "blockSizes",
        "comment": " Add a block of varying sizes\n",
        "type": "Grid.Size.Cols -> List ( Grid.Size.Size, Grid.Size.Cols ) -> List (Html.Styled.Html msg) -> Modal.ModalBlock msg"
      },
      {
        "name": "body",
        "comment": " Add a body block\n",
        "type": "List (Modal.ModalBlock msg) -> Modal.Config msg -> Modal.Config msg"
      },
      {
        "name": "footer",
        "comment": " Add a footer block\n",
        "type": "List (Button.Button msg) -> Modal.Config msg -> Modal.Config msg"
      },
      {
        "name": "header",
        "comment": " Add a header block\n",
        "type": "String -> List (Button.Button msg) -> Modal.Config msg -> Modal.Config msg"
      },
      {
        "name": "render",
        "comment": " Render\n",
        "type": "Modal.Config msg -> Html.Styled.Html msg"
      },
      {
        "name": "setSize",
        "comment": " Set the modal size\n",
        "type": "Grid.Size.Size -> Modal.Config msg -> Modal.Config msg"
      },
      {
        "name": "view",
        "comment": " Init a modal\n",
        "type": "msg -> Modal.Config msg"
      },
      {
        "name": "viewIf",
        "comment": " Init a modal conditionally\n",
        "type": "Bool -> msg -> Modal.Config msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Card",
    "comment": " Module to create Cards with Headers, CardBlocks and Footers\n\n# Init\n@docs view, viewIf\n\n# Create blocks\n@docs header, body, footer, CardBlock, block, blockIf, maybeBlock, blockSizes\n\n# Render\n@docs render\n",
    "aliases": [],
    "types": [
      {
        "name": "CardBlock",
        "comment": " Type hint a function that returns a card block\n",
        "args": [
          "msg"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "block",
        "comment": " Add a block\n",
        "type": "Grid.Size.Cols -> List (Html.Styled.Html msg) -> Card.CardBlock msg"
      },
      {
        "name": "blockIf",
        "comment": " Add a block conditionally\n",
        "type": "Grid.Size.Cols -> Bool -> List (Html.Styled.Html msg) -> Card.CardBlock msg"
      },
      {
        "name": "blockSizes",
        "comment": " Add a block of varying sizes\n",
        "type": "Grid.Size.Cols -> List ( Grid.Size.Size, Grid.Size.Cols ) -> List (Html.Styled.Html msg) -> Card.CardBlock msg"
      },
      {
        "name": "body",
        "comment": " Add a body block\n",
        "type": "List (Card.CardBlock msg) -> Card.Config msg -> Card.Config msg"
      },
      {
        "name": "footer",
        "comment": " Add a footer block\n",
        "type": "List (Button.Button msg) -> Card.Config msg -> Card.Config msg"
      },
      {
        "name": "header",
        "comment": " Add a header block\n",
        "type": "String -> List (Button.Button msg) -> Card.Config msg -> Card.Config msg"
      },
      {
        "name": "maybeBlock",
        "comment": " Add a block and apply Just\n",
        "type": "Grid.Size.Cols -> Maybe.Maybe a -> (a -> List (Html.Styled.Html msg)) -> Card.CardBlock msg"
      },
      {
        "name": "render",
        "comment": " Render\n",
        "type": "Card.Config msg -> Html.Styled.Html msg"
      },
      {
        "name": "view",
        "comment": " Init a card\n",
        "type": "Card.Config msg"
      },
      {
        "name": "viewIf",
        "comment": " Init a card conditionally\n",
        "type": "Bool -> Card.Config msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Form.DropZone",
    "comment": " Module to add a file DropZone to your app\n\n# Initialise and update\n@docs Model, init, Msg, update\n\n# View and render\n@docs view, render\n\n# State Setters\n@docs reInitialise, reset, setInitialValue, setValue\n\n# View Setters\n@docs setIsError, setIsLocked, setLabel\n\n# Getters\n@docs getIsChanged, getFiles, Files, OkFile, ErrFile\n\n",
    "aliases": [
      {
        "name": "ErrFile",
        "comment": " File that didn't import successfully\n",
        "args": [],
        "type": "{ lastModified : Time.Time , name : String , size : Int , mimeType : String , error : FileReader.Error }"
      },
      {
        "name": "Files",
        "comment": " List of files that imported properly and list of files that didn't\n",
        "args": [],
        "type": "{ ok : List Form.DropZone.OkFile, err : List Form.DropZone.ErrFile }"
      },
      {
        "name": "OkFile",
        "comment": " File that imported successfully\n",
        "args": [],
        "type": "{ lastModified : Time.Time , name : String , size : Int , mimeType : String , base64 : String }"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Add a DropZone.Model to your model.\n\n    type alias MyModel =\n        { myDropZone : DropZone.Model\n        }\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Msg",
        "comment": " Add a DropZone.Msg to your Msg.\n\n    type MyMsg\n        = UpdateMyDropZone DropZone.Msg\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getFiles",
        "comment": " Get the current value of your DropZone. This is what you'd use to display the data somewhere outside of your DropZone,\nor to send the files to the backend for example etc.\n",
        "type": "Form.DropZone.Model -> Form.DropZone.Files"
      },
      {
        "name": "getIsChanged",
        "comment": " Whether your DropZone was changed. Useful if you want to disable save buttons unless there were changes etc.\n",
        "type": "Form.DropZone.Model -> Bool"
      },
      {
        "name": "init",
        "comment": " Add a DropZone.Model to your model.\n\n    myInitialModel : MyModel\n    myInitialModel =\n        { myDropZone = DropZone.init -- optionally pipe into State Setters\n        }\n",
        "type": "Form.DropZone.Model"
      },
      {
        "name": "reInitialise",
        "comment": " ReInitialise your DropZone.Model.\n",
        "type": "Form.DropZone.Model -> Form.DropZone.Model"
      },
      {
        "name": "render",
        "comment": " Transforms an DropZone.View into Html DropZone.Msg\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ DropZone.view model.myDropZone\n                |> DropZone.render\n                |> Html.map UpdateMyDropZone\n            ]\n",
        "type": "Form.DropZone.View -> Html.Styled.Html Form.DropZone.Msg"
      },
      {
        "name": "reset",
        "comment": " Reset your DropZone.Model.\n",
        "type": "Form.DropZone.Model -> Form.DropZone.Model"
      },
      {
        "name": "setInitialValue",
        "comment": " Set the initial files of your DropZone.Model.\n",
        "type": "List FileReader.File -> Form.DropZone.Model -> Form.DropZone.Model"
      },
      {
        "name": "setIsError",
        "comment": " Set whether your input is in error mode (red border).\n",
        "type": "Bool -> Form.DropZone.View -> Form.DropZone.View"
      },
      {
        "name": "setIsLocked",
        "comment": " Set whether your input is locked (disabled).\n",
        "type": "Bool -> Form.DropZone.View -> Form.DropZone.View"
      },
      {
        "name": "setLabel",
        "comment": " Set the label for your DropZone.\n",
        "type": "String -> Form.DropZone.View -> Form.DropZone.View"
      },
      {
        "name": "setValue",
        "comment": " Change the files of your DropZone.Model.\n",
        "type": "List FileReader.File -> Form.DropZone.Model -> Form.DropZone.Model"
      },
      {
        "name": "update",
        "comment": " Use in your update function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            UpdateMyDropZone dropZoneMsg ->\n                { model | myDropZone = DropZone.update dropZoneMsg model.myDropZone } ! []\n",
        "type": "Form.DropZone.Msg -> Form.DropZone.Model -> Form.DropZone.Model"
      },
      {
        "name": "view",
        "comment": " Transform an DropZone.Model into an DropZone.View, which allows us to pipe View Setters on it.\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ DropZone.view model.myDropZone -- pipe view setters here, for example |> setIsLocked 'your logic here'\n            ]\n",
        "type": "Form.DropZone.Model -> Form.DropZone.View"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Form.TextArea",
    "comment": " This module is useful if you want to add an TextArea Form element to your app.\n\n# Initialise and update\n@docs Model, init, Msg, update\n\n# View and render\n@docs view, render\n\n# State Setters\n@docs reInitialise, reset, setInitialValue, setValue, setSubstituteTabs, setReplacements\n\n# View Setters\n@docs setPlaceholder, setMaxLength, setIsError, setIsLocked, setId\n\n# Getters\n@docs getInitialValue, getValue, getIsChanged, getId\n\n",
    "aliases": [
      {
        "name": "Msg",
        "comment": " Add a TextArea.Msg to your Msg.\n\n    type MyMsg\n        = UpdateMyTextArea TextArea.Msg\n",
        "args": [],
        "type": "Form.TextArea.Internal.Msg"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Add a TextArea.Model to your model.\n\n    type alias MyModel =\n        { myTextArea : TextArea.Model\n        }\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getId",
        "comment": " Useful if you need the id of the input in your update function, so set focus etc.\n",
        "type": "Form.TextArea.View -> Maybe.Maybe String"
      },
      {
        "name": "getInitialValue",
        "comment": " Get the initial value of your input.\n",
        "type": "Form.TextArea.Model -> String"
      },
      {
        "name": "getIsChanged",
        "comment": " Whether your input was changed. Useful if you want to disable save buttons unless there were changes etc.\n",
        "type": "Form.TextArea.Model -> Bool"
      },
      {
        "name": "getValue",
        "comment": " Get the current value of your input. This is what you'd use to display the data somewhere outside of your input,\nor to send the data to the backend for example etc.\n",
        "type": "Form.TextArea.Model -> String"
      },
      {
        "name": "init",
        "comment": " Add a TextArea.Model to your model.\n\n    myInitialModel : MyModel\n    myInitialModel =\n        { myTextArea = TextArea.init -- optionally pipe into State Setters\n        }\n",
        "type": "Form.TextArea.Model"
      },
      {
        "name": "reInitialise",
        "comment": " ReInitialise your TextArea.Model.\n",
        "type": "Form.TextArea.Model -> Form.TextArea.Model"
      },
      {
        "name": "render",
        "comment": " Transforms an TextArea.View into Html TextArea.Msg\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ TextArea.view model.myTextArea\n                |> TextArea.render\n                |> Html.map UpdateMyTextArea\n            ]\n",
        "type": "Form.TextArea.View -> Html.Styled.Html Form.TextArea.Internal.Msg"
      },
      {
        "name": "reset",
        "comment": " Reset your TextArea.Model.\n",
        "type": "Form.TextArea.Model -> Form.TextArea.Model"
      },
      {
        "name": "setId",
        "comment": " Give your input an id. Can be useful for DOM selectors (focus, WebComponents etc.)\n",
        "type": "String -> Form.TextArea.View -> Form.TextArea.View"
      },
      {
        "name": "setInitialValue",
        "comment": " Set the initial value of your TextArea.Model.\n",
        "type": "String -> Form.TextArea.Model -> Form.TextArea.Model"
      },
      {
        "name": "setIsError",
        "comment": " Set whether your input is in error mode (red border).\n",
        "type": "Bool -> Form.TextArea.View -> Form.TextArea.View"
      },
      {
        "name": "setIsLocked",
        "comment": " Set whether your input is locked (disabled).\n",
        "type": "Bool -> Form.TextArea.View -> Form.TextArea.View"
      },
      {
        "name": "setMaxLength",
        "comment": " Set the max length for your input string.\n",
        "type": "Int -> Form.TextArea.View -> Form.TextArea.View"
      },
      {
        "name": "setPlaceholder",
        "comment": " Set a placeholder for your input.\n",
        "type": "String -> Form.TextArea.View -> Form.TextArea.View"
      },
      {
        "name": "setReplacements",
        "comment": " Set a ist of string that should be replaced.\n",
        "type": "List ( String, String ) -> Form.TextArea.Model -> Form.TextArea.Model"
      },
      {
        "name": "setSubstituteTabs",
        "comment": " Set whether the `tab` should insert spaces instead of tabbing out of the field.\n",
        "type": "Bool -> Form.TextArea.Model -> Form.TextArea.Model"
      },
      {
        "name": "setValue",
        "comment": " Change the value of your TextArea.Model.\n",
        "type": "String -> Form.TextArea.Model -> Form.TextArea.Model"
      },
      {
        "name": "update",
        "comment": " Use in your update function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            UpdateMyTextArea inputMsg ->\n                { model | myTextArea = TextArea.update inputMsg mode.myTextArea } ! []\n",
        "type": "Form.TextArea.Internal.Msg -> Form.TextArea.Model -> Form.TextArea.Model"
      },
      {
        "name": "view",
        "comment": " Transform an TextArea.Model into an TextArea.View, which allows us to pipe View Setters on it.\n\n    myView : Model -> Html Msg\n    myView model =\n        div\n            []\n            [ TextArea.view model.myTextArea -- pipe view setters here, for example |> setIsLocked 'your logic here'\n            ]\n",
        "type": "Form.TextArea.Model -> Form.TextArea.View"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Button",
    "comment": " Module to add Buttons to your app\n\n# Type hint\n@docs Button\n\n# Initialise\n@docs view, viewIf\n\n# Configure\n@docs text, icon, onClick, href, small, isLoading, isDisabled, green, red\n\n# Render\n@docs render\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Button",
        "comment": " Type hint buttons\n\n    type alias model =\n        { headerTitle : String\n        , headerButtons : List (Button Msg)\n        }\n",
        "args": [
          "msg"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "green",
        "comment": " Style it green\n",
        "type": "Button.Button msg -> Button.Button msg"
      },
      {
        "name": "href",
        "comment": " Open a href url when clicked\n",
        "type": "String -> Button.Button msg -> Button.Button msg"
      },
      {
        "name": "icon",
        "comment": " Set an icon\n",
        "type": "Icon.Icon -> Button.Button msg -> Button.Button msg"
      },
      {
        "name": "isDisabled",
        "comment": " Display as disabled, removing the click Msg\n",
        "type": "Bool -> Button.Button msg -> Button.Button msg"
      },
      {
        "name": "isLoading",
        "comment": " Display as loading, removing the click Msg\n",
        "type": "Bool -> Button.Button msg -> Button.Button msg"
      },
      {
        "name": "onClick",
        "comment": " Fire a Msg when clicked\n",
        "type": "msg -> Button.Button msg -> Button.Button msg"
      },
      {
        "name": "red",
        "comment": " Style it red\n",
        "type": "Button.Button msg -> Button.Button msg"
      },
      {
        "name": "render",
        "comment": " Render the button\n",
        "type": "Button.Button msg -> Html.Styled.Html msg"
      },
      {
        "name": "small",
        "comment": " Make the button small\n",
        "type": "Button.Button msg -> Button.Button msg"
      },
      {
        "name": "text",
        "comment": " Set the text\n",
        "type": "String -> Button.Button msg -> Button.Button msg"
      },
      {
        "name": "view",
        "comment": " Init a button\n",
        "type": "Button.Button msg"
      },
      {
        "name": "viewIf",
        "comment": " Init a button if True\n",
        "type": "Bool -> Button.Button msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Toasters",
    "comment": " Module to add Toasters to your app\n\n# Initialise and update\n@docs Model, init, Msg, update, merge\n\n# Subscription\n@docs subscription\n\n# Add toasters\n@docs addGreen, addRed\n\n# Add to your view\n@docs view\n\n",
    "aliases": [
      {
        "name": "Msg",
        "comment": " Add a Toasters.Msg to your Msg.\n\n    type MyMsg\n        = ToastersMsg Toasters.Msg\n",
        "args": [],
        "type": "Toasters.Internal.Msg"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Add a Toasters.Model to your model.\n\n    type alias MyModel =\n        { toasters : Toasters.Model\n        }\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "addGreen",
        "comment": " Add to your subscription function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            SavedSuccessfully ->\n                { model\n                    | isSaving = False\n                    , toasters = Toasters.addGreen \"Data saved Successfully :)\" model.toasters\n                } ! []\n",
        "type": "String -> Toasters.Model -> Toasters.Model"
      },
      {
        "name": "addRed",
        "comment": " Add to your subscription function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            SavingFailed ->\n                { model\n                    | isSaving = False\n                    , toasters = Toasters.addRed \"Data could not be saved :(\" model.toasters\n                } ! []\n",
        "type": "String -> Toasters.Model -> Toasters.Model"
      },
      {
        "name": "init",
        "comment": " Add a Toasters.Model to your model.\n\n    myInitialModel : MyModel\n    myInitialModel =\n        { toasters = Toasters.init\n        }\n",
        "type": "Toasters.Model"
      },
      {
        "name": "merge",
        "comment": " Merge multiple toaster models into one.\nUseful when Return types that carry their own Toasters.Model want to merge back into the application Toasters.Model\n\n    { appModel | toasters = Toasters.merge return.toasters appModel.toasters }\n\n",
        "type": "Toasters.Model -> Toasters.Model -> Toasters.Model"
      },
      {
        "name": "subscription",
        "comment": " Add to your subscription function.\n\n    subscriptions : Model -> Sub Msg\n    subscriptions model =\n        Sub.batch\n            [ Toasters.subscription model.toasters |> Sub.map Msg.ToastersMsg\n            ]\n",
        "type": "Toasters.Model -> Platform.Sub.Sub Toasters.Msg"
      },
      {
        "name": "update",
        "comment": " Use in your update function.\n\n    myUpdate : Msg -> Model -> (Model, Cmd Msg)\n    myUpdate msg model =\n        case msg of\n            ToastersMsg toastersMsg ->\n                { model | toasters = Toasters.update toastersMsg model.toasters } ! []\n",
        "type": "Toasters.Msg -> Toasters.Model -> Toasters.Model"
      },
      {
        "name": "view",
        "comment": " Add to your view function.\n\n    div\n        []\n        [ Toasters.view model.toasters\n            |> Html.map ToastersMsg\n        , div\n            []\n            [ text \"My Cool App\" ]\n        ]\n",
        "type": "Toasters.Model -> Html.Styled.Html Toasters.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Grid",
    "comment": " Module to create Grids with Rows and Cols\n\n# Add Elements\n@docs container, row, col, colSizes\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "col",
        "comment": " Add a col\n",
        "type": "Grid.Size.Cols -> List (Html.Styled.Html msg) -> Grid.Col msg"
      },
      {
        "name": "colSizes",
        "comment": " Add a col, specifying different col sizes based on window size\n",
        "type": "Grid.Size.Cols -> List ( Grid.Size.Size, Grid.Size.Cols ) -> List (Html.Styled.Html msg) -> Grid.Col msg"
      },
      {
        "name": "container",
        "comment": " Create a container\n",
        "type": "List (Html.Styled.Attribute msg) -> List (Html.Styled.Html msg) -> Html.Styled.Html msg"
      },
      {
        "name": "row",
        "comment": " Add a row\n",
        "type": "List (Grid.Col msg) -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Toggle",
    "comment": " Module to add Toggles to your app\n\n# Views\n@docs view\n\n# Configure\n@docs isError, isDisabled, label\n\n# Render\n@docs render\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "isDisabled",
        "comment": " Display as disabled, removing the click Msg\n",
        "type": "Bool -> Toggle.Toggle msg -> Toggle.Toggle msg"
      },
      {
        "name": "isError",
        "comment": " Display as loading, removing the click Msg\n",
        "type": "Bool -> Toggle.Toggle msg -> Toggle.Toggle msg"
      },
      {
        "name": "label",
        "comment": " Set the text\n",
        "type": "String -> Toggle.Toggle msg -> Toggle.Toggle msg"
      },
      {
        "name": "render",
        "comment": " Render the toggle\n",
        "type": "Toggle.Toggle msg -> Html.Styled.Html msg"
      },
      {
        "name": "view",
        "comment": " Init a toggle\n",
        "type": "Bool -> msg -> Toggle.Toggle msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Form.Label",
    "comment": " Module to add Labels to your app\n\n# Initialise\n@docs view\n\n# Configure\n@docs mandatory\n\n# Render\n@docs render\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "mandatory",
        "comment": " Set whether or not a label is mandatory\n",
        "type": "Bool -> Form.Label.Label -> Form.Label.Label"
      },
      {
        "name": "render",
        "comment": " Render the label\n",
        "type": "Form.Label.Label -> Html.Styled.Html msg"
      },
      {
        "name": "view",
        "comment": " Init a Label\n",
        "type": "String -> Form.Label.Label"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Html.Styled.Bdt",
    "comment": " Helpers on top of Html.Styled to show/hide things\n\n# Show Hide Elements\n@docs (?), maybeAttribute, viewIf, divIf, maybeView\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "?",
        "comment": " Optionally add an attribute.\n\n    button\n        [ onClick MyMessage ? model.isButtonEnabled ]\n        [ text \"Clickety Click\" ]\n",
        "type": "Html.Styled.Attribute msg -> Bool -> Html.Styled.Attribute msg"
      },
      {
        "name": "divIf",
        "comment": " Only display if True.\n\n    divIf model.isShown\n        [ id \"potato\" ]\n        [ text \"Hello\" ]\n",
        "type": "Bool -> List (Html.Styled.Attribute msg) -> List (Html.Styled.Html msg) -> Html.Styled.Html msg"
      },
      {
        "name": "maybeAttribute",
        "comment": " Maybe add an attribute.\n\n    button\n        [ maybeAttribute onClick model.myMaybeMsg ]\n        [ text \"Clickety Click\" ]\n",
        "type": "(a -> Html.Styled.Attribute msg) -> Maybe.Maybe a -> Html.Styled.Attribute msg"
      },
      {
        "name": "maybeView",
        "comment": " Maybe display a view.\n\n    maybeView view model.myMaybe\n",
        "type": "Maybe.Maybe a -> (a -> Html.Styled.Html msg) -> Html.Styled.Html msg"
      },
      {
        "name": "viewIf",
        "comment": " Only display if True.\n\n    viewIf model.isShown myViewFunction\n",
        "type": "Bool -> Html.Styled.Html msg -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Css.Bdt",
    "comment": " Helpers on top of Html.Styled to show/hide things\n\n# Show Hide Elements\n@docs (?)\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "?",
        "comment": " Optionally add a Style.\n\n    css\n        [ cursor pointer ? canToggle\n        ]\n",
        "type": "Css.Style -> Bool -> Css.Style"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Tuple.Bdt",
    "comment": " Silly module to write tuples with the ~ (noodle) operator\n\n# Create Tuple\n@docs (~)\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "~",
        "comment": " Create a Tuple.\n\n    \"Hello\" ~ \"Sir\" == (\"Hello\", \"Sir\")\n",
        "type": "a -> b -> ( a, b )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "List.Bdt",
    "comment": " List Helpers\n\n# Sorting\n@docs sortByDate\n\n# Grouping\n@docs groupWhile\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "groupWhile",
        "comment": " Group while a condition holds true\n\n    [ { name = \"One\", date = Time.second * 1 |> Date.fromTime }\n    , { name = \"Two\", date = Time.second * 2 |> Date.fromTime }\n    , { name = \"Three\", date = Time.second * 1 |> Date.fromTime }\n    ]\n        |> List.sortWith (\\rec1 rec2 -> Date.order rec1.date rec2.date)\n        |> List.groupWhile (\\rec1 rec2 -> rec1.date == rec2.date)\n\n    Will result in:\n\n    [ Nonempty { name = \"One\", date = Time.second * 1 |> Date.fromTime } [ { name = \"Three\", date = Time.second * 1 |> Date.fromTime } ]\n    , Nonempty { name = \"Two\", date = Time.second * 2 |> Date.fromTime } []\n    ]\n\n    If we didn't sort, we would be getting, :\n\n    [ Nonempty { name = \"One\", number = 1 } []\n    , Nonempty { name = \"Two\", number = 2 } []\n    , Nonempty { name = \"Three\", number = 1 } []\n    ]\n\n",
        "type": "(a -> a -> Bool) -> List a -> List (List.Nonempty.Nonempty a)"
      },
      {
        "name": "sortByDate",
        "comment": " Sort a list by date\n",
        "type": "(a -> Date.Date) -> List a -> List a"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Icon",
    "comment": " Module for Icons, using SVG (not relying on external css or fonts)\n\n# Definition\n@docs Icon\n\n# Render icons\n@docs Icon, render\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Icon",
        "comment": " Available Icons\n",
        "args": [],
        "cases": [
          [
            "ExpandMore",
            []
          ],
          [
            "Clear",
            []
          ],
          [
            "CheckBoxChecked",
            []
          ],
          [
            "CheckBoxUnchecked",
            []
          ],
          [
            "Calendar",
            []
          ],
          [
            "ChevronLeft",
            []
          ],
          [
            "ChevronRight",
            []
          ],
          [
            "Spinner",
            []
          ],
          [
            "Edit",
            []
          ],
          [
            "Download",
            []
          ],
          [
            "Delete",
            []
          ],
          [
            "FastForward",
            []
          ],
          [
            "FastRewind",
            []
          ],
          [
            "SkipPrevious",
            []
          ],
          [
            "SkipNext",
            []
          ],
          [
            "Lock",
            []
          ],
          [
            "LockOpen",
            []
          ],
          [
            "Add",
            []
          ],
          [
            "Warning",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "render",
        "comment": " Render an icon\n\n    Icon.render Icon.Calendar Int Color.black\n",
        "type": "Icon.Icon -> Int -> Color.Color -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "StringFormatting",
    "comment": " String Formatting Helpers\n\n# String Formatting Helpers\n@docs mobileNumber\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "mobileNumber",
        "comment": " Returns a string as `xxxx xxx xxx`\n",
        "type": "String -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "List.Nonempty.Bdt",
    "comment": " Nonempty Helpers\n\n# Decode a Nonempty\n@docs decoder\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decoder",
        "comment": " Nonempty decoder\n\n    type alias Student =\n        { firstName : String\n        , courses : Nonempty Course\n        }\n\n\n    decoder : Decoder Student\n    decoder =\n        Decode.decode Student\n            |> Decode.required \"firstName\" Decode.string\n            |> Decode.required \"courses\" (Nonempty.decoder courseDecoder)\n\n",
        "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List.Nonempty.Nonempty a)"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Resettable",
    "comment": " This module is useful if you want to track changes to a value.\n\n# Definition\n@docs Resettable\n\n# Initialise and update\n@docs init, update, reset\n\n# Getters\n@docs getInitialValue, getValue, getIsChanged\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Resettable",
        "comment": " Represent values that may be initial or updated. It can be useful if you have a\na save button that should be disabled if nothing on a form changed.\n\n    type alias MyProfileForm =\n        { firstName : Resettable String\n        , email : Resettable String\n        }\n\n    form =\n        { firstName = Resettable.init \"John Doe\"\n        , email = Resettable.init \"\"\n        }\n\n    shouldEnableSaveButton : Form -> Bool\n    shouldEnableSaveButton form =\n        Resettable.getIsChanged form.email || Resettable.getIsChanged form.password\n",
        "args": [
          "a"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getInitialValue",
        "comment": " Get the initial value.\n\n    getInitialValue (Initial \"Josh\")         -- \"Josh\"\n    getInitialValue (Updated \"Josh\" \"Joshua\") -- \"Josh\"\n",
        "type": "Resettable.Resettable a -> a"
      },
      {
        "name": "getIsChanged",
        "comment": " Whether a value changed.\n\n    getIsChanged (Initial \"Josh\")         -- False\n    getIsChanged (Updated \"Josh\" \"Joshua\") -- True\n\n    when checking a lot of values, it may be helpful to put them in a list:\n\n    -- if they all have the same type:\n    List.any getIsChanged [ Initial \"Josh\", Updated \"Josh\" \"Joshua\" ]   -- True\n\n    -- if they have different types\n    List.any ((==) True) [ getIsChanged (Initial \"Josh\"), getIsChanged (Initial 12) ]   -- False\n",
        "type": "Resettable.Resettable a -> Bool"
      },
      {
        "name": "getValue",
        "comment": " Get the current value.\n\n    getValue (Initial \"Josh\")         -- \"Josh\"\n    getValue (Updated \"Josh\" \"Joshua\") -- \"Joshua\"\n",
        "type": "Resettable.Resettable a -> a"
      },
      {
        "name": "init",
        "comment": " Initialise a value.\n\n    init \"Bob\"     -- Initial \"Bob\"\n",
        "type": "a -> Resettable.Resettable a"
      },
      {
        "name": "reset",
        "comment": " Reset to the initial value.\n\n    reset (Initial \"Josh\")         -- Initial \"Josh\"\n    reset (Updated \"Josh\" \"Joshua\") -- Initial \"Josh\"\n",
        "type": "Resettable.Resettable a -> Resettable.Resettable a"
      },
      {
        "name": "update",
        "comment": " Updates a Resettable value.\n\n    -- update to new value\n    update \"Joshua\" (Initial \"Josh\")       -- Updated \"Josh\" \"Joshua\"\n    update \"Bob\" (Updated \"Josh\" \"Joshua\")  -- Updated \"Josh\" \"Bob\"\n\n    -- if the new value is the initial value or a changed value is set to it's initial value, keep the initial value\n    update \"Josh\" (Initial \"Josh\")         -- Initial \"Bob\"\n    update \"Josh\" (Updated \"Josh\" \"Joshua\") -- Initial \"Josh\"\n",
        "type": "a -> Resettable.Resettable a -> Resettable.Resettable a"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "InfixPrecedence",
    "comment": " This module is useful to allow multiple modules to declare their own (?) infix function.\n\nIt's sole purpose is to set `infix 0 ?`.\n\nSo if you have multiple (?) functions, simply import this module from each of them\n(as the same infix precedence can't be set more than once).\n\n# Definition\n@docs InfixPrecedence\n\n",
    "aliases": [],
    "types": [
      {
        "name": "InfixPrecedence",
        "comment": " This type is ony here to satisfy elm packages. Can't be created or used.\n\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Basics.Bdt",
    "comment": " Basics Helpers\n\n# Lifting\n@docs lift2\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "lift2",
        "comment": " Lift things\n\n    List.sortWith (lift2 .date Date.order) list\n\n",
        "type": "(a -> b) -> (b -> b -> c) -> a -> a -> c"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "EverySet.Bdt",
    "comment": " EverySet Helpers\n\n# Toggle\n@docs toggle\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "toggle",
        "comment": " Toggle an item in a set. Item is added if not existing, or removed if existing.\n",
        "type": "a -> EverySet.EverySet a -> EverySet.EverySet a"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Dom.Scroll.Bdt",
    "comment": " Dom Scroll Helpers\n\n# String Formatting Helpers\n@docs HorizontalScroll, onHorizontalScroll, VerticalScroll, onVerticalScroll\n\n",
    "aliases": [
      {
        "name": "HorizontalScroll",
        "comment": " This record is emitted by onHorizontalScroll\n",
        "args": [],
        "type": "{ scrollWidth : Int, scrollLeft : Int, clientWidth : Int }"
      },
      {
        "name": "VerticalScroll",
        "comment": " This record is emitted by onHorizontalScroll\n",
        "args": [],
        "type": "{ scrollHeight : Int, scrollTop : Int, clientHeight : Int }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "onHorizontalScroll",
        "comment": " Attach this event listener on DOM elements to be notified if it get's scrolled\n",
        "type": "(Dom.Scroll.Bdt.HorizontalScroll -> msg) -> Html.Attribute msg"
      },
      {
        "name": "onVerticalScroll",
        "comment": " Attach this event listener on DOM elements to be notified if it get's scrolled\n",
        "type": "(Dom.Scroll.Bdt.VerticalScroll -> msg) -> Html.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Grid.Size",
    "comment": " Provide the Size to Grids and CardBlocks\n\n# Size\n@docs Size, Cols\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Cols",
        "comment": " Cols\n",
        "args": [],
        "cases": [
          [
            "One",
            []
          ],
          [
            "Two",
            []
          ],
          [
            "Three",
            []
          ],
          [
            "Four",
            []
          ],
          [
            "Five",
            []
          ],
          [
            "Six",
            []
          ],
          [
            "Seven",
            []
          ],
          [
            "Eight",
            []
          ],
          [
            "Nine",
            []
          ],
          [
            "Ten",
            []
          ],
          [
            "Eleven",
            []
          ],
          [
            "Twelve",
            []
          ]
        ]
      },
      {
        "name": "Size",
        "comment": " Size\n",
        "args": [],
        "cases": [
          [
            "Xs",
            []
          ],
          [
            "Sm",
            []
          ],
          [
            "Md",
            []
          ],
          [
            "Lg",
            []
          ],
          [
            "Xl",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Date.Bdt",
    "comment": " Date Helpers\n\n# Print Dates\n@docs toString, maybeDateToString, maybeDateToTimeString, maybeDateToDateTimeString, monthToString\n\n# Sort Dates\n@docs order\n\n# Encode Dates\n@docs encode, encodeMaybe\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "encode",
        "comment": " Encode a Date\n",
        "type": "Date.Date -> Json.Encode.Value"
      },
      {
        "name": "encodeMaybe",
        "comment": " Encode a Maybe Date\n",
        "type": "Maybe.Maybe Date.Date -> Json.Encode.Value"
      },
      {
        "name": "maybeDateToDateTimeString",
        "comment": " Returns a string as `ss:mm:hh dd/mm/yyyy`, defaulted to `00:00:00 ––/––/––––`\n",
        "type": "Maybe.Maybe Date.Date -> String"
      },
      {
        "name": "maybeDateToString",
        "comment": " Returns a string as `dd/mm/yyyy`, defaulted to `––/––/––––`\n",
        "type": "Maybe.Maybe Date.Date -> String"
      },
      {
        "name": "maybeDateToTimeString",
        "comment": " Returns a string as `ss:mm:hh`, defaulted to `00:00:00`\n",
        "type": "Maybe.Maybe Date.Date -> String"
      },
      {
        "name": "monthToString",
        "comment": " Returns a padded Int representation of the month\n\n    Jan -> \"01\"\n    Feb -> \"02\"\n    Mar -> \"03\"\n    Apr -> \"04\"\n    May -> \"05\"\n    Jun -> \"06\"\n    Jul -> \"07\"\n    Aug -> \"08\"\n    Sep -> \"09\"\n    Oct -> \"10\"\n    Nov -> \"11\"\n    Dec -> \"12\"\n",
        "type": "Date.Month -> String"
      },
      {
        "name": "order",
        "comment": " Orders 2 dates. This comes in handy with List.sortWith:\n\n    List.sortWith Date.order [date1, date2, date3]\n",
        "type": "Date.Date -> Date.Date -> Basics.Order"
      },
      {
        "name": "toString",
        "comment": " Returns a string as dd/mm/yyyy\n",
        "type": "Date.Date -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]