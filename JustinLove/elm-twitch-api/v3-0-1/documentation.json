[{"name":"Twitch.ClipsV2.Decode","comment":" Decoders for the Clips API at `clips.twitch.tv/api/v2/clips/` Note that this is an unofficial API, requests should be made with Http.send rather than Twitch.Helix.send.\n\n@docs Clip, clip, sampleClip\n","unions":[],"aliases":[{"name":"Clip","comment":" Record for decoded clip data.\n","args":[],"type":"{ broadcasterChannelUrl : String.String, broadcasterDisplayName : String.String, broadcasterId : String.String, broadcasterLogin : String.String, broadcasterLogo : String.String, broadcastId : String.String, curatorChannelUrl : String.String, curatorDisplayName : String.String, curatorId : String.String, curatorLogin : String.String, curatorLogo : String.String, previewImage : String.String, thumbnails : Dict.Dict String.String String.String, communities : List.List String.String, createdAt : Time.Posix, title : String.String, language : String.String, infoUrl : String.String, statusUrl : String.String, editUrl : String.String, vodId : Maybe.Maybe String.String, vodUrl : Maybe.Maybe String.String, vodOffset : Maybe.Maybe Basics.Int, vodPreviewImageUrl : Maybe.Maybe String.String, embedUrl : String.String, embedHtml : String.String, viewUrl : String.String, id : String.String, slug : String.String, duration : Basics.Float, views : Basics.Int }"}],"values":[{"name":"clip","comment":" Decoder for a single clip\n","type":"Json.Decode.Decoder Twitch.ClipsV2.Decode.Clip"},{"name":"sampleClip","comment":" Sample data\n","type":"String.String"}],"binops":[]},{"name":"Twitch.Helix","comment":" Helpers for sending Http requests to the Twitch Helix (\"new Twitch API\") endpoints.\n\n# Send a Request\n@docs send\n\n# Header Helpers\nUseful if you need to make your own Http call with additional headers.\n@docs twitchHeaders, authHeaders\n\n","unions":[],"aliases":[],"values":[{"name":"authHeaders","comment":" Creates the oauth header, given an oauth token.\n","type":"Maybe.Maybe String.String -> List.List Http.Header"},{"name":"send","comment":" Send a basic request to the Twitch Helix (\"new Twitch API\") endpoints. Lightweight wrapper around Http, so you can go back to basics if something else is needed. Auth is a token received from an oauth loop.\n\n    fetchUserByNameUrl : String -> String\n    fetchUserByNameUrl login =\n      \"https://api.twitch.tv/helix/users?login=\" ++ login\n\n    fetchUserByName : String -> Cmd Msg\n    fetchUserByName login =\n      Twitch.Helix.send <|\n        { clientId = TwitchId.clientId\n        , auth = Nothing\n        , decoder = Twitch.Helix.Decode.users\n        , tagger = User\n        , url = (fetchUserByNameUrl login)\n        }\n","type":"{ clientId : String.String, auth : Maybe.Maybe String.String, decoder : Json.Decode.Decoder a, tagger : Result.Result Http.Error a -> msg, url : String.String } -> Platform.Cmd.Cmd msg"},{"name":"twitchHeaders","comment":" Creates the client-id and outh headers.\n\n    Twitch.Helix.twitchHeaders clientId auth\n","type":"String.String -> Maybe.Maybe String.String -> List.List Http.Header"}],"binops":[]},{"name":"Twitch.Helix.Decode","comment":" Decoders for the Helix API.\n\n# Users\n@docs User, users\n\n# Follows\n@docs Follow, follows\n\n# Streams\n@docs Stream, streams\n\n# Games\n@docs Game, games\n\n# Videos\n@docs Video, VideoType, Viewable, videos\n\n# Clips\n@docs Clip, clips\n\n# OAuth tokens\n@docs Token, token\n\n# Sample data\n@docs sampleToken, sampleUser, sampleStream, sampleGame, sampleFollow, sampleVideo, sampleClip\n","unions":[{"name":"VideoType","comment":" Enumerated type for video_type attribute, does include an escape hatch in case other types are added in the future.\n","args":[],"cases":[["Upload",[]],["Archive",[]],["Highlight",[]],["Other",["String.String"]]]},{"name":"Viewable","comment":" Enumerted type for the viewable status\n","args":[],"cases":[["Public",[]],["Private",[]]]}],"aliases":[{"name":"Clip","comment":" Record for a decoded clip.\n","args":[],"type":"{ id : String.String, url : String.String, embedUrl : String.String, broadcasterId : String.String, creatorId : String.String, videoId : String.String, gameId : String.String, language : String.String, title : String.String, viewCount : Basics.Int, createdAt : Time.Posix, thumbnailUrl : String.String }"},{"name":"Follow","comment":" Record for a decoded follow\n","args":[],"type":"{ from_id : String.String, to_id : String.String }"},{"name":"Game","comment":" Record for decoded Game\n","args":[],"type":"{ id : String.String, name : String.String, boxArtUrl : String.String }"},{"name":"Stream","comment":" Record for decoded Streams data\n","args":[],"type":"{ channelId : String.String, userId : String.String, gameId : String.String, communityIds : List.List String.String, title : String.String, viewerCount : Basics.Int, startedAt : Time.Posix, language : String.String, thumbnailUrl : String.String }"},{"name":"Token","comment":" Record for decoded OAuth tokens\n","args":[],"type":"{ sub : String.String, iss : String.String, aud : String.String, exp : Basics.Int, iat : Basics.Int }"},{"name":"User","comment":" Record for decoded users.\n","args":[],"type":"{ id : String.String, login : String.String, displayName : String.String, userType : String.String, broadcasterType : String.String, description : String.String, profileImageUrl : String.String, offlineImageUrl : String.String, viewCount : Basics.Int, email : Maybe.Maybe String.String }"},{"name":"Video","comment":" Record for decoded videos. viewable, video_type, and duration are lightly interpreted.\n","args":[],"type":"{ id : String.String, userId : String.String, title : String.String, description : String.String, createdAt : Time.Posix, publishedAt : Time.Posix, url : String.String, thumbnailUrl : String.String, viewable : Twitch.Helix.Decode.Viewable, viewCount : Basics.Int, language : String.String, videoType : Twitch.Helix.Decode.VideoType, duration : Basics.Int }"}],"values":[{"name":"clips","comment":" Json Decoder for clips.\n","type":"Json.Decode.Decoder (List.List Twitch.Helix.Decode.Clip)"},{"name":"follows","comment":" Json Decoder for follows\n","type":"Json.Decode.Decoder (List.List Twitch.Helix.Decode.Follow)"},{"name":"games","comment":" Json Decoder for games\n","type":"Json.Decode.Decoder (List.List Twitch.Helix.Decode.Game)"},{"name":"sampleClip","comment":" Sample data for a clip.\n","type":"String.String"},{"name":"sampleFollow","comment":" Sample data for follows\n","type":"String.String"},{"name":"sampleGame","comment":" Sample data for games\n","type":"String.String"},{"name":"sampleStream","comment":" Sample data for streams\n","type":"String.String"},{"name":"sampleToken","comment":" Sample OAuth token.\n","type":"String.String"},{"name":"sampleUser","comment":" Sample data for a user\n","type":"String.String"},{"name":"sampleVideo","comment":" Sample data for a video\n","type":"String.String"},{"name":"streams","comment":" Json Decoder from streams\n","type":"Json.Decode.Decoder (List.List Twitch.Helix.Decode.Stream)"},{"name":"token","comment":" Json Decoder for OAuth tokens.\n\n    userId = token\n      |> Maybe.andThen (Result.toMaybe << Jwt.decodeToken Twitch.Helix.Decode.token)\n      |> Maybe.map .sub\n","type":"Json.Decode.Decoder Twitch.Helix.Decode.Token"},{"name":"users","comment":" Json Decoder for users\n","type":"Json.Decode.Decoder (List.List Twitch.Helix.Decode.User)"},{"name":"videos","comment":" Json Decoder for videos\n","type":"Json.Decode.Decoder (List.List Twitch.Helix.Decode.Video)"}],"binops":[]},{"name":"Twitch.Kraken","comment":" Helpers for sending Http requests to the Twitch Kraken (\"V5\") endpoints.\n\n# Send a Request\n@docs send\n\n# Header Helpers\nUseful if you need to make your own Http call with additional headers.\n@docs twitchHeaders, authHeaders\n\n","unions":[],"aliases":[],"values":[{"name":"authHeaders","comment":" Creates the oauth header, given an oauth token.\n","type":"Maybe.Maybe String.String -> List.List Http.Header"},{"name":"send","comment":" Send a basic request to the Twitch Kraken (\"V5\") endpoints. Lightweight wrapper around Http, so you can go back to basics if something else is needed. Auth is a token received from an oauth loop.\n\n    fetchCommunityByNameUrl : String -> String\n    fetchCommunityByNameUrl login =\n      \"https://api.twitch.tv/kraken/communities?name=\" ++ name\n\n    fetchCommunityByName : String -> Cmd Msg\n    fetchCommunityByName name =\n      Twitch.Kraken.send <|\n        { clientId = TwitchId.clientId\n        , auth = Nothing\n        , decoder = Twitch.Kraken.Decode.community\n        , tagger = Community\n        , url = (fetchCommunityByNameUrl login)\n        }\n","type":"{ clientId : String.String, auth : Maybe.Maybe String.String, decoder : Json.Decode.Decoder a, tagger : Result.Result Http.Error a -> msg, url : String.String } -> Platform.Cmd.Cmd msg"},{"name":"twitchHeaders","comment":" Creates the client-id and outh headers.\n\n    Twitch.Kraken.twitchHeaders clientId auth\n","type":"String.String -> Maybe.Maybe String.String -> List.List Http.Header"}],"binops":[]},{"name":"Twitch.Kraken.Decode","comment":" Decoders for the Kraken API.\n\n# Users\n@docs Community, community\n\n# Sample data\n@docs sampleCommunity\n","unions":[],"aliases":[{"name":"Community","comment":" Record for decoded community.\n","args":[],"type":"{ id : String.String, avatarImageUrl : String.String, coverImageUrl : String.String, description : String.String, descriptionHtml : String.String, language : String.String, name : String.String, ownerId : String.String, rules : String.String, summary : String.String }"}],"values":[{"name":"community","comment":" Json Decoder for a community\n","type":"Json.Decode.Decoder Twitch.Kraken.Decode.Community"},{"name":"sampleCommunity","comment":" Sample data for a community.\n","type":"String.String"}],"binops":[]},{"name":"Twitch.Template","comment":" Helpers for filling in image and url templates received from API responses.\n\n@docs imageTemplateUrl, imagePercentTemplateUrl\n","unions":[],"aliases":[],"values":[{"name":"imagePercentTemplateUrl","comment":" Fills in templates with %{width} and %{height}.\n\n    Twitch.Template.imagePercentTemplateUrl 320 180 video.thumbnailUrl\n","type":"Basics.Int -> Basics.Int -> String.String -> String.String"},{"name":"imageTemplateUrl","comment":" Fills in templates with {width} and {height}.\n\n    Twitch.Template.imageTemplateUrl 168 95 stream.thumbnailUrl\n","type":"Basics.Int -> Basics.Int -> String.String -> String.String"}],"binops":[]},{"name":"Twitch.Tmi.Decode","comment":" Decoders for the TMI API at `tmi.twitch.tv/hosts` Note that this is an unofficial API, requests should be made with Http.send rather than Twitch.Helix.send. Furthermore, TMI does not provide cross-origin headers, so a cross-origin proxy may be required.\n\n\n@docs Host, hosts, sampleHost\n","unions":[],"aliases":[{"name":"Host","comment":" Record for decoded host data\n","args":[],"type":"{ hostId : String.String, targetId : String.String, hostLogin : String.String, targetLogin : String.String, hostDisplayName : String.String, targetDisplayName : String.String }"}],"values":[{"name":"hosts","comment":" Json decoder for hosts\n","type":"Json.Decode.Decoder (List.List Twitch.Tmi.Decode.Host)"},{"name":"sampleHost","comment":" sample data for bootstrapping and testing\n","type":"String.String"}],"binops":[]}]