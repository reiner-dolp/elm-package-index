[
  {
    "name": "Styles",
    "comment": " Styles is a UI library for [elm-css](https://github.com/rtfeldman/elm-css), inspired by [tachyons](http://tachyons.io).\n\n\n# Usage Example\n\nMaking an element full-size, centering its content and making the text uppercase;\n\n        import Styles exposing (toCSS, center, stretch)\n        import Html.Styled exposing (div, text)\n        import List\n\n        main =\n            div\n                [ []\n                    |> center\n                    |> stretch\n                    |> toCSS\n                ]\n                [ text \"hello world\" ]\n                |> Html.Styled.toUnstyled\n\n\n# Styling Reference\n\n@docs absolute\n@docs autoGrid\n@docs box\n@docs center\n@docs circle\n@docs cover\n@docs debug\n@docs debug16\n@docs easein\n@docs easeout\n@docs equalGrid\n@docs fixed\n@docs fullscreen\n@docs gap\n@docs grid\n@docs maxWidth\n@docs monospace\n@docs minWidth\n@docs position\n@docs rainbow\n@docs relative\n@docs rounded\n@docs sans\n@docs serif\n@docs shadow\n@docs sticky\n@docs stretch\n@docs transparentBg\n@docs typography\n@docs whitebg\n@docs whitefg\n\n\n# Definition\n\n@docs GapConfig\n@docs GridConfig\n@docs PositionConfig\n\n\n# Default Config\n\n@docs defaultBox\n@docs defaultTypo\n@docs defaultGap\n@docs defaultGrid\n@docs defaultPosition\n\n\n# Proxy\n\n@docs toCSS\n\n",
    "aliases": [
      {
        "name": "GapConfig",
        "comment": " Config type for defining inner / outer gaps for elements.\n",
        "args": [],
        "type": "{ inner : Styles.Length.Length , innerTop : Styles.Length.Length , innerRight : Styles.Length.Length , innerBottom : Styles.Length.Length , innerLeft : Styles.Length.Length , outer : Styles.Length.Length , outerTop : Styles.Length.Length , outerRight : Styles.Length.Length , outerBottom : Styles.Length.Length , outerLeft : Styles.Length.Length }"
      },
      {
        "name": "GridConfig",
        "comment": " Options for constructing new grid\n",
        "args": [],
        "type": "{ columns : Styles.Length.Length , rows : Styles.Length.Length , columnGap : Styles.Length.Length , rowGap : Styles.Length.Length }"
      },
      {
        "name": "PositionConfig",
        "comment": " Config for setting position. ",
        "args": [],
        "type": "{ top : Styles.Length.Length , right : Styles.Length.Length , bottom : Styles.Length.Length , left : Styles.Length.Length }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "absolute",
        "comment": " Set position as absolute and pass position config\n",
        "type": "Styles.PositionConfig -> List Css.Style -> List Css.Style"
      },
      {
        "name": "autoGrid",
        "comment": " Create a grid with given number auto-sized columns. It's equivalent of;\n\n        grid { defaultGrid | columns = Length.repeat n Length.auto }\n\n",
        "type": "Int -> List Css.Style -> List Css.Style"
      },
      {
        "name": "box",
        "comment": " Create a new box element with given config\n",
        "type": "Styles.Box.Config -> List Css.Style -> List Css.Style"
      },
      {
        "name": "center",
        "comment": " Centers inside the content.\n",
        "type": "List Css.Style -> List Css.Style"
      },
      {
        "name": "circle",
        "comment": " Make the element look circle.\n\n        import Styles exposing (circle)\n        import Html.Styled exposing (img)\n        import Html.Styled.Attributes exposing (css, src)\n        import Css exposing (backgroundColor, hex)\n\n\n        main =\n            img\n                [ src \"https://placekitten.com/g/200/200\"\n                , css (circle [])\n                ]\n                []\n                |> Html.Styled.toUnstyled\n\n",
        "type": "List Css.Style -> List Css.Style"
      },
      {
        "name": "cover",
        "comment": " Set given background image as cover\n",
        "type": "String -> List Css.Style -> List Css.Style"
      },
      {
        "name": "debug",
        "comment": " Shows 8px debug grid as a background.\n",
        "type": "List Css.Style -> List Css.Style"
      },
      {
        "name": "debug16",
        "comment": " Shows 16px debug grid as a background.\n",
        "type": "List Css.Style -> List Css.Style"
      },
      {
        "name": "defaultBox",
        "comment": " Default box config\n",
        "type": "Styles.Box.Config"
      },
      {
        "name": "defaultGap",
        "comment": " Default gap config\n",
        "type": "Styles.GapConfig"
      },
      {
        "name": "defaultGrid",
        "comment": " Default GridConfig\n",
        "type": "Styles.GridConfig"
      },
      {
        "name": "defaultPosition",
        "comment": " Default position config\n",
        "type": "Styles.PositionConfig"
      },
      {
        "name": "defaultTypo",
        "comment": " Default typography config ",
        "type": "Styles.Typography.Config"
      },
      {
        "name": "easein",
        "comment": " Add easein transition to all properties\n",
        "type": "Float -> List Css.Style -> List Css.Style"
      },
      {
        "name": "easeout",
        "comment": " Add easeout transition to all properties\n",
        "type": "Float -> List Css.Style -> List Css.Style"
      },
      {
        "name": "equalGrid",
        "comment": " Shortcut for creating a grid with given number equal-sized columns. It's equivalent of;\n\n        grid { defaultGrid | columns = Length.repeat n (Length.fr 1) }\n\n",
        "type": "Int -> List Css.Style -> List Css.Style"
      },
      {
        "name": "fixed",
        "comment": " Set position as fixed and pass position config\n",
        "type": "Styles.PositionConfig -> List Css.Style -> List Css.Style"
      },
      {
        "name": "fullscreen",
        "comment": " Make the element stretch to the visible part of the screen.\n",
        "type": "List Css.Style -> List Css.Style"
      },
      {
        "name": "gap",
        "comment": " Set inner (padding) and outer (margin) gap.",
        "type": "Styles.GapConfig -> List Css.Style -> List Css.Style"
      },
      {
        "name": "grid",
        "comment": " Helper for creating CSS3 grid layouts. It takes a `GridConfig` type of record\nand returns list of styles that you can pass to elm-css.\n\n        import Styles exposing (grid, defaultGrid)\n        import Styles.Length exposing (Pct)\n        import Css exposing (css)\n\n        main =\n           let\n             config = { defaultGrid | columns = List [Pct 30, Auto, Pct 30] }\n           in\n             div [ css (grid config []) ]\n                 [ div [] [text \"left (30%)\"]\n                 , div [] [text \"center (auto)\"]\n                 , div [] [text \"right (30%)\"]\n                 ]\n\n",
        "type": "Styles.GridConfig -> List Css.Style -> List Css.Style"
      },
      {
        "name": "maxWidth",
        "comment": " Media query shortcut for defining styles that depend on maximum screen width (pixels).\n\n        import Styles exposing (maxWidth, maxWidth)\n        import Html.Styled exposing (div, text)\n        import Html.Styled.Attributes exposing (css)\n        import Css exposing (backgroundColor, hex)\n\n\n        main =\n            div\n                [ [ backgroundColor (hex \"#cc0000\") ]\n                    |> maxWidth 500 [ backgroundColor (hex \"#38C172\") ]\n                    |> css\n                ]\n                [ text \"hello world\" ]\n                |> Html.Styled.toUnstyled\n\n",
        "type": "Float -> List Css.Style -> List Css.Style -> List Css.Style"
      },
      {
        "name": "minWidth",
        "comment": " Media query shortcut for defining styles that depend on minimum screen width (pixels).\n\n        import Styles exposing (minWidth, maxWidth)\n        import Html.Styled exposing (div, text)\n        import Html.Styled.Attributes exposing (css)\n        import Css exposing (backgroundColor, hex)\n\n        main =\n            div\n                [ [ backgroundColor (hex \"#cc0000\") ]\n                    |> minWidth 500 [ backgroundColor (hex \"#38C172\") ]\n                    |> css\n                ]\n                [ text \"hello world\" ]\n                |> Html.Styled.toUnstyled\n\n",
        "type": "Float -> List Css.Style -> List Css.Style -> List Css.Style"
      },
      {
        "name": "monospace",
        "comment": " Set typography as monospace, proxying other typography options ",
        "type": "Styles.Typography.Config -> List Css.Style -> List Css.Style"
      },
      {
        "name": "position",
        "comment": " Set position properties \"top\" \"left\" \"right\" and \"bottom\"\n",
        "type": "Styles.PositionConfig -> List Css.Style"
      },
      {
        "name": "rainbow",
        "comment": " Add rainbow effect to the text.\n",
        "type": "List Css.Style -> List Css.Style"
      },
      {
        "name": "relative",
        "comment": " Set position as relative and pass position config\n",
        "type": "Styles.PositionConfig -> List Css.Style -> List Css.Style"
      },
      {
        "name": "rounded",
        "comment": " Set border as rounded with given pixels\n",
        "type": "Styles.Length.Length -> List Css.Style -> List Css.Style"
      },
      {
        "name": "sans",
        "comment": " Set typography family as sans, proxying other typography options ",
        "type": "Styles.Typography.Config -> List Css.Style -> List Css.Style"
      },
      {
        "name": "serif",
        "comment": " Set typography family as serif, proxying other typography options ",
        "type": "Styles.Typography.Config -> List Css.Style -> List Css.Style"
      },
      {
        "name": "shadow",
        "comment": " Add shadow with specified opacity.\n",
        "type": "Float -> List Css.Style -> List Css.Style"
      },
      {
        "name": "sticky",
        "comment": " Set position as sticky and pass position config\n",
        "type": "Styles.PositionConfig -> List Css.Style -> List Css.Style"
      },
      {
        "name": "stretch",
        "comment": " Stretch the element to fill available horizontal and vertical space. In the other words, set the width / height to 100%.\n",
        "type": "List Css.Style -> List Css.Style"
      },
      {
        "name": "toCSS",
        "comment": " Proxy function to `Html.Styled.Attributes.css`\n",
        "type": "List Css.Style -> Html.Styled.Attribute msg"
      },
      {
        "name": "transparentBg",
        "comment": " Shortcut for setting background as transparent\n",
        "type": "List Css.Style -> List Css.Style"
      },
      {
        "name": "typography",
        "comment": " Set typography options ",
        "type": "Styles.Typography.Config -> List Css.Style -> List Css.Style"
      },
      {
        "name": "whitebg",
        "comment": " Shortcut for setting background color as white\n",
        "type": "List Css.Style -> List Css.Style"
      },
      {
        "name": "whitefg",
        "comment": " Shortcut for setting text color as white\n",
        "type": "List Css.Style -> List Css.Style"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Styles.Typography",
    "comment": " Module for configuring up fonts\n\n# Definition\n\n@docs Config\n\n# Functions\n\n@docs defaultConfig\n@docs css\n\n",
    "aliases": [
      {
        "name": "Config",
        "comment": " Config for setting typography and basic text properties ",
        "args": [],
        "type": "{ family : List String , size : Styles.Length.Length , weight : Int , height : Styles.Length.Length , uppercase : Bool , lowercase : Bool , capitalize : Bool , ellipsis : Bool , charSpacing : Int , fg : Css.Color , bg : Css.Color }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "css",
        "comment": " Return CSS properties for given typography config ",
        "type": "Styles.Typography.Config -> List Css.Style"
      },
      {
        "name": "defaultConfig",
        "comment": " Default typography config ",
        "type": "Styles.Typography.Config"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Styles.Box",
    "comment": " Module for configuring blocks\n\n# Definition\n\n@docs Config\n\n",
    "aliases": [
      {
        "name": "Config",
        "comment": " Options for creating a new element.\n",
        "args": [],
        "type": "{ size : Styles.Length.Length , width : Styles.Length.Length , height : Styles.Length.Length , bg : Css.Color , fg : Css.Color }"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Styles.Border",
    "comment": " Union types for defining border.\n\n# Definition\n@docs Border\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Border",
        "comment": " Union type for specifying border size, color and style.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Styles.Color",
    "comment": " Color definition functions. All are proxy to elm-css.\n\n# Proxy\n\n@docs hex\n@docs hsl\n@docs hsla\n@docs rgb\n@docs rgba\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "hex",
        "comment": " Define hex color ",
        "type": "String -> Css.Color"
      },
      {
        "name": "hsl",
        "comment": " Define hsl color ",
        "type": "Float -> Float -> Float -> Css.Color"
      },
      {
        "name": "hsla",
        "comment": " Define hsla color ",
        "type": "Float -> Float -> Float -> Float -> Css.Color"
      },
      {
        "name": "rgb",
        "comment": " Define rgb color ",
        "type": "Int -> Int -> Int -> Css.Color"
      },
      {
        "name": "rgba",
        "comment": " Define rgba color ",
        "type": "Int -> Int -> Int -> Float -> Css.Color"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Styles.Length",
    "comment": " Flexible length module. Not as strict as elm-css.\n\n      import Styles.Length exposing (..)\n\n      columns [em 1, px 3, auto]\n\n      repeat 3, (fr 1)\n\n# Definition\n\n@docs Length\n\n# Functions\n\n@docs around\n@docs auto\n@docs columns\n@docs em\n@docs fr\n@docs len\n@docs pct\n@docs px\n@docs rem\n@docs repeat\n@docs rows\n@docs unset\n@docs vh\n\n# Internal\n\n@docs stringify\n\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Length",
        "comment": " Union type for all kinds of lengths ",
        "args": [],
        "cases": [
          [
            "Auto",
            []
          ],
          [
            "Em",
            [
              "Float"
            ]
          ],
          [
            "Fr",
            [
              "Float"
            ]
          ],
          [
            "Multiple",
            [
              "List Styles.Length.Length"
            ]
          ],
          [
            "Unset",
            []
          ],
          [
            "Pct",
            [
              "Float"
            ]
          ],
          [
            "Px",
            [
              "Float"
            ]
          ],
          [
            "Rem",
            [
              "Float"
            ]
          ],
          [
            "Repeat",
            [
              "Int",
              "Styles.Length.Length"
            ]
          ],
          [
            "Vh",
            [
              "Float"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "around",
        "comment": " Alias function for constructing list of lengths ",
        "type": "List Styles.Length.Length -> Styles.Length.Length"
      },
      {
        "name": "auto",
        "comment": " Returns Auto ",
        "type": "Styles.Length.Length"
      },
      {
        "name": "columns",
        "comment": " Alias function for constructing list of lengths ",
        "type": "List Styles.Length.Length -> Styles.Length.Length"
      },
      {
        "name": "em",
        "comment": " Returns an em length for given number ",
        "type": "Float -> Styles.Length.Length"
      },
      {
        "name": "fr",
        "comment": " Returns an fr length for given number ",
        "type": "Float -> Styles.Length.Length"
      },
      {
        "name": "len",
        "comment": " Alias function for constructing list of lengths ",
        "type": "List Styles.Length.Length -> Styles.Length.Length"
      },
      {
        "name": "pct",
        "comment": " Returns an percent length for given number ",
        "type": "Float -> Styles.Length.Length"
      },
      {
        "name": "px",
        "comment": " Returns an pixels length for given number ",
        "type": "Float -> Styles.Length.Length"
      },
      {
        "name": "rem",
        "comment": " Returns an rem length for given number ",
        "type": "Float -> Styles.Length.Length"
      },
      {
        "name": "repeat",
        "comment": " Returns repeat of given length. ",
        "type": "Int -> Styles.Length.Length -> Styles.Length.Length"
      },
      {
        "name": "rows",
        "comment": " Alias function for constructing list of lengths ",
        "type": "List Styles.Length.Length -> Styles.Length.Length"
      },
      {
        "name": "stringify",
        "comment": " Stringifies given length.\n\n      > stringify (em 1)\n      \"1em\"\n\n      > stringify (columns [1em, auto, 1em])\n      \"1em auto 1em\"\n",
        "type": "Styles.Length.Length -> String"
      },
      {
        "name": "unset",
        "comment": " Marks the property as unset ",
        "type": "Styles.Length.Length"
      },
      {
        "name": "vh",
        "comment": " Returns vh length for given number. ",
        "type": "Float -> Styles.Length.Length"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]