[{"name":"Canvas","comment":" This module exposes a nice drawing API that works on top of the the DOM\ncanvas.\n\nSee instructions in the main page of the package for installation, as it\nrequires the `elm-canvas` web component to work.\n\n\n# Usage in HTML\n\n@docs toHtml\n\n\n# Drawing things\n\n@docs Renderable, Setting\n\n@docs shapes, text\n\n@docs Point\n\n\n# Styling the things you draw\n\nThe two main style settings are fill color and stroke color, which are\ndocumented here.\n\n@docs fill, stroke\n\nThere are other style settings in the documentation (if you search for things\nthat return a `Setting` you can see). More specifically:\n\n  - There are some style settings that only apply when drawing text, and you can find them in the **Drawing text** section.\n  - There are other more advanced rendering settings that you can read about\n    further down in the **Advanced rendering settings** section. They cover things\n    like:\n      - Line settings that apply to paths and shapes and text with stroke.\n      - Shadows.\n      - Matrix transforms.\n      - And other more advanced topics like compositing mode.\n\n\n# Drawing shapes\n\nShapes can be rectangles, circles, and different types of lines. By composing\nshapes, you can draw complex figures! There are many functions that produce\na `Shape`, which you can feed to `shapes` to get something on the screen.\n\n@docs Shape\n\nHere are the different functions that produce shapes that we can draw.\n\n@docs rect, circle, arc, path\n\n\n## Paths\n\nIn order to make a complex path, we need to put together a list of `PathSegment`\n\n@docs PathSegment, arcTo, bezierCurveTo, lineTo, moveTo, quadraticCurveTo\n\n\n# Drawing text\n\nTo draw text we use the function `text` documented above:\n\n    text\n        [ font { size = 48, family = \"serif\" }\n        , align Center\n        ]\n        ( 50, 50 )\n        \"Hello world\"\n\nYou can apply the following styling settings to text specifically. They will do\nnothing if you apply them to other renderables, like `shapes`.\n\n@docs font, align, TextAlign, baseLine, TextBaseLine\n\n\n# Advanced rendering settings\n\nThe following are settings that you can apply, to create very specific and\ncustom effects.\n\n\n## Line settings\n\nLine style settings apply to paths, and the stroke of shapes and text (if any).\n\n@docs lineWidth, lineCap, LineCap, lineJoin, LineJoin, lineDash, lineDashOffset, miterLimit\n\n\n## Shadows\n\nThe shadow setting allows you to create a shadow for a renderable, similar to\nwhat the `box-shadow` CSS does to HTML elements.\n\n@docs shadow, Shadow\n\n\n## Transforms: scaling, rotating, translating, and matrix transformations\n\nTransforms are very useful as they allow you to manipulate the rendering via\na transformation matrix, allowing you to translate, scale, rotate and skew the\nrendering context easily. They can be a bit of an advanced topic, but they are\npowerful and can be very useful.\n\n@docs transform, Transform, translate, rotate, scale, applyMatrix\n\n\n## Alpha and global composite mode\n\nFinally, there are a couple of other settings that you can use to create\ninteresting visual effects:\n\n@docs alpha, compositeOperationMode, GlobalCompositeOperationMode\n\n","unions":[{"name":"GlobalCompositeOperationMode","comment":" Type of compositing operation, identifying which of the compositing or\nblending mode operations to use. See the chapter\n[Compositing](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing)\nfrom the Canvas Tutorial.\n\nFor more information and pictures of what each mode does, see the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation).\n\n","args":[],"cases":[["SourceOver",[]],["SourceIn",[]],["SourceOut",[]],["SourceAtop",[]],["DestinationOver",[]],["DestinationIn",[]],["DestinationOut",[]],["DestinationAtop",[]],["Lighter",[]],["Copy",[]],["Xor",[]],["Multiply",[]],["Screen",[]],["Overlay",[]],["Darken",[]],["Lighten",[]],["ColorDodge",[]],["ColorBurn",[]],["HardLight",[]],["SoftLight",[]],["Difference",[]],["Exclusion",[]],["Hue",[]],["Saturation",[]],["Color",[]],["Luminosity",[]]]},{"name":"LineCap","comment":" Type of end points for line drawn.\n\n  - `ButtCap`\n      - The ends of lines are squared off at the endpoints.\n  - `RoundCap`\n      - The ends of lines are rounded.\n  - `SquareCap`\n      - The ends of lines are squared off by adding a box with an equal width\n        and half the height of the line's thickness.\n\n","args":[],"cases":[["ButtCap",[]],["RoundCap",[]],["SquareCap",[]]]},{"name":"LineJoin","comment":" Determines how two connecting segments with non-zero lengths in a shape are\njoined together.\n\n  - `Round`\n      - Rounds off the corners of a shape by filling an additional sector of disc\n        centered at the common endpoint of connected segments. The radius for these\n        rounded corners is equal to the line width.\n  - `Bevel`\n      - Fills an additional triangular area between the common endpoint of\n        connected segments, and the separate outside rectangular corners of each segment.\n  - `Miter`\n      - Connected segments are joined by extending their outside edges to connect\n        at a single point, with the effect of filling an additional lozenge-shaped\n        area. This setting is affected by the miterLimit property.\n\nYou can see examples and pictures on the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)\n\n","args":[],"cases":[["BevelJoin",[]],["RoundJoin",[]],["MiterJoin",[]]]},{"name":"PathSegment","comment":" In order to draw a path, you need to give the function `path` a list of\n`PathSegment`\n","args":[],"cases":[]},{"name":"Renderable","comment":" A `Renderable` is a thing that the canvas knows how to render, similar to\n`Html` elements.\n\nWe can make `Renderable`s to use with `Canvas.toHtml` with functions like\n`shapes` and `text`.\n\n","args":[],"cases":[]},{"name":"Setting","comment":" Similar to `Html.Attribute`, settings control the presentation and other\nstyle options for the `Renderable`s.\n","args":[],"cases":[]},{"name":"Shape","comment":" A `Shape` represents a shape or lines to be drawn. Giving them to `shapes`\nwe get a `Renderable` for the canvas.\n\n    shapes []\n        [ path ( 20, 10 )\n            [ lineTo ( 10, 30 )\n            , lineTo ( 30, 30 )\n            , lineTo ( 20, 10 )\n            ]\n        , circle ( 50, 50 ) 10\n        , rect ( 100, 150 ) 40 50\n        , circle ( 100, 100 ) 80\n        ]\n\n","args":[],"cases":[]},{"name":"TextAlign","comment":" Type of text alignment\n\n  - `Left`\n      - The text is left-aligned.\n  - `Right`\n      - The text is right-aligned.\n  - `Center`\n      - The text is centered.\n  - `Start`\n      - The text is aligned at the normal start of the line (left-aligned for\n        left-to-right locales, right-aligned for right-to-left locales).\n  - `End`\n      - The text is aligned at the normal end of the line (right-aligned for\n        left-to-right locales, left-aligned for right-to-left locales).\n\n","args":[],"cases":[["Left",[]],["Right",[]],["Center",[]],["Start",[]],["End",[]]]},{"name":"TextBaseLine","comment":" Type of text baseline.\n\n  - `Top`\n      - The text baseline is the top of the em square.\n  - `Hanging`\n      - The text baseline is the hanging baseline. (Used by Tibetan and other Indic scripts.)\n  - `Middle`\n      - The text baseline is the middle of the em square.\n  - `Alphabetic`\n      - The text baseline is the normal alphabetic baseline.\n  - `Ideographic`\n      - The text baseline is the ideographic baseline; this is the bottom of the body of the characters, if the main body of characters protrudes beneath the alphabetic baseline. (Used by Chinese, Japanese and Korean scripts.)\n  - `Bottom`\n      - The text baseline is the bottom of the bounding box. This differs from the ideographic baseline in that the ideographic baseline doesn't consider descenders.\n\n","args":[],"cases":[["Top",[]],["Hanging",[]],["Middle",[]],["Alphabetic",[]],["Ideographic",[]],["Bottom",[]]]},{"name":"Transform","comment":" Type of transform to apply to the matrix, to be used in `transform`. See the\nfunctions below to learn how to create transforms.\n","args":[],"cases":[]}],"aliases":[{"name":"Point","comment":" A small alias to reference points on some of the functions on the package.\n\nThe first argument of the tuple is the `x` position, and the second is the `y`\nposition.\n\n    -- Making a point with x = 15 and y = 55\n    point : Point\n    point =\n        ( 15, 55 )\n\n","args":[],"type":"( Basics.Float, Basics.Float )"},{"name":"Shadow","comment":" Record with the settings for a shadow.\n\n  - `blur`: Amount of blur for the shadow\n  - `color`: Color of the shadow\n  - `offset`: `( xOffset, yOffset )`\n\n","args":[],"type":"{ blur : Basics.Float, color : Color.Color, offset : ( Basics.Float, Basics.Float ) }"}],"values":[{"name":"align","comment":" Specifies the text alignment to use when drawing text. Beware\nthat the alignment is based on the x value of position passed to `text`. So if\n`textAlign` is `Center`, then the text would be drawn at `x - (width / 2)`.\n\nThe default value is `Start`. [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)\n\n","type":"Canvas.TextAlign -> Canvas.Setting"},{"name":"alpha","comment":" Specifies the alpha value that is applied before renderables are drawn onto\nthe canvas. The value is in the range from 0.0 (fully transparent) to 1.0 (fully\nopaque). The default value is 1.0. Values outside the range, including\n`Infinity` and `NaN` will not be set and alpha will remain default.\n","type":"Basics.Float -> Canvas.Setting"},{"name":"applyMatrix","comment":" Multiplies the current transformation with the matrix described by the\narguments of this method. You are able to scale, rotate, move and skew the\ncontext.\n\n  - `m11`\n      - Horizontal scaling.\n  - `m12`\n      - Horizontal skewing.\n  - `m21`\n      - Vertical skewing.\n  - `m22`\n      - Vertical scaling.\n  - `dx`\n      - Horizontal moving.\n  - `dy`\n      - Vertical moving.\n\n","type":"{ m11 : Basics.Float, m12 : Basics.Float, m21 : Basics.Float, m22 : Basics.Float, dx : Basics.Float, dy : Basics.Float } -> Canvas.Transform"},{"name":"arc","comment":" Creates an arc, a partial circle. It takes the position of the center of the\ncircle, the radius of it, the start angle where the arc will start, the end\nangle where the arc will end, and if it should draw in clockwise or\nanti-clockwise direction.\n\n    arc ( 10, 10 ) 40 { startAngle = 15, endAngle = 85, clockwise = True }\n\n","type":"Canvas.Point -> Basics.Float -> { startAngle : Basics.Float, endAngle : Basics.Float, clockwise : Basics.Bool } -> Canvas.Shape"},{"name":"arcTo","comment":" Adds an arc to the path with the given control points and radius.\n\nThe arc drawn will be a part of a circle, never elliptical. Typical use could be\nmaking a rounded corner.\n\nOne way to think about the arc drawn is to imagine two straight segments, from\nthe starting point (latest point in current path) to the first control point,\nand then from the first control point to the second control point. These two\nsegments form a sharp corner with the first control point being in the corner.\nUsing `arcTo`, the corner will instead be an arc with the given radius.\n\nThe arc is tangential to both segments, which can sometimes produce surprising\nresults, e.g. if the radius given is larger than the distance between the\nstarting point and the first control point.\n\nIf the radius specified doesn't make the arc meet the starting point (latest\npoint in the current path), the starting point is connected to the arc with\na straight line segment.\n\n    arcTo ( x1, y1 ) ( x2, y2 ) radius\n\nYou can see more examples and docs in [this page](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo)\n\n","type":"Canvas.Point -> Canvas.Point -> Basics.Float -> Canvas.PathSegment"},{"name":"baseLine","comment":" Specifies the current text baseline being used when drawing text.\n\nThe default value is `Alphabetic`.\n\nSee [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)\nfor examples and rendering of the different modes.\n\n","type":"Canvas.TextBaseLine -> Canvas.Setting"},{"name":"bezierCurveTo","comment":" Adds a cubic Bézier curve to the path. It requires three points. The first\ntwo points are control points and the third one is the end point. The starting\npoint is the last point in the current path, which can be changed using `moveTo`\nbefore creating the Bézier curve. You can learn more about this curve in the\n[MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo).\n\n    bezierCurveTo controlPoint1 controlPoint2 point\n\n    bezierCurveTo ( cp1x, cp1y ) ( cp2x, cp2y ) ( x, y )\n\n  - `cp1x`\n      - The x axis of the coordinate for the first control point.\n  - `cp1y`\n      - The y axis of the coordinate for the first control point.\n  - `cp2x`\n      - The x axis of the coordinate for the second control point.\n  - `cp2y`\n      - The y axis of the coordinate for the second control point.\n  - `x`\n      - The x axis of the coordinate for the end point.\n  - `y`\n      - The y axis of the coordinate for the end point.\n\n","type":"Canvas.Point -> Canvas.Point -> Canvas.Point -> Canvas.PathSegment"},{"name":"circle","comment":" Creates a circle. It takes the position of the center of the circle, and the\nradius of it.\n\n    circle pos radius\n\n","type":"Canvas.Point -> Basics.Float -> Canvas.Shape"},{"name":"compositeOperationMode","comment":" Specify the type of compositing operation to apply when drawing new\nentities, where type is a `GlobalCompositeOperationMode` identifying which of\nthe compositing or blending mode operations to use.\n\nSee `GlobalCompositeOperationMode` below for more information.\n\n    compositeOperationMode Screen\n\n","type":"Canvas.GlobalCompositeOperationMode -> Canvas.Setting"},{"name":"fill","comment":" By default, renderables are drawn with black color. If you want to specify\na different color to draw, use this `Setting` on your renderable.\n\n    shapes\n        [ fill Color.green ]\n        [ rect ( 10, 30 ) 50 50 ]\n\n","type":"Color.Color -> Canvas.Setting"},{"name":"font","comment":" Specify the font size and family to use when rendering text.\n\n  - `size`: What is the size of the text in pixels. Similar to the `font-size`\n    property in CSS.\n  - `family`: Font family name to use when drawing the text. For example, you can\n    use `\"monospace\"`, `\"serif\"` or `\"sans-serif\"` to use the user configured\n    default fonts in the browser. You can also specify other font names like\n    `\"Consolas\"`.\n\n","type":"{ size : Basics.Int, family : String.String } -> Canvas.Setting"},{"name":"lineCap","comment":" Determines how the end points of every line are drawn. See `LineCap` for the\npossible types. By default `ButtCap` is used. See the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)\nfor examples.\n","type":"Canvas.LineCap -> Canvas.Setting"},{"name":"lineDash","comment":" Specify the line dash pattern used when stroking lines, using a list of\nvalues which specify alternating lengths of lines and gaps which describe the\npattern.\n\n    lineDash segments\n\n  - `segments`\n      - A list of numbers which specify distances to alternately draw a line\n        and a gap (in coordinate space units). If the number of elements in the list\n        is odd, the elements of the list get copied and concatenated. For example, `[5,\n        15, 25]` will become `[5, 15, 25, 5, 15, 25]`. If the list is empty, the line\n        dash list is clear and line strokes are solid.\n\nYou can see examples and more information in the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash)\n\n","type":"List.List Basics.Float -> Canvas.Setting"},{"name":"lineDashOffset","comment":" Specify the line dash pattern offset or \"phase\".\n\nThere are visual examples and more information in the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)\n\n","type":"Basics.Float -> Canvas.Setting"},{"name":"lineJoin","comment":" Specify how two connecting segments (of lines, arcs or curves) with\nnon-zero lengths in a shape are joined together (degenerate segments with zero\nlengths, whose specified endpoints and control points are exactly at the same\nposition, are skipped). See the type `LineJoin`.\n\nBy default this property is set to `MiterJoin`. Note that the `lineJoin` setting\nhas no effect if the two connected segments have the same direction, because no\njoining area will be added in this case.\n\nMore information and examples in the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)\n\n","type":"Canvas.LineJoin -> Canvas.Setting"},{"name":"lineTo","comment":" Connects the last point in the previous shape to the x, y coordinates with a\nstraight line.\n\n    lineTo ( x, y )\n\nIf you want to make a line independently of where the previous shape ended, you\ncan use `moveTo` before using lineTo.\n\n","type":"Canvas.Point -> Canvas.PathSegment"},{"name":"lineWidth","comment":" Specify the thickness of lines in space units. When passing zero, negative,\nInfinity and NaN values are ignored. More information and examples in the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)\n","type":"Basics.Float -> Canvas.Setting"},{"name":"miterLimit","comment":" Specify the miter limit ratio in space units. When passing zero, negative,\nInfinity and NaN values are ignored. It defaults to 10.\n\nMore information and live example in the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)\n\n","type":"Basics.Float -> Canvas.Setting"},{"name":"moveTo","comment":" `moveTo` doesn't necessarily produce any shape, but it moves the starting\npoint somewhere so that you can use this with other lines.\n\n    moveTo point\n\n","type":"Canvas.Point -> Canvas.PathSegment"},{"name":"path","comment":" Creates a complex path as a shape from a list of `PathSegment` instructions.\n\nIt is mandatory to pass in the starting point for the path, since the path\nstarts with an implicit `moveTo` the starting point to avoid undesirable\nbehavior and implicit state.\n\n    path startingPoint segments\n\n","type":"Canvas.Point -> List.List Canvas.PathSegment -> Canvas.Shape"},{"name":"quadraticCurveTo","comment":" Adds a quadratic Bézier curve to the path. It requires two points. The\nfirst point is a control point and the second one is the end point. The starting\npoint is the last point in the current path, which can be changed using `moveTo`\nbefore creating the quadratic Bézier curve. Learn more about quadratic bezier\ncurves in the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)\n\n    quadraticCurveTo controlPoint point\n\n    quadraticCurveTo ( cpx, cpy ) ( x, y )\n\n  - `cpx`\n      - The x axis of the coordinate for the control point.\n  - `cpy`\n      - The y axis of the coordinate for the control point.\n  - `x`\n      - The x axis of the coordinate for the end point.\n  - `y`\n      - The y axis of the coordinate for the end point.\n\n","type":"Canvas.Point -> Canvas.Point -> Canvas.PathSegment"},{"name":"rect","comment":" Creates the shape of a rectangle. It needs the position of the top left\ncorner, the width, and the height.\n\n    rect pos width height\n\n","type":"Canvas.Point -> Basics.Float -> Basics.Float -> Canvas.Shape"},{"name":"rotate","comment":" Adds a rotation to the transformation matrix. The `angle` argument\nrepresents a clockwise rotation angle and is expressed in radians. Use the core\nfunction `degrees` to make it easier to represent the rotation.\n\n    rotate (degrees 90)\n\nThe rotation center point is always the canvas origin. To change the center\npoint, we will need to move the canvas by using the `translate` transform before\nrotating. For example, a very common use case to rotate from a specific point in\nthe canvas, maybe the center of your renderable, would be done by translating to\nthat point, rotating, and then translating back, if you want to apply more\ntransformations. Like this:\n\n    transform\n        [ translate x y\n        , rotate rotation\n        , translate -x -y\n\n        {- Other transforms -}\n        ]\n\nSee the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate)\nfor more information and examples.\n\n","type":"Basics.Float -> Canvas.Transform"},{"name":"scale","comment":" Adds a scaling transformation to the canvas units by `x` horizontally and by\n`y` vertically.\n\nBy default, one unit on the canvas is exactly one pixel. If we apply, for\ninstance, a scaling factor of 0.5, the resulting unit would become 0.5 pixels\nand so shapes would be drawn at half size. In a similar way setting the scaling\nfactor to 2.0 would increase the unit size and one unit now becomes two pixels.\nThis results in shapes being drawn twice as large.\n\n    scale x y\n\n  - `x`\n      - Scaling factor in the horizontal direction.\n  - `y`\n      - Scaling factor in the vertical direction.\n\n**Note**: You can use `scale -1 1` to flip the context horizontally and `scale 1\n-1` to flip it vertically.\n\nMore information and examples in the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale)\n\n","type":"Basics.Float -> Basics.Float -> Canvas.Transform"},{"name":"shadow","comment":" Specify a shadow to be rendered. See the `Shadow` type alias to know what\nparameters to pass.\n","type":"Canvas.Shadow -> Canvas.Setting"},{"name":"shapes","comment":" We use `shapes` to render different shapes like rectangles, circles, and\nlines of different kinds that we can connect together.\n\nYou can draw many shapes with the same `Setting`s, which makes for very\nefficient rendering.\n\n    Canvas.toHtml ( width, height )\n        []\n        [ shapes [ fill Color.white ] [ rect ( 0, 0 ) width height ] ]\n\nYou can read more about the different kinds of `Shape` in the **Drawing shapes**\nsection.\n\n","type":"List.List Canvas.Setting -> List.List Canvas.Shape -> Canvas.Renderable"},{"name":"stroke","comment":" By default, renderables are drawn with no visible stroke. If you want to\nspecify a stroke color to draw an outline over your renderable, use this\n`Setting` on it.\n\n    shapes\n        [ stroke Color.red ]\n        [ rect ( 10, 30 ) 50 50 ]\n\n","type":"Color.Color -> Canvas.Setting"},{"name":"text","comment":" We use `text` to render text on the canvas. We need to pass the list of\nsettings to style it, the point with the coordinates where we want to render,\nand the text to render.\n\nKeep in mind that `align` and other settings can change where the text is\npositioned with regards to the coordinates provided.\n\n    Canvas.toHtml ( width, height )\n        []\n        [ text [ size 48, align Center ] ( 50, 50 ) \"Hello world\" ]\n\nYou can learn more about drawing text and its settings in the **Drawing text**\nsection.\n\n","type":"List.List Canvas.Setting -> Canvas.Point -> String.String -> Canvas.Renderable"},{"name":"toHtml","comment":" Create a Html element that you can use in your view.\n\n    Canvas.toHtml ( width, height )\n        [ onClick CanvasClick ]\n        [ shapes [ fill Color.white ] [ rect ( 0, 0 ) w h ]\n        , text [ size 48, align Center ] ( 50, 50 ) \"Hello world\"\n        ]\n\n`toHtml` is almost like creating other Html elements. We need to pass `(width,\nheight)` in pixels, a list of `Html.Attribute`, and finally _instead_ of a list\nof html elements, we pass a `List Renderable`. A `Renderable` is a thing that\nthe canvas knows how to render. Read on for more information 👇.\n\n**Note**: Remember to include the `elm-canvas` web component from npm in your page for\nthis to work!\n\n","type":"( Basics.Int, Basics.Int ) -> List.List (Html.Attribute msg) -> List.List Canvas.Renderable -> Html.Html msg"},{"name":"transform","comment":" Specify the transform matrix to apply when drawing. You do so by applying\ntransforms in order, like `translate`, `rotate`, or `scale`, but you can also\nuse `applyMatrix` and set the matrix yourself manually if you know what you are\ndoing.\n\n    shapes\n        [ transform [ rotate (degrees 50) ] ]\n        [ rect ( 40, 40 ) 20 20 ]\n\n","type":"List.List Canvas.Transform -> Canvas.Setting"},{"name":"translate","comment":" Adds a translation transformation by moving the canvas and its origin `x`\nunits horizontally and `y` units vertically on the grid.\n\nMore information and examples on the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate)\n\n    translate x y\n\n","type":"Basics.Float -> Basics.Float -> Canvas.Transform"}],"binops":[]}]