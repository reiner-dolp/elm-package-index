[
  {
    "name": "Scale.Continuous.Power",
    "comment": "\n@docs Power, power, niceDomain\n",
    "aliases": [
      {
        "name": "Power",
        "comment": " Power scale\n",
        "args": [
          "a"
        ],
        "type": "{ a | exponent : Float, domain : ( Float, Float ), range : ( Float, Float ), outsideDomain : Scale.Config.OutsideDomain }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "niceDomain",
        "comment": " ",
        "type": "Int -> Scale.Continuous.Power.Power a -> Scale.Continuous.Power.Power a"
      },
      {
        "name": "power",
        "comment": " ",
        "type": "Scale.Continuous.Power.Power a -> Scale.Continuous.Continuous Float Float"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Ordinal.Band",
    "comment": "\n@docs Band, Config, band, customBand , defaultConfig\n",
    "aliases": [
      {
        "name": "Band",
        "comment": " ",
        "args": [
          "a",
          "domain"
        ],
        "type": "{ a | domain : List domain, range : ( Float, Float ), config : Maybe.Maybe Scale.Ordinal.Band.Config }"
      },
      {
        "name": "Config",
        "comment": " ",
        "args": [],
        "type": "{ paddingInner : Float , paddingOuter : Float , align : Float , round : Bool }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "band",
        "comment": " Construct an ordinal scale from an ordinal, comparable, domain\n    and a continuous range. Based on :\n    https://github.com/vega/vega-scale/blob/master/src/scaleBand.js\n",
        "type": "Scale.Ordinal.Band.Band a comparableDomain -> Scale.Ordinal.Ordinal comparableDomain Float"
      },
      {
        "name": "customBand",
        "comment": " Construct an ordinal scale from an ordinal, non-comparable, domain\n    and a continuous range. Based on :\n    https://github.com/vega/vega-scale/blob/master/src/scaleBand.js\n",
        "type": "Scale.Ordinal.Band.Band a domain -> Scale.Ordinal.Ordinal domain Float"
      },
      {
        "name": "defaultConfig",
        "comment": " ",
        "type": "Scale.Ordinal.Band.Config"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Sequential.RGB",
    "comment": "\n@docs RGB , rgb\n",
    "aliases": [
      {
        "name": "RGB",
        "comment": " ",
        "args": [
          "a"
        ],
        "type": "{ a | domain : ( Float, Float ), range : ( Color.Color, Color.Color ), gamma : Maybe.Maybe Float, outsideDomain : Scale.Config.OutsideDomain }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "rgb",
        "comment": " ",
        "type": "Scale.Sequential.RGB.RGB a -> Scale.Sequential.Sequential Float Color.Color"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Sequential.RGBBasis",
    "comment": "\n@docs RGBBasis , rgbBasis\n",
    "aliases": [
      {
        "name": "RGBBasis",
        "comment": " ",
        "args": [
          "a"
        ],
        "type": "{ a | domain : ( Float, Float ), range : List Color.Color, closed : Bool, outsideDomain : Scale.Config.OutsideDomain }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "rgbBasis",
        "comment": " ",
        "type": "Scale.Sequential.RGBBasis.RGBBasis a -> Scale.Sequential.Sequential Float Color.Color"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Sequential.HSL",
    "comment": "\n@docs HSL, hsl\n",
    "aliases": [
      {
        "name": "HSL",
        "comment": " ",
        "args": [
          "a"
        ],
        "type": "{ a | domain : ( Float, Float ), range : ( Color.Color, Color.Color ), long : Bool, outsideDomain : Scale.Config.OutsideDomain }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "hsl",
        "comment": " ",
        "type": "Scale.Sequential.HSL.HSL a -> Scale.Sequential.Sequential Float Color.Color"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Continuous.Log",
    "comment": "\n@docs Log, log, niceDomain\n",
    "aliases": [
      {
        "name": "Log",
        "comment": " ",
        "args": [
          "a"
        ],
        "type": "{ a | base : Float, domain : ( Float, Float ), range : ( Float, Float ), outsideDomain : Scale.Config.OutsideDomain }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "log",
        "comment": " ",
        "type": "Scale.Continuous.Log.Log a -> Scale.Continuous.Continuous Float Float"
      },
      {
        "name": "niceDomain",
        "comment": "\n",
        "type": "Scale.Continuous.Log.Log a -> Scale.Continuous.Log.Log a"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Continuous.Linear",
    "comment": "\n@docs Linear, linear, niceDomain\n",
    "aliases": [
      {
        "name": "Linear",
        "comment": " Linear scale\n",
        "args": [
          "a"
        ],
        "type": "{ a | domain : ( Float, Float ), range : ( Float, Float ), outsideDomain : Scale.Config.OutsideDomain }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "linear",
        "comment": " ",
        "type": "Scale.Continuous.Linear.Linear a -> Scale.Continuous.Continuous Float Float"
      },
      {
        "name": "niceDomain",
        "comment": " ",
        "type": "Int -> Scale.Continuous.Linear.Linear a -> Scale.Continuous.Linear.Linear a"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Ordinal.Custom",
    "comment": "\n@docs Custom, custom\n",
    "aliases": [
      {
        "name": "Custom",
        "comment": " ",
        "args": [
          "a",
          "domain",
          "range"
        ],
        "type": "{ a | domain : List domain, range : List range }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "custom",
        "comment": " ",
        "type": "Scale.Ordinal.Custom.Custom a domain range -> Scale.Ordinal.Ordinal domain range"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Ordinal.Comparable",
    "comment": "\n@docs Comparable, comparable\n",
    "aliases": [
      {
        "name": "Comparable",
        "comment": " ",
        "args": [
          "a",
          "comparableDomain",
          "range"
        ],
        "type": "{ a | domain : List comparableDomain, range : List range }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "comparable",
        "comment": " ",
        "type": "Scale.Ordinal.Comparable.Comparable a comparableDomain range -> Scale.Ordinal.Ordinal comparableDomain range"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Sequential",
    "comment": "\n@docs Sequential, sequential, scale, ticks\n",
    "aliases": [],
    "types": [
      {
        "name": "Sequential",
        "comment": " ",
        "args": [
          "domain",
          "range"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "scale",
        "comment": " ",
        "type": "Scale.Sequential.Sequential domain range -> domain -> Maybe.Maybe range"
      },
      {
        "name": "sequential",
        "comment": " ",
        "type": "{ a | compareDomain : domain -> domain -> Basics.Order, deinterpolateDomain : ( domain, domain ) -> domain -> Float, domain : ( domain, domain ), interpolator : Float -> range, outsideDomain : Scale.Config.OutsideDomain, ticks : ( domain, domain ) -> Int -> List domain } -> Scale.Sequential.Sequential domain range"
      },
      {
        "name": "ticks",
        "comment": " ",
        "type": "Scale.Sequential.Sequential domain range -> Int -> List domain"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Continuous",
    "comment": " Continuous Scale\n@docs Continuous, continuous, scale , unscale, ticks\n\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Continuous",
        "comment": " ",
        "args": [
          "domain",
          "range"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "continuous",
        "comment": " ",
        "type": "{ a | compareDomain : domain -> domain -> Basics.Order, deinterpolateDomain : ( domain, domain ) -> domain -> Float, domain : ( domain, domain ), interpolateRange : ( range, range ) -> Float -> range, outsideDomain : Scale.Config.OutsideDomain, range : ( range, range ), reinterpolateDomain : ( domain, domain ) -> range -> domain, ticks : ( domain, domain ) -> Int -> List domain } -> Scale.Continuous.Continuous domain range"
      },
      {
        "name": "scale",
        "comment": " ",
        "type": "Scale.Continuous.Continuous domain range -> domain -> Maybe.Maybe range"
      },
      {
        "name": "ticks",
        "comment": " ",
        "type": "Scale.Continuous.Continuous domain range -> Int -> List domain"
      },
      {
        "name": "unscale",
        "comment": " ",
        "type": "Scale.Continuous.Continuous domain Float -> Float -> Maybe.Maybe domain"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Ordinal",
    "comment": "\n@docs Ordinal, ordinal, scale, ticks\n",
    "aliases": [],
    "types": [
      {
        "name": "Ordinal",
        "comment": " ",
        "args": [
          "domain",
          "range"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "ordinal",
        "comment": " ",
        "type": "{ a | domain : List domain, mapping : domain -> Maybe.Maybe range } -> Scale.Ordinal.Ordinal domain range"
      },
      {
        "name": "scale",
        "comment": " ",
        "type": "Scale.Ordinal.Ordinal domain range -> domain -> Maybe.Maybe range"
      },
      {
        "name": "ticks",
        "comment": " ",
        "type": "Scale.Ordinal.Ordinal domain range -> a -> List domain"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Scale.Config",
    "comment": " Scale Configuration\n\n@docs OutsideDomain\n\n",
    "aliases": [],
    "types": [
      {
        "name": "OutsideDomain",
        "comment": " Options for the behavior of a `Scale` when the value it is applied to lies\noutside of the defined domain\n",
        "args": [],
        "cases": [
          [
            "Clamp",
            []
          ],
          [
            "Discard",
            []
          ],
          [
            "Allow",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  }
]