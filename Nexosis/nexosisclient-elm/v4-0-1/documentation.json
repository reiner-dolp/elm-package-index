[
  {
    "name": "Nexosis.Api.Imports",
    "comment": " Functions for interacting with the `/imports` endpoint.\n\n\n## GET\n\n@docs get\n\n\n## POST\n\nData can be imported from a public facing Url, an S3 bucket, or an Azure blob. Use the specific function and request to start an file import.\n\n@docs postUrl, PostUrlRequest, postS3, PostS3Request, postAzure, PostAzureRequest\n\n",
    "aliases": [
      {
        "name": "PostAzureRequest",
        "comment": " The name of the `DataSet` to import data to, all of the details needed to download the data from Azure.\n",
        "args": [],
        "type": "{ dataSetName : String , connectionString : String , container : String , blob : String }"
      },
      {
        "name": "PostS3Request",
        "comment": " The name of the `DataSet` to import data to, all of the details needed to download the data from S3.\n",
        "args": [],
        "type": "{ dataSetName : String , bucket : String , path : String , region : Maybe.Maybe String , accessKeyId : Maybe.Maybe String , secretAccessKey : Maybe.Maybe String }"
      },
      {
        "name": "PostUrlRequest",
        "comment": " The name of the `DataSet` to import data to, the publicly accessible Url to import from, and an optional unique key column.\n",
        "args": [],
        "type": "{ dataSetName : String, url : String, key : Maybe.Maybe String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "get",
        "comment": " GET a specific `Import` by id. Useful for checking the `Status`.\n",
        "type": "Nexosis.ClientConfig -> String -> Http.Request Nexosis.Types.Import.ImportDetail"
      },
      {
        "name": "postAzure",
        "comment": " POST to start a data `Import` from Azure.\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Api.Imports.PostAzureRequest -> Http.Request Nexosis.Types.Import.ImportDetail"
      },
      {
        "name": "postS3",
        "comment": " POST to start a data `Import` from S3.\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Api.Imports.PostS3Request -> Http.Request Nexosis.Types.Import.ImportDetail"
      },
      {
        "name": "postUrl",
        "comment": " POST to start a data `Import` from a public Url.\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Api.Imports.PostUrlRequest -> Http.Request Nexosis.Types.Import.ImportDetail"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Api.Sessions",
    "comment": " Functions for interacting with the `/sessions` endpoint.\n\n\n## GET\n\nRetrieve information about `Sessions`.\n\n@docs get, getForDataset, getOne\n\n\n## POST\n\nStart running a new `Session`. The type of `Session` will depend on the machine leaning problem you are trying to solve.\n\nFor some higher level information about Sessions, refer to [the documentation](https://docs.nexosis.com/guides/sessions).\n\n@docs postModel, postForecast, postImpact\n\n\n## Request Types\n\nThese types are used to specify parameters about a `Session`.\n\n@docs ModelSessionRequest, ForecastSessionRequest, ImpactSessionRequest\n\n\n## Results\n\nOnce a `Session` is complete, results generated by the Session will be available. Different kinds of sessions will produce different result types.\n\n@docs results, resultsCsv, getConfusionMatrix, getDistanceMetrics, getDistanceMetricsCsv\n\n\n## DELETE\n\n@docs delete\n\n",
    "aliases": [
      {
        "name": "ForecastSessionRequest",
        "comment": " Details used to Forecast using time series algorithms. `startDate` and `endDate` is the date range that should be forecasted.\n`resultInterval` is the time interval at which the forecast should be made.\n",
        "args": [],
        "type": "{ name : Maybe.Maybe String , dataSourceName : Nexosis.Types.DataSet.DataSetName , columns : List Nexosis.Types.Columns.ColumnMetadata , missingValues : List String , dates : { startDate : Time.ZonedDateTime.ZonedDateTime , endDate : Time.ZonedDateTime.ZonedDateTime } , resultInterval : Nexosis.Types.Session.ResultInterval }"
      },
      {
        "name": "ImpactSessionRequest",
        "comment": " Details used to determine Impact of an event using time series algorithms. `startDate` and `endDate` is the date range that should be measured for Impact.\n`resultInterval` is the time interval at which the Impact should be made. `eventName` is a description name to help identify what impact is being measured in the date range.\n",
        "args": [],
        "type": "{ name : Maybe.Maybe String , dataSourceName : Nexosis.Types.DataSet.DataSetName , columns : List Nexosis.Types.Columns.ColumnMetadata , missingValues : List String , dates : { startDate : Time.ZonedDateTime.ZonedDateTime , endDate : Time.ZonedDateTime.ZonedDateTime } , eventName : String , resultInterval : Nexosis.Types.Session.ResultInterval }"
      },
      {
        "name": "ModelSessionRequest",
        "comment": " Details used to build a `Model`. Provided `ColumnMetadata` will override the metadata of a `DataSet`.\n`balance` is only used for `Classification`, and `containsAnomalies` is only used for `AnomalyDetection`.\n",
        "args": [],
        "type": "{ name : Maybe.Maybe String , dataSourceName : Nexosis.Types.DataSet.DataSetName , columns : List Nexosis.Types.Columns.ColumnMetadata , missingValues : List String , predictionDomain : Nexosis.Types.PredictionDomain.PredictionDomain , balance : Maybe.Maybe Bool , containsAnomalies : Maybe.Maybe Bool }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "delete",
        "comment": " DELETE a single `Session`.\n",
        "type": "Nexosis.ClientConfig -> String -> Http.Request ()"
      },
      {
        "name": "get",
        "comment": " GET a listing of `Sessions`, wth page limits and sorting information.\n",
        "type": "Nexosis.ClientConfig -> Int -> Int -> Nexosis.Types.SortParameters.SortParameters -> Http.Request Nexosis.Types.Session.SessionList"
      },
      {
        "name": "getConfusionMatrix",
        "comment": " GET a Confusion Matrix generated from the results of a `Classification` `Session`.\n",
        "type": "Nexosis.ClientConfig -> String -> Int -> Int -> Http.Request Nexosis.Types.ConfusionMatrix.ConfusionMatrix"
      },
      {
        "name": "getDistanceMetrics",
        "comment": " GET the Mahalanobis Distances calculated by an Anomaly Detection `Session`.\n",
        "type": "Nexosis.ClientConfig -> String -> Int -> Int -> Http.Request Nexosis.Types.DistanceMetric.DistanceMetrics"
      },
      {
        "name": "getDistanceMetricsCsv",
        "comment": " GET the Mahalanobis Distances calculated by an Anomaly Detection `Session` as a CSV String.\n",
        "type": "Nexosis.ClientConfig -> String -> Int -> Int -> Http.Request String"
      },
      {
        "name": "getForDataset",
        "comment": " GET a list of `Session` filtered by the `DataSetName`.\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Types.DataSet.DataSetName -> Http.Request Nexosis.Types.Session.SessionList"
      },
      {
        "name": "getOne",
        "comment": " GET a single `Session` by id.\n",
        "type": "Nexosis.ClientConfig -> String -> Http.Request Nexosis.Types.Session.SessionData"
      },
      {
        "name": "postForecast",
        "comment": " POST a `ForecastSessionRequest`\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Api.Sessions.ForecastSessionRequest -> Http.Request Nexosis.Types.Session.SessionData"
      },
      {
        "name": "postImpact",
        "comment": " POST a `ImpactSessionRequest`\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Api.Sessions.ImpactSessionRequest -> Http.Request Nexosis.Types.Session.SessionData"
      },
      {
        "name": "postModel",
        "comment": " POST a `ModelSessionRequest`\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Api.Sessions.ModelSessionRequest -> Http.Request Nexosis.Types.Session.SessionData"
      },
      {
        "name": "results",
        "comment": " GET results of a completed `Session`.\n",
        "type": "Nexosis.ClientConfig -> String -> Int -> Int -> Http.Request Nexosis.Types.Session.SessionResults"
      },
      {
        "name": "resultsCsv",
        "comment": " GET the results as a CSV file, in a `String`.\n",
        "type": "Nexosis.ClientConfig -> String -> Http.Request String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Api.Models",
    "comment": " Functions for interacting with the `/models` endpoint.\n\n\n## GET\n\nRetrieve information about `Models` that have been created by a `Session`.\n\n@docs get, getOne\n\n\n## Predict\n\nUpload new rows of data which to be predicted by the specified `Model`.\n\n@docs predict, predictRaw\n\n\n## DELETE\n\n@docs delete\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "delete",
        "comment": " DELETE a single `Model`.\n",
        "type": "Nexosis.ClientConfig -> String -> Http.Request ()"
      },
      {
        "name": "get",
        "comment": " GET a listing of `Models`, with page limits and sorting information.\n",
        "type": "Nexosis.ClientConfig -> Int -> Int -> Nexosis.Types.SortParameters.SortParameters -> Http.Request Nexosis.Types.Model.ModelList"
      },
      {
        "name": "getOne",
        "comment": " GET details about a single `Model`.\n",
        "type": "Nexosis.ClientConfig -> String -> Http.Request Nexosis.Types.Model.ModelData"
      },
      {
        "name": "predict",
        "comment": " POST data to predict. This should be the `Id` of a `Model`, the `String` content that should be predicted in CSV or JSON format, and the ContentType of the data, either `\"text/csv\"` or `\"application/json\"`.\n",
        "type": "Nexosis.ClientConfig -> String -> String -> String -> Http.Request Nexosis.Types.Model.PredictionResult"
      },
      {
        "name": "predictRaw",
        "comment": " Same as [`predict`](#predict), but with an additional parameter to specify the return format of the response, either `\"text/csv\"` or `\"application/json\"`.\n",
        "type": "Nexosis.ClientConfig -> String -> String -> String -> String -> Http.Request String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Api.Data",
    "comment": " Functions for interacting with the `/data` endpoint.\n\n\n## GET\n\n@docs get, getRetrieveDetail, getDataByDateRange, getStats, getStatsForColumn\n\n\n## PUT\n\n@docs put, updateMetadata, MetadataUpdateRequest, createDataSetWithKey, setMissingValues\n\n\n## DELETE\n\n@docs delete\n\n",
    "aliases": [
      {
        "name": "MetadataUpdateRequest",
        "comment": " Details used when changing just the `ColumnMetadata` of a `DataSet`.\n",
        "args": [],
        "type": "{ dataSetName : Nexosis.Types.DataSet.DataSetName , columns : List Nexosis.Types.Columns.ColumnMetadata }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "createDataSetWithKey",
        "comment": " PUT to create an empty `DataSet`, specifying only name of the key column.\n",
        "type": "Nexosis.ClientConfig -> String -> String -> Http.Request ()"
      },
      {
        "name": "delete",
        "comment": " DELETE a specific `DataSet`. Cascade options are used to cascade delete other resources, such as `Sessions` or `Models`\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Types.DataSet.DataSetName -> Set.Set String -> Http.Request ()"
      },
      {
        "name": "get",
        "comment": " GET a list of `DataSet`, with paging limits and sorting information.\n",
        "type": "Nexosis.ClientConfig -> Int -> Int -> Nexosis.Types.SortParameters.SortParameters -> Http.Request Nexosis.Types.DataSet.DataSetList"
      },
      {
        "name": "getDataByDateRange",
        "comment": " GET data from a `DataSet` filtered by a specific date range. Used for time-series `DataSets`.\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Types.DataSet.DataSetName -> Maybe.Maybe ( String, String ) -> List String -> Http.Request Nexosis.Types.DataSet.DataSetData"
      },
      {
        "name": "getRetrieveDetail",
        "comment": " GET a single `DataSet`, with paging on the actual contents of the `DataSet`.\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Types.DataSet.DataSetName -> Int -> Int -> Http.Request Nexosis.Types.DataSet.DataSetData"
      },
      {
        "name": "getStats",
        "comment": " GET stats information about a specific `DataSet`.\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Types.DataSet.DataSetName -> Http.Request Nexosis.Types.DataSet.DataSetStats"
      },
      {
        "name": "getStatsForColumn",
        "comment": " GET stats information for a specific `DataSet` column, requesting that the stats be calculated as a specific `DataType`.\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Types.DataSet.DataSetName -> String -> Nexosis.Types.Columns.DataType -> Http.Request Nexosis.Types.DataSet.DataSetStats"
      },
      {
        "name": "put",
        "comment": " PUT - Upserts data to a dataset. If the `DataSet` has a key column, rows with the same key will be overwritten. If not, all rows will be appended to the existing `DataSet`.\n",
        "type": "Nexosis.ClientConfig -> String -> String -> String -> Http.Request ()"
      },
      {
        "name": "setMissingValues",
        "comment": " PUT to set what values are considered 'missing' in a `DataSet`. A list of values like \"N/A\" or \"null\" can be set, and will be treated as missing values.\n",
        "type": "Nexosis.ClientConfig -> String -> List String -> Http.Request ()"
      },
      {
        "name": "updateMetadata",
        "comment": " PUT Changes just the `ColumnMetadata` of a `DataSet`.\n",
        "type": "Nexosis.ClientConfig -> Nexosis.Api.Data.MetadataUpdateRequest -> Http.Request ()"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.Import",
    "comment": " Information about the Imports that can be found at the `/imports` endpoint, <Nexosis.Api.Imports>.\n\n@docs ImportDetail, ImportType\n\n",
    "aliases": [
      {
        "name": "ImportDetail",
        "comment": " Detail information about a specific Import request.\n",
        "args": [],
        "type": "{ importId : String , importType : Nexosis.Types.Import.ImportType , status : Nexosis.Types.Status.Status , dataSetName : Nexosis.Types.DataSet.DataSetName , parameters : Dict.Dict String (Maybe.Maybe String) , requestedDate : Time.DateTime.DateTime , statusHistory : List Nexosis.Types.Status.HistoryRecord , messages : List Nexosis.Types.Message.ObjectMessage , columns : List Nexosis.Types.Columns.ColumnMetadata }"
      }
    ],
    "types": [
      {
        "name": "ImportType",
        "comment": " The source where the import is coming from.\n",
        "args": [],
        "cases": [
          [
            "S3",
            []
          ],
          [
            "Url",
            []
          ],
          [
            "Azure",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.Session",
    "comment": " A `Session` is the representation of the long running processing done when building a machine learning model.\n\nNew `Sessions` can be requested, and when completed, results can be retrieved, and the generated machine learning `Models` can be called on to make predictions on new data.\n\nRefer to our [documentation on Sessions](https://docs.nexosis.com/guides/sessions) for more information.\n\n@docs SessionData, SessionList, SessionResults, ResultInterval\n\n",
    "aliases": [
      {
        "name": "SessionData",
        "comment": " This is the information about a specific `Session`. Some values may not be available until the\n`Session` has completed successfully.\n",
        "args": [],
        "type": "{ sessionId : String , status : Nexosis.Types.Status.Status , predictionDomain : Nexosis.Types.PredictionDomain.PredictionDomain , columns : List Nexosis.Types.Columns.ColumnMetadata , availablePredictionIntervals : List String , startDate : Maybe.Maybe String , endDate : Maybe.Maybe String , resultInterval : Maybe.Maybe Nexosis.Types.Session.ResultInterval , requestedDate : Time.ZonedDateTime.ZonedDateTime , statusHistory : List Nexosis.Types.Status.HistoryRecord , extraParameters : Dict.Dict String String , messages : List Nexosis.Types.Message.ObjectMessage , name : String , dataSourceName : String , targetColumn : Maybe.Maybe String , links : List Nexosis.Types.Link.Link , modelId : Maybe.Maybe String , algorithm : Maybe.Maybe Nexosis.Types.Algorithm.Algorithm , approximateCompletionPercentage : Int }"
      },
      {
        "name": "SessionList",
        "comment": " A `List` of `SessionData`, with paging information.\n",
        "args": [],
        "type": "{ items : List Nexosis.Types.Session.SessionData , pageNumber : Int , totalPages : Int , pageSize : Int , totalCount : Int }"
      },
      {
        "name": "SessionResults",
        "comment": " The results of a Session. The information returned will vary based on the type of `Session` that was run.\n",
        "args": [],
        "type": "{ metrics : Dict.Dict String Float , data : List (Dict.Dict String String) }"
      }
    ],
    "types": [
      {
        "name": "ResultInterval",
        "comment": " The interval at which to calculate results when requesting a `Forecast` or `Impact` session.\n",
        "args": [],
        "cases": [
          [
            "Hour",
            []
          ],
          [
            "Day",
            []
          ],
          [
            "Week",
            []
          ],
          [
            "Month",
            []
          ],
          [
            "Year",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.Model",
    "comment": " In this package, `Model` refers to a machine learning `Model`, used to make predictions on new data, rather than the `Model` in The Elm Architecture.\n\nAfter a `Session` has completed, a `Model` will be available. This `Model` can be used to make predictions by using the <Nexosis.Api.Mdoels> prediction functions.\n\nRefer to our [documentation](https://docs.nexosis.com/guides/sessions) for more information.\n\n@docs ModelData, ModelList, PredictionResult\n\n",
    "aliases": [
      {
        "name": "ModelData",
        "comment": " ModelData\nRepresentation of a single Model. Returned from the `/models` endpoint called by <Nexosis.Api.Models>.\n",
        "args": [],
        "type": "{ modelId : String , sessionId : String , predictionDomain : Nexosis.Types.PredictionDomain.PredictionDomain , dataSourceName : String , columns : List Nexosis.Types.Columns.ColumnMetadata , createdDate : Time.ZonedDateTime.ZonedDateTime , algorithm : Nexosis.Types.Algorithm.Algorithm , modelName : Maybe.Maybe String , lastUsedDate : Maybe.Maybe Time.ZonedDateTime.ZonedDateTime , metrics : Dict.Dict String Float , links : List Nexosis.Types.Link.Link }"
      },
      {
        "name": "ModelList",
        "comment": " A `List` of `ModelData`, with paging information.\n",
        "args": [],
        "type": "{ items : List Nexosis.Types.Model.ModelData , pageNumber : Int , totalPages : Int , pageSize : Int , totalCount : Int }"
      },
      {
        "name": "PredictionResult",
        "comment": " The results returned when calling [`predict`](Nexosis.Api.Models#predict) on a `Model`.\n",
        "args": [],
        "type": "{ data : List (Dict.Dict String String) , messages : List Nexosis.Types.Message.ObjectMessage }"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Decoders.Columns",
    "comment": " Decoders for working with `ColumnMetadata`.\n\n@docs decodeColumnMetadata, decodeColumnStatsDict\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decodeColumnMetadata",
        "comment": " ",
        "type": "Json.Decode.Decoder (List Nexosis.Types.Columns.ColumnMetadata)"
      },
      {
        "name": "decodeColumnStatsDict",
        "comment": " ",
        "type": "Json.Decode.Decoder Nexosis.Types.Columns.ColumnStatsDict"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.DataSet",
    "comment": " Representations of DataSets. Used when interacting with the `/data` and `/imports` endpoints.\n\nRefer to our [documentation on DataSets](https://docs.nexosis.com/guides/retrieving-data) for more information.\n\n@docs DataSet, DataSetList, DataSetData, DataSetStats, DataSetName, toDataSetName, dataSetNameToString\n\n",
    "aliases": [
      {
        "name": "DataSet",
        "comment": " Summary information about a `DataSet`, returned within a [`DataSetList`](#DataSetList).\n",
        "args": [],
        "type": "{ dataSetName : Nexosis.Types.DataSet.DataSetName , dataSetSize : Int , isTimeSeries : Bool , dateCreated : Time.ZonedDateTime.ZonedDateTime , lastModified : Time.ZonedDateTime.ZonedDateTime , rowCount : Int , columnCount : Int }"
      },
      {
        "name": "DataSetData",
        "comment": " Returned from the `/data/{dataSetName}` endpoint called by [Nexosis.Api.Data.getRetrieveDetail](Nexosis-Api-Data#getRetrieveDetail)\nDetails of the `Dataset`, a List of data, and paging information for the data.\n",
        "args": [],
        "type": "{ dataSetName : Nexosis.Types.DataSet.DataSetName , dataSetSize : Int , isTimeSeries : Bool , columns : List Nexosis.Types.Columns.ColumnMetadata , missingValues : List String , data : Nexosis.Types.Data.Data , pageNumber : Int , totalPages : Int , pageSize : Int , totalCount : Int , dateCreated : Time.ZonedDateTime.ZonedDateTime , lastModified : Time.ZonedDateTime.ZonedDateTime , rowCount : Int }"
      },
      {
        "name": "DataSetList",
        "comment": " Returned from `/data` endpoint called by [Nexosis.Api.Data.get](Nexosis-Api-Data#get)\nA List of [DataSet](#DataSet), with paging information.\n",
        "args": [],
        "type": "{ items : List Nexosis.Types.DataSet.DataSet , pageNumber : Int , totalPages : Int , pageSize : Int , totalCount : Int }"
      },
      {
        "name": "DataSetStats",
        "comment": " Stats about a [`DataSet`](#DataSet). Returned from `/data/stats` endpoint called by [`Nexosis.Api.Data.getStats`](Nexosis-Api-Data#getStats)\n",
        "args": [],
        "type": "{ dataSetName : String , columns : Nexosis.Types.Columns.ColumnStatsDict }"
      }
    ],
    "types": [
      {
        "name": "DataSetName",
        "comment": " `DataSetName` is an opaque type, used to differentiate if from a normal string. Use [`toDataSetName`](#toDataSetName) and [`dataSetNameToString`](#dataSetNameToString) to wrap and unwrap if needed.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "dataSetNameToString",
        "comment": " ",
        "type": "Nexosis.Types.DataSet.DataSetName -> String"
      },
      {
        "name": "toDataSetName",
        "comment": " ",
        "type": "String -> Nexosis.Types.DataSet.DataSetName"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Api.Metrics",
    "comment": " This endpoint returns static information about the metrics that the Api will calculate.\nThis is really just to provide up to date text descriptions and names for metrics that may be shown to a user.\n\n@docs get, Metric\n\n",
    "aliases": [
      {
        "name": "Metric",
        "comment": " Metrics information.\n",
        "args": [],
        "type": "{ key : String, name : String, description : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "get",
        "comment": " GET a list of `Metric` definitions that are reported by the Api.\n",
        "type": "Nexosis.ClientConfig -> Http.Request (List Nexosis.Api.Metrics.Metric)"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.Columns",
    "comment": " Columns can be configured on the `DataSet` or at session submission time, which tell the machine learning algorithms how to process the data.\n\nRefer to the docs for more information about [ColumnMetadata](https://docs.nexosis.com/guides/column-metadata).\n\n@docs ColumnMetadata, DataType, Role\n\n\n# Stats\n\n@docs ColumnStatsDict, ColumnStats, DistributionShape\n\n",
    "aliases": [
      {
        "name": "ColumnMetadata",
        "comment": " ",
        "args": [],
        "type": "{ dataType : Nexosis.Types.Columns.DataType , role : Nexosis.Types.Columns.Role , imputation : Nexosis.Types.ImputationStrategy.ImputationStrategy , aggregation : Nexosis.Types.AggregationStrategy.AggregationStrategy , name : String }"
      },
      {
        "name": "ColumnStats",
        "comment": " Stats that have been calculated for a `Column` on a `DataSet`. Some types are represented as `String` as\ndifferent a `DataType` can return that value in a different format.\n",
        "args": [],
        "type": "{ distinctCount : Int , distribution : List Nexosis.Types.Columns.DistributionShape , errorCount : Int , lastCalculated : Time.ZonedDateTime.ZonedDateTime , max : String , mean : Float , median : Float , min : String , missingCount : Int , mode : String , stddev : Float , suggestedType : String , totalCount : Int , variance : Float }"
      },
      {
        "name": "ColumnStatsDict",
        "comment": " A `Dict` of stats\n",
        "args": [],
        "type": "Dict.Dict String Nexosis.Types.Columns.ColumnStats"
      }
    ],
    "types": [
      {
        "name": "DataType",
        "comment": " The `DataType` of the data in this column. This determines how the machine learning algorithms will process the data.\n",
        "args": [],
        "cases": [
          [
            "Measure",
            []
          ],
          [
            "String",
            []
          ],
          [
            "Numeric",
            []
          ],
          [
            "Logical",
            []
          ],
          [
            "Date",
            []
          ],
          [
            "Text",
            []
          ]
        ]
      },
      {
        "name": "DistributionShape",
        "comment": " A distribution is calculated for a column, and could be either bucketed `Counts` of values, or `Ranges`.\n",
        "args": [],
        "cases": [
          [
            "Counts",
            [
              "String",
              "Int"
            ]
          ],
          [
            "Ranges",
            [
              "String",
              "String",
              "Int"
            ]
          ]
        ]
      },
      {
        "name": "Role",
        "comment": " The `Role` of the column. `Features` will be used by the machine learning algorithms in calculations,\none column should be designated as the `Target`, which is what the algorithms will try to predict. `None` will\nexclude the column from the dataset. `Timestamp` and `Key` are used as unique identifiers for the row of data.\n",
        "args": [],
        "cases": [
          [
            "None",
            []
          ],
          [
            "Timestamp",
            []
          ],
          [
            "Target",
            []
          ],
          [
            "Feature",
            []
          ],
          [
            "Key",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.DistanceMetric",
    "comment": " Distance metrics are calculated for Anomaly Detection `Sessions`. This is the Mahalanobis Distance of the items in the `DataSet`.\n\n@docs DistanceMetrics, DistanceValue, fromDistanceMetrics\n\n",
    "aliases": [
      {
        "name": "DistanceMetrics",
        "comment": " Distance Metric information for the `DataSet`, as calculated during the `Session`.\n",
        "args": [],
        "type": "{ dataSourceName : String , modelId : String , sessionId : String , sessionName : String , data : Nexosis.Types.Data.Data , pageNumber : Int , pageSize : Int , totalCount : Int , totalPages : Int }"
      },
      {
        "name": "DistanceValue",
        "comment": " Distance an Anomaly values.\n",
        "args": [],
        "type": "{ anomaly : Float, distance : Float }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "fromDistanceMetrics",
        "comment": " Convenience function to go from a full `DistanceMetrics` response to just a list of `DistanceValue`.\n",
        "type": "Nexosis.Types.DistanceMetric.DistanceMetrics -> List Nexosis.Types.DistanceMetric.DistanceValue"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.ImputationStrategy",
    "comment": " The Imputation Strategy to use when filling in missing values in a `DataSet`. This is an option provided on [ColumnMetadata](Nexosis.Types.Columns#ColumnMetadata).\n\nRefer to the docs for more information about [ColumnMetadata](https://docs.nexosis.com/guides/column-metadata).\n\n@docs ImputationStrategy\n\n",
    "aliases": [],
    "types": [
      {
        "name": "ImputationStrategy",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "Zeroes",
            []
          ],
          [
            "Mean",
            []
          ],
          [
            "Median",
            []
          ],
          [
            "Mode",
            []
          ],
          [
            "Min",
            []
          ],
          [
            "Max",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.Data",
    "comment": "\n\n@docs Data\n\n",
    "aliases": [
      {
        "name": "Data",
        "comment": " Alias for a `List` of `Dict String String`. Returned from several different Api calls.\n",
        "args": [],
        "type": "List (Dict.Dict String String)"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.PredictionDomain",
    "comment": " This specifies the broad class of machine learning algorithms that should be used when running a `Session`.\n\nFor more information about these types can be found [in our documentation](https://docs.nexosis.com/guides/how-it-works#session).\n\n@docs PredictionDomain\n\n",
    "aliases": [],
    "types": [
      {
        "name": "PredictionDomain",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "Regression",
            []
          ],
          [
            "Classification",
            []
          ],
          [
            "Forecast",
            []
          ],
          [
            "Impact",
            []
          ],
          [
            "Anomalies",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.Status",
    "comment": " Status is reported on any long running processing that the Nexosis Api may be doing. These are mostly `Sessions` and `Imports`.\n\n@docs Status, HistoryRecord\n\n",
    "aliases": [
      {
        "name": "HistoryRecord",
        "comment": " The history of when status was changed from one value to another.\n",
        "args": [],
        "type": "{ date : Time.ZonedDateTime.ZonedDateTime , status : Nexosis.Types.Status.Status }"
      }
    ],
    "types": [
      {
        "name": "Status",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "Requested",
            []
          ],
          [
            "Started",
            []
          ],
          [
            "Completed",
            []
          ],
          [
            "Cancelled",
            []
          ],
          [
            "Failed",
            []
          ],
          [
            "CancellationPending",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.Message",
    "comment": " Messages are returned on many different Api endpoints. Generally, these show additional information about an Api Resource.\nAddditionally, you can query for all messages on an organization, session, or import.\n\n@docs ObjectMessage, Message, Severity, MessageList\n\n",
    "aliases": [
      {
        "name": "Message",
        "comment": " Detailed Message information from /messages endpoint.\n",
        "args": [],
        "type": "{ messageId : String , content : String , severity : Nexosis.Types.Message.Severity , userId : String , organizationId : String , createdAt : String , relatedId : String , relatedTo : String }"
      },
      {
        "name": "MessageList",
        "comment": " Returned from `/messages` endpoint called by [Nexosis.Api.Messages.get](Nexosis-Api-Messages#get)\nA List of [Message](#Message), with paging information.\n",
        "args": [],
        "type": "{ items : List Nexosis.Types.Message.Message , pageNumber : Int , totalPages : Int , pageSize : Int , totalCount : Int }"
      },
      {
        "name": "ObjectMessage",
        "comment": " Message as given on an object\n",
        "args": [],
        "type": "{ severity : Nexosis.Types.Message.Severity, message : String }"
      }
    ],
    "types": [
      {
        "name": "Severity",
        "comment": " Message Severity\n",
        "args": [],
        "cases": [
          [
            "Status",
            []
          ],
          [
            "Debug",
            []
          ],
          [
            "Informational",
            []
          ],
          [
            "Warning",
            []
          ],
          [
            "Error",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.ConfusionMatrix",
    "comment": " Classification `Sessions` will generate a `ConfusionMatrix`, which shows how well the `Model` was able to choose the correct class for a row.\n\n@docs ConfusionMatrix\n\n",
    "aliases": [
      {
        "name": "ConfusionMatrix",
        "comment": " ",
        "args": [],
        "type": "{ classes : Array.Array String , confusionMatrix : Array.Array (Array.Array Int) }"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.SortParameters",
    "comment": " Api calls that return lists of results require a sort order and direction in order to determine how the results\nshould be returned.\n\n@docs SortParameters, SortDirection\n\n",
    "aliases": [
      {
        "name": "SortParameters",
        "comment": " The `sortName` that can be used is specific to the endpoint being called.\nRefer to the full [Api documentation](https://developers.nexosis.com/docs/services/98847a3fbbe64f73aa959d3cededb3af/operations/datasets-list-all?) for the list of supported values.\n",
        "args": [],
        "type": "{ sortName : String , direction : Nexosis.Types.SortParameters.SortDirection }"
      }
    ],
    "types": [
      {
        "name": "SortDirection",
        "comment": " Direction in which to return the results.\n",
        "args": [],
        "cases": [
          [
            "Ascending",
            []
          ],
          [
            "Descending",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.Link",
    "comment": " Links are returned on many different endpoint calls, and refer to different related objects in the Api.\n\n@docs Link\n\n",
    "aliases": [
      {
        "name": "Link",
        "comment": " ",
        "args": [],
        "type": "{ rel : String, href : String }"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.Algorithm",
    "comment": " Details about a machine learning algorithm.\n\n@docs Algorithm\n\n",
    "aliases": [
      {
        "name": "Algorithm",
        "comment": " ",
        "args": [],
        "type": "{ name : String, description : String, key : Maybe.Maybe String }"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis",
    "comment": " Api Client for use with the [Nexosis Machine Learning Api](https://nexosis.com/). This package provides all of the Api endpoints and types for the request parameters\nand response results.\n\n\n# Configuration\n\nIn order to make calls to the Api, you will need an Api key, which you will find on your [Nexosis account](https://account.nexosis.com).\n\n@docs createConfigWithApiKey, ClientConfig\n\n\n# Advanced Configuration\n\nProvides some more advanced config options, but these will not be needed for most cases.\n\n@docs createConfigWithToken, createConfigWithApiKeyOptions, createConfigWithTokenOptions\n\n\n# Helpers\n\nThese are helpers mostly used within this package, and will probably not need to be used outside of it.\n\n@docs getBaseUrl, withAuthorization, withAppHeader\n\n",
    "aliases": [],
    "types": [
      {
        "name": "ClientConfig",
        "comment": " Type that holds configuration information that is required to call the Api. This should be carried around on in your model.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "createConfigWithApiKey",
        "comment": " Create a [`ClientConfig`](#ClientConfig) using only an Api key. Your Api key can be found on your [Nexosis account](https://account.nexosis.com).\n",
        "type": "String -> Nexosis.ClientConfig"
      },
      {
        "name": "createConfigWithApiKeyOptions",
        "comment": " Create a config with an Api key, specifying all available options.\n",
        "type": "{ apiKey : String , baseUrl : String , applicationName : Maybe.Maybe String } -> Nexosis.ClientConfig"
      },
      {
        "name": "createConfigWithToken",
        "comment": " Create a [`ClientConfig`](#ClientConfig) using only an Access Token.\n",
        "type": "String -> Nexosis.ClientConfig"
      },
      {
        "name": "createConfigWithTokenOptions",
        "comment": " Create a config with token authorization, specifying all available options.\n",
        "type": "{ token : String , baseUrl : String , applicationName : Maybe.Maybe String } -> Nexosis.ClientConfig"
      },
      {
        "name": "getBaseUrl",
        "comment": " Gets the base url that requests will be sent to.\n",
        "type": "Nexosis.ClientConfig -> String"
      },
      {
        "name": "withAppHeader",
        "comment": " Adds an application-name header, to help us distinguish where api calls are coming from\n",
        "type": "Nexosis.ClientConfig -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
      },
      {
        "name": "withAuthorization",
        "comment": " Adds auth headers to an HttpBuilder pipeline\n",
        "type": "Nexosis.ClientConfig -> HttpBuilder.RequestBuilder a -> HttpBuilder.RequestBuilder a"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Nexosis.Types.AggregationStrategy",
    "comment": " The Aggregation Strategy to use when rolling up time series data. This is an option provided on [ColumnMetadata](Nexosis.Types.Columns#ColumnMetadata).\n\nRefer to the docs for more information about [ColumnMetadata](https://docs.nexosis.com/guides/column-metadata).\n\n@docs AggregationStrategy\n\n",
    "aliases": [],
    "types": [
      {
        "name": "AggregationStrategy",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "Sum",
            []
          ],
          [
            "Mean",
            []
          ],
          [
            "Median",
            []
          ],
          [
            "Mode",
            []
          ],
          [
            "Min",
            []
          ],
          [
            "Max",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  }
]