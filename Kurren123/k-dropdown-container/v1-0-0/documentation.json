[{"name":"DropdownContainer","comment":" A dropdown container in elm which can keep open when the user clicks inside (if you so choose).\n\n\n# Stuff to do with your model\n\n@docs Visibility, State, initialState\n\n\n# Stuff to do with your update\n\n@docs dropDownCurrentlyClicked\n\n\n# Stuff to do with your view\n\n@docs Config, attributes, triggerAttributes\n\n","unions":[{"name":"State","comment":" The dropdown's internal state. This should be somewhere in your `model`,\nalong with a value indicating the dropdown's `Visibility`\n\n    type alias Model =\n    type alias Model =\n        { dropdownState : Dropdown.State\n        , dropdownVisbility : Dropdown.Visibility\n        }\n\n","args":[],"cases":[]},{"name":"Visibility","comment":" Whether the dropdown is visible\n","args":[],"cases":[["Open",[]],["Closed",[]]]}],"aliases":[{"name":"Config","comment":" The config for the dropdown. `setState` should be a message which\nupdates the dropdowns state. `dropdownBlur` is a message that is fired whenever\nthe dropdown or it's trigger loses focus. **NOTE**: `dropdownBlur` can occur when the user\nclicks into a child element of the dropdown, so when handling this message use\nthe `dropDownCurrentlyClicked` function to decide whether to close the dropdown on blur.\n\nA tab index must be given for the dropdown, otherwise it cannot recieve focus.\n\n","args":["msg"],"type":"{ setState : DropdownContainer.State -> msg, dropdownBlur : msg, tabIndex : Basics.Int }"}],"values":[{"name":"attributes","comment":" These go on the dropdown container itself, such as a `div`. You'll need to style the dropdown yourself.\nThe function accepts a dropdown state, a config and whether it should be visible or not (which can come from your model)\n\n    dropdownView : Model -> Html Msg\n    dropdownView model =\n        div\n            ([ style \"width\" \"150px\"\n            , style \"height\" \"200px\"\n            , style \"border\" \"1px solid black\"\n            ]\n                ++ Dropdown.attributes model.dropdownState dropDownConfig model.dropdownVisbility\n            )\n            [ button [] [ text \"Click here\" ] ]\n\n","type":"DropdownContainer.State -> DropdownContainer.Config msg -> DropdownContainer.Visibility -> List.List (Html.Attribute msg)"},{"name":"dropDownCurrentlyClicked","comment":" True if the user has pressed mousedown in the dropdown but\nnot yet released the mouse. This is useful when the `dropdownBlur` event has been\ntriggered and you need to decide whether you want to close the dropdown.\n\n    update : Msg -> Model -> Model\n    update msg model =\n        case msg of\n            DropdownBlur ->\n                if Dropdown.dropDownCurrentlyClicked model.dropdownState then\n                    model\n\n                else\n                    { model | dropdownVisbility = Dropdown.Closed }\n\n","type":"DropdownContainer.State -> Basics.Bool"},{"name":"initialState","comment":" Use this in the init of your app\n\n    initialModel : Model\n    initialModel =\n        { dropdownState = Dropdown.initialState\n        , dropdownVisbility = Dropdown.Closed\n        }\n\n","type":"DropdownContainer.State"},{"name":"triggerAttributes","comment":" Put these on your dropdown trigger: anything which causes a dropdown to open,\nlike a button or input text box. Remember to also set an event on the trigger to\nactually open the dropdown.\n\n    dropdownButton : Html Msg\n    dropdownButton =\n        button\n            ([ onClick OpenDropdown ] ++ Dropdown.triggerAttributes dropDownConfig)\n            [ text \"Open dropdown\" ]\n\n","type":"DropdownContainer.Config msg -> List.List (Html.Attribute msg)"}],"binops":[]}]