[
  {
    "name": "DateTimePicker",
    "comment": " DateTime Picker\n\n@docs DateTime, dateTime\n\n\n# View\n\n@docs datePicker, datePickerWithConfig, dateTimePicker, dateTimePickerWithConfig, timePicker, timePickerWithConfig\n\n\n# Initial\n\n@docs initialState, initialStateWithToday, initialCmd\n\n\n# Internal State\n\n@docs State\n\n",
    "aliases": [
      {
        "name": "DateTime",
        "comment": " The representation of a date and time in the picker\n",
        "args": [],
        "type": "DateTimePicker.DateTime.DateTime"
      },
      {
        "name": "State",
        "comment": " The state of the date time picker (for Internal Use)\n",
        "args": [],
        "type": "DateTimePicker.Internal.InternalState"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "datePicker",
        "comment": " Date Picker view function with default configuration.\n\nExample:\ntype alias Model = { datePickerState : DateTimePicker.State, value : Maybe DateTime.DateTime }\n\n    type Msg\n        = DatePickerChanged DateTimePicker.State (Maybe DateTime.DateTime)\n\n    view =\n        DateTimePicker.datePicker\n            DatePickerChanged\n            [ class \"my-datepicker\" ]\n            model.datePickerState\n            model.value\n\n",
        "type": "(DateTimePicker.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> msg) -> List (Html.Styled.Attribute msg) -> DateTimePicker.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> Html.Styled.Html msg"
      },
      {
        "name": "datePickerWithConfig",
        "comment": " Date Picker view function with custom configuration.\n\nExample:\ntype alias Model = { datePickerState : DateTimePicker.State, value : Maybe DateTime.DateTime }\n\n    type Msg\n        = DatePickerChanged DateTimePicker.State (Maybe DateTime.DateTime)\n\n    customConfig =\n        let\n            default =\n                DateTimePicker.defaultConfig DatePickerChanged\n        in\n        { default\n            | firstDayOfWeek = Date.Mon\n            , autoClose = True\n        }\n\n    view =\n        DateTimePicker.datePickerWithConfig\n            customConfig\n            DateTimePicker.defaultDatePickerConfig\n            [ class \"my-datepicker\" ]\n            model.datePickerState\n            model.value\n\n",
        "type": "DateTimePicker.Config.Config (DateTimePicker.Config.DatePickerConfig {}) msg -> List (Html.Styled.Attribute msg) -> DateTimePicker.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> Html.Styled.Html msg"
      },
      {
        "name": "dateTime",
        "comment": " Construct a DateTime\n",
        "type": "Int -> Date.Month -> Int -> Int -> Int -> DateTimePicker.DateTime.DateTime"
      },
      {
        "name": "dateTimePicker",
        "comment": " Date and Time Picker view with default configuration\nExample:\ntype alias Model = { dateTimePickerState : DateTimePicker.State, value : Maybe DateType }\n\n    type Msg\n        = DatePickerChanged DateTimePicker.State (Maybe DateTime.DateTime)\n\n    view =\n        DateTimePicker.dateTimePicker\n            DatePickerChanged\n            [ class \"my-datetimepicker\" ]\n            model.dateTimePickerState\n            model.value\n\n",
        "type": "(DateTimePicker.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> msg) -> List (Html.Styled.Attribute msg) -> DateTimePicker.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> Html.Styled.Html msg"
      },
      {
        "name": "dateTimePickerWithConfig",
        "comment": " Date and Time Picker view with custom configuration\nExample:\ntype alias Model = { dateTimePickerState : DateTimePicker.State, value : Maybe DateTime.DateTime }\n\n    type Msg\n        = DatePickerChanged DateTimePicker.State (Maybe DateTime.DateTime)\n\n    customConfig =\n        let\n            default =\n                DateTimePicker.defaultDateTimePickerConfig DatePickerChanged\n        in\n        { default\n            | firstDayOfWeek = Date.Mon\n            , autoClose = True\n        }\n\n    view =\n        DateTimePicker.dateTimePickerWithConfig\n            customConfig\n            [ class \"my-datetimepicker\" ]\n            model.dateTimePickerState\n            model.value\n\n",
        "type": "DateTimePicker.Config.Config (DateTimePicker.Config.DatePickerConfig DateTimePicker.Config.TimePickerConfig) msg -> List (Html.Styled.Attribute msg) -> DateTimePicker.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> Html.Styled.Html msg"
      },
      {
        "name": "initialCmd",
        "comment": " Initial Cmd to set the initial month to be displayed in the datepicker to the current month.\n",
        "type": "(DateTimePicker.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> msg) -> DateTimePicker.State -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "initialState",
        "comment": " Initial state of the DatePicker\n",
        "type": "DateTimePicker.State"
      },
      {
        "name": "initialStateWithToday",
        "comment": " Initial state of the DatePicker with today Date\n",
        "type": "DateTimePicker.DateTime.DateTime -> DateTimePicker.State"
      },
      {
        "name": "timePicker",
        "comment": " Time Picker view with default configuration\nExample:\ntype alias Model = { timePickerState : DateTimePicker.State, value : Maybe DateType }\n\n    type Msg\n        = TimePickerChanged DateTimePicker.State (Maybe DateTime.DateTime)\n\n    view =\n        DateTimePicker.timePicker\n            TimePickerChanged\n            [ class \"my-timepicker\" ]\n            model.timePickerState\n            model.value\n\n",
        "type": "(DateTimePicker.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> msg) -> List (Html.Styled.Attribute msg) -> DateTimePicker.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> Html.Styled.Html msg"
      },
      {
        "name": "timePickerWithConfig",
        "comment": " Time Picker view with custom configuration\nExample:\ntype alias Model = { timePickerState : DateTimePicker.State, value : Maybe DateTime.DateTime }\n\n    type Msg\n        = TimePickerChanged DateTimePicker.State (Maybe DateTime.DateTime)\n\n    customConfig =\n        let\n            default =\n                DateTimePicker.defaultTimePickerConfig TimePickerChanged\n        in\n        { default\n            | autoClose = True\n        }\n\n    view =\n        DateTimePicker.timePickerWithConfig\n            customConfig\n            [ class \"my-datetimepicker\" ]\n            model.timePickerState\n            model.value\n\n",
        "type": "DateTimePicker.Config.Config DateTimePicker.Config.TimePickerConfig msg -> List (Html.Styled.Attribute msg) -> DateTimePicker.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> Html.Styled.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "DateTimePicker.Config",
    "comment": " DateTimePicker configuration\n\n\n# Configuration\n\n@docs Config, DatePickerConfig, TimePickerConfig, NameOfDays, TimePickerType, Type\n\n\n# Default Configuration\n\n@docs defaultDatePickerConfig, defaultTimePickerConfig, defaultDateTimePickerConfig, defaultDateFromInput, defaultTimeFromInput, defaultDateTimeFromInput, defaultDateTimeToInput, defaultDateToInput, defaultTimeToInput\n\n",
    "aliases": [
      {
        "name": "Config",
        "comment": " Configuration\n\n  - `onChange` is the message for when the selected value and internal `State` in the date picker has changed.\n  - `autoClose` is a flag to indicate whether the dialog should be automatically closed when a date and/or time is selected.\n  - `parseInput` accepts a user string from the input element and attempts to convert it to a DateTime\n\n",
        "args": [
          "otherConfig",
          "msg"
        ],
        "type": "{ otherConfig | onChange : DateTimePicker.Config.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> msg, autoClose : Bool, usePicker : Bool, attributes : List (Html.Styled.Attribute msg), fromInput : String -> Maybe.Maybe DateTimePicker.DateTime.DateTime, toInput : DateTimePicker.DateTime.DateTime -> String }"
      },
      {
        "name": "DatePickerConfig",
        "comment": " Configuration for the DatePicker\n\n  - `nameOfDays` is the configuration for name of days in a week.\n  - `firstDayOfWeek` is the first day of the week.\n  - `allowYearNavigation` show/hide year navigation button.\n  - `earliestDate` if given, dates before this cannot be selected\n\n",
        "args": [
          "otherConfig"
        ],
        "type": "{ otherConfig | nameOfDays : DateTimePicker.Config.NameOfDays, firstDayOfWeek : Date.Day, allowYearNavigation : Bool, earliestDate : Maybe.Maybe DateTimePicker.DateTime.DateTime }"
      },
      {
        "name": "NameOfDays",
        "comment": " Configuration for name of days in a week.\n\nThis will be displayed as the calendar's header.\nDefault:\n\n  - sunday = \"Su\"\n  - monday = \"Mo\"\n  - tuesday = \"Tu\"\n  - wednesday = \"We\"\n  - thursday = \"Th\"\n  - friday = \"Fr\"\n  - saturday = \"Sa\"\n\n",
        "args": [],
        "type": "{ sunday : String , monday : String , tuesday : String , wednesday : String , thursday : String , friday : String , saturday : String }"
      },
      {
        "name": "TimePickerConfig",
        "comment": " Configuration for TimePicker\n\n  - `timePickerType` is the type of the time picker, either Analog or Digital\n\n",
        "args": [],
        "type": "{ timePickerType : DateTimePicker.Config.TimePickerType }"
      }
    ],
    "types": [
      {
        "name": "TimePickerType",
        "comment": " The type of time picker, can be either Digital or Analog\n",
        "args": [],
        "cases": [
          [
            "Digital",
            []
          ],
          [
            "Analog",
            []
          ]
        ]
      },
      {
        "name": "Type",
        "comment": " The type of picker (for Internal Use)\n",
        "args": [
          "msg"
        ],
        "cases": [
          [
            "DateType",
            [
              "DateTimePicker.Config.Config (DateTimePicker.Config.DatePickerConfig {}) msg"
            ]
          ],
          [
            "DateTimeType",
            [
              "DateTimePicker.Config.Config (DateTimePicker.Config.DatePickerConfig DateTimePicker.Config.TimePickerConfig) msg"
            ]
          ],
          [
            "TimeType",
            [
              "DateTimePicker.Config.Config DateTimePicker.Config.TimePickerConfig msg"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "defaultDateFromInput",
        "comment": " Default date parser\n",
        "type": "String -> Maybe.Maybe DateTimePicker.DateTime.DateTime"
      },
      {
        "name": "defaultDatePickerConfig",
        "comment": " Default configuration for DatePicker\n\n  - `onChange` No Default\n  - `autoClose` Default: True\n  - `nameOfDays` see `NameOfDays` for the default values.\n  - `firstDayOfWeek` Default: Sunday.\n  - `allowYearNavigation` Default : True\n  - `earliestDate` Default : Nothing\n\n",
        "type": "(DateTimePicker.Config.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> msg) -> DateTimePicker.Config.Config (DateTimePicker.Config.DatePickerConfig {}) msg"
      },
      {
        "name": "defaultDateTimeFromInput",
        "comment": " Default date and time parser\n",
        "type": "String -> Maybe.Maybe DateTimePicker.DateTime.DateTime"
      },
      {
        "name": "defaultDateTimePickerConfig",
        "comment": " Default configuration for DateTimePicker\n\n  - `onChange` No Default\n  - `dateFormatter` Default: `\"%m/%d/%Y\"`\n  - `dateTimeFormatter` Default: `\"%m/%d/%Y %I:%M %p\"`\n  - `autoClose` Default: False\n  - `nameOfDays` see `NameOfDays` for the default values.\n  - `firstDayOfWeek` Default: Sunday.\n  - `titleFormatter` Default: `\"%B %Y\"`\n  - `fullDateFormatter` Default: `\"%A, %B %d, %Y\"`\n  - `timeFormatter` Default: `\"%I:%M %p\"`\n  - `timePickerType` Default: Analog\n  - `allowYearNavigation` Default : True\n  - `earliestDate` Default : Nothing\n\n",
        "type": "(DateTimePicker.Config.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> msg) -> DateTimePicker.Config.Config (DateTimePicker.Config.DatePickerConfig DateTimePicker.Config.TimePickerConfig) msg"
      },
      {
        "name": "defaultDateTimeToInput",
        "comment": " Default date and time printer\n",
        "type": "DateTimePicker.DateTime.DateTime -> String"
      },
      {
        "name": "defaultDateToInput",
        "comment": " Default date printer\n",
        "type": "DateTimePicker.DateTime.DateTime -> String"
      },
      {
        "name": "defaultTimeFromInput",
        "comment": " Default time parser\n",
        "type": "String -> Maybe.Maybe DateTimePicker.DateTime.DateTime"
      },
      {
        "name": "defaultTimePickerConfig",
        "comment": " Default configuration for TimePicker\n\n  - `onChange` No Default\n  - `dateFormatter` Default: `\"%m/%d/%Y\"`\n  - `dateTimeFormatter` Default: `\"%m/%d/%Y %I:%M %p\"`\n  - `autoClose` Default: False\n  - `timeFormatter` Default: `\"%I:%M %p\"`\n  - `timePickerType` Default: Analog\n\n",
        "type": "(DateTimePicker.Config.State -> Maybe.Maybe DateTimePicker.DateTime.DateTime -> msg) -> DateTimePicker.Config.Config DateTimePicker.Config.TimePickerConfig msg"
      },
      {
        "name": "defaultTimeToInput",
        "comment": " Default time printer\n",
        "type": "DateTimePicker.DateTime.DateTime -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]