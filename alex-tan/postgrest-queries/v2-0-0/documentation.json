[{"name":"Postgrest.Queries","comment":"\n\n@docs PostgrestParam, PostgrestParams, PostgrestSelectable\n@docs allAttributes\n@docs attribute\n@docs attributes\n@docs combineParams\n@docs desc\n@docs eq\n@docs gt\n@docs gte\n@docs inList\n@docs int\n@docs limit\n@docs lt\n@docs lte\n@docs neq\n@docs normalizeParams\n@docs order\n@docs or\n@docs and\n@docs param\n@docs resource\n@docs select\n@docs string\n@docs true\n@docs value\n@docs ColumnOrder\n\n","unions":[{"name":"ColumnOrder","comment":" A type to specify whether you want an order to be ascending or descending.\n","args":[],"cases":[]},{"name":"PostgrestParam","comment":" An individual postgrest parameter.\n","args":[],"cases":[]},{"name":"PostgrestSelectable","comment":" A type representing which attributes and resources you want to select.\n","args":[],"cases":[]}],"aliases":[{"name":"PostgrestParams","comment":" A collection of parameters that make up a postgrest request.\n","args":[],"type":"List.List Postgrest.Queries.PostgrestParam"}],"values":[{"name":"allAttributes","comment":" When you want to select all attributes. This is only useful when used\nto select attributes of a resource or override default parameters in another function\nsince postgrest returns all attributes by default.\n","type":"List.List Postgrest.Queries.PostgrestSelectable"},{"name":"and","comment":" Join multiple conditions together with and.\n","type":"List.List Postgrest.Queries.PostgrestParam -> Postgrest.Queries.PostgrestParam"},{"name":"attribute","comment":" When you want to select a certain column.\n","type":"String.String -> Postgrest.Queries.PostgrestSelectable"},{"name":"attributes","comment":" Shorthand for attributes, when you don't need to specify nested resources:\n\n    -- Short version\n    attributes [ \"id\" \"name\" ]\n\n    -- Long version\n    [ attribute \"id\"\n    , attribute \"name\"\n    ]\n\n","type":"List.List String.String -> List.List Postgrest.Queries.PostgrestSelectable"},{"name":"combineParams","comment":" Takes a default set of params and a custom set of params and prefers the second set.\nUseful when you're constructing reusable functions that make similar queries.\n","type":"Postgrest.Queries.PostgrestParams -> Postgrest.Queries.PostgrestParams -> Postgrest.Queries.PostgrestParams"},{"name":"desc","comment":" Used in combination with `order` to sort results descending.\n","type":"String.String -> Postgrest.Queries.ColumnOrder"},{"name":"eq","comment":" Used to indicate you need a column to be equal to a certain value.\n","type":"Postgrest.Queries.PostgrestValue -> Postgrest.Queries.PostgrestClause"},{"name":"gt","comment":" Used to indicate you need a column to be greater than a certain value.\n","type":"Basics.Float -> Postgrest.Queries.PostgrestClause"},{"name":"gte","comment":" Used to indicate you need a column to be greater than or equal than a certain value.\n","type":"Basics.Float -> Postgrest.Queries.PostgrestClause"},{"name":"inList","comment":" Used to indicate you need a column to be within a certain list of values.\n","type":"(a -> Postgrest.Queries.PostgrestValue) -> List.List a -> Postgrest.Queries.PostgrestClause"},{"name":"int","comment":" Normalize an int into a postgrest value.\n","type":"Basics.Int -> Postgrest.Queries.PostgrestValue"},{"name":"limit","comment":" A constructor for the limit parameter.\n\n    limit 10\n\n","type":"Basics.Int -> Postgrest.Queries.PostgrestParam"},{"name":"lt","comment":" Used to indicate you need a column to be less than a certain value.\n","type":"Basics.Float -> Postgrest.Queries.PostgrestClause"},{"name":"lte","comment":" Used to indicate you need a column to be less than or equal than a certain value.\n","type":"Basics.Float -> Postgrest.Queries.PostgrestClause"},{"name":"neq","comment":" Used to indicate you need a column to be not equal to a certain value.\n","type":"Postgrest.Queries.PostgrestValue -> Postgrest.Queries.PostgrestClause"},{"name":"normalizeParams","comment":" Takes PostgrestParams and returns the parameters as a list of (Key, Value) strings.\n","type":"Postgrest.Queries.PostgrestParams -> List.List ( String.String, String.String )"},{"name":"or","comment":" Join multiple conditions together with or.\n","type":"List.List Postgrest.Queries.PostgrestParam -> Postgrest.Queries.PostgrestParam"},{"name":"order","comment":" A constructor for the limit parameter.\n\n    order (asc \"name\")\n\n    order (desc \"name\")\n\n","type":"Postgrest.Queries.ColumnOrder -> Postgrest.Queries.PostgrestParam"},{"name":"param","comment":" A constructor for an individual postgrest parameter.\n\n    param \"name\" (eq (string \"John\"))\n\n","type":"String.String -> Postgrest.Queries.PostgrestClause -> Postgrest.Queries.PostgrestParam"},{"name":"resource","comment":" When you want to select a nested resource.\n","type":"Postgrest.Queries.ResourceName -> List.List Postgrest.Queries.PostgrestSelectable -> Postgrest.Queries.PostgrestSelectable"},{"name":"select","comment":" A constructor for the select parameter.\n\n    P.select\n        [ P.attribute \"id\"\n        , P.attribute \"title\"\n        , P.resource \"user\" <|\n            P.attributes\n                [ \"email\"\n                , \"name\"\n                ]\n        ]\n\n","type":"List.List Postgrest.Queries.PostgrestSelectable -> Postgrest.Queries.PostgrestParam"},{"name":"string","comment":" Normalize a string into a postgrest value.\n","type":"String.String -> Postgrest.Queries.PostgrestValue"},{"name":"true","comment":" When you need a column value to be true\n","type":"Postgrest.Queries.PostgrestClause"},{"name":"value","comment":" When you don't want to use a specific type after the equals sign in the query, you\ncan use `value` to set anything you want.\n","type":"Postgrest.Queries.PostgrestValue -> Postgrest.Queries.PostgrestClause"}],"binops":[]}]