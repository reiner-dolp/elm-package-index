[{"name":"Loadable","comment":"\n\n@docs element, Model, Msg, Program\n\n","unions":[{"name":"Model","comment":" The Model that wraps your Model.\n","args":["flags","innerModel","error"],"cases":[]},{"name":"Msg","comment":" The Msg that wraps your Msg. LoadSuccess/LoadError triggers depending on the result of your load function. ToInner is the msg that\n-- passes all your program messages on to your update function.\n","args":["innerModel","msg","error"],"cases":[]}],"aliases":[{"name":"Program","comment":" A less complicated alias for the Program that gets produced from this package\nwhich you can use in your type annotations.\n","args":["flags","model","msg","error"],"type":"Platform.Program flags (Loadable.Model flags model error) (Loadable.Msg model msg error)"}],"values":[{"name":"element","comment":" Behaves a lot like element from the Html package, with a few additions.\n","type":"{ update : innerMsg -> innerModel -> ( innerModel, Platform.Cmd.Cmd innerMsg ), subscriptions : innerModel -> Platform.Sub.Sub innerMsg, view : innerModel -> Html.Html innerMsg, load : flags -> Task.Task e ( innerModel, Platform.Cmd.Cmd innerMsg ), failCmd : Maybe.Maybe (e -> Platform.Cmd.Cmd (Loadable.Msg innerModel innerMsg e)), loadingView : Maybe.Maybe (flags -> Html.Html (Loadable.Msg innerModel innerMsg e)), errorView : Maybe.Maybe (e -> Html.Html (Loadable.Msg innerModel innerMsg e)) } -> Loadable.Program flags innerModel innerMsg e"}],"binops":[]}]