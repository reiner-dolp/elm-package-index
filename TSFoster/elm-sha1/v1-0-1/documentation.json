[{"name":"SHA1","comment":" [SHA-1] is a [cryptographic hash function].\nAlthough it is no longer considered cryptographically secure (as collisions can\nbe found faster than brute force), it is still very suitable for a broad range\nof uses, and is a lot stronger than MD5.\n\n[SHA-1]: https://en.wikipedia.org/wiki/SHA-1\n[cryptographic hash function]: https://en.wikipedia.org/wiki/Cryptographic_hash_function\n\nThis package provides a way of creating SHA-1 digests from `String`s and `List\nInt`s (where each `Int` is between 0 and 255, and represents a byte). It can\nalso take those `Digest`s and format them in [hexadecimal] or [base64] notation.\nAlternatively, you can get the binary digest, using a `List  Int` to represent\nthe bytes.\n\n[hexadecimal]: https://en.wikipedia.org/wiki/Hexadecimal\n[base64]: https://en.wikipedia.org/wiki/Base64\n\n**Note:** Currently, the package can only create digests for around 200kb of\ndata. If there is any interest in using this package for hashing >200kb, or for\nhashing [elm/bytes], [let me know][issues]!\n\n[elm/bytes]: https://github.com/elm/bytes\n[issues]: https://github.com/TSFoster/elm-sha1/issues\n\n@docs Digest\n\n\n# Creating digests\n\n@docs fromString\n\n\n# Formatting digests\n\n@docs toHex, toBase64\n\n\n# Binary data\n\n@docs fromBytes, toBytes\n\n","unions":[{"name":"Digest","comment":" A type to represent a message digest. `SHA1.Digest`s are equatable, and you may\nwant to consider keeping any digests you need in your `Model` as `Digest`s, not\nas `String`s created by [`toHex`](#toHex) or [`toBase64`](#toBase64).\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"fromBytes","comment":" Sometimes you have binary data that's not representable in a string. Create\na digest from the raw \"bytes\", i.e. a `List` of `Int`s. Any items not between 0\nand 255 are discarded.\n\n    SHA1.fromBytes [72, 105, 33, 32, 240, 159, 152, 132]\n    --> SHA1.fromString \"Hi! ðŸ˜„\"\n\n    [0x00, 0xFF, 0x34, 0xA5] |> SHA1.fromBytes |> SHA1.toBase64\n    --> \"sVQuFckyE6K3fsdLmLHmq8+J738=\"\n\n","type":"List.List Basics.Int -> SHA1.Digest"},{"name":"fromString","comment":" Create a digest from a `String`.\n\n    \"hello world\" |> SHA1.fromString |> SHA1.toHex\n    --> \"2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\"\n\n","type":"String.String -> SHA1.Digest"},{"name":"toBase64","comment":" One of the two canonical ways of representing a SHA-1 digest is in a 20\ndigit long Base64 binary to ASCII text encoding.\n\n    \"Many more of them live next door\"\n        |> SHA1.fromString\n        |> SHA1.toBase64\n    --> \"jfL0oVb5xakab6BMLplGe2XPbj8=\"\n\n","type":"SHA1.Digest -> String.String"},{"name":"toBytes","comment":" If you need the raw digest instead of the textual representation (for\nexample, if using SHA-1 as part of another algorithm), `toBytes` is what you're\nlooking for!\n\n    \"And the band begins to play\"\n        |> SHA1.fromString\n        |> SHA1.toBytes\n    --> [ 0xF3, 0x08, 0x73, 0x13\n    --> , 0xD6, 0xBC, 0xE5, 0x5B\n    --> , 0x60, 0x0C, 0x69, 0x2F\n    --> , 0xE0, 0x92, 0xF4, 0x53\n    --> , 0x87, 0x3F, 0xAE, 0x91\n    --> ]\n\n","type":"SHA1.Digest -> List.List Basics.Int"},{"name":"toHex","comment":" One of the two canonical ways of representing a SHA-1 digest is with 40\nhexadecimal digits.\n\n    \"And our friends are all aboard\"\n        |> SHA1.fromString\n        |> SHA1.toHex\n    --> \"f9a0c23ddcd40f6956b0cf59cd9b8800d71de73d\"\n\n","type":"SHA1.Digest -> String.String"}],"binops":[]}]