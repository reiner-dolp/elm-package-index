[
  {
    "name": "CreateableRemoteData",
    "comment": " Represents data that is downloaded from a server, edited on the client, then\nuploaded back to the server. It's really an extension of `EditableRemoteData`,\nusing a `Maybe data` to represent data that might or might not exist locally or\nremotely.\n\n\n# Types\n\n@docs CreateableRemoteData\n\n\n# Functions\n\n@docs create, edit, set, delete, unwrapLocalRemote, unwrapLocal, maybeLocal, fromResult, upload, forceUpload, uploaded, isSaved, isLoading, isFailed, isSuccess, isUploading, isDeleted\n\n",
    "aliases": [
      {
        "name": "CreateableRemoteData",
        "comment": " Represents data that can be created, edited, and deleted on the client, then\nuploaded to the server.\n",
        "args": [
          "data",
          "downloadError",
          "uploadError"
        ],
        "type": "EditableRemoteData.EditableRemoteData (Maybe.Maybe data) downloadError uploadError"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "create",
        "comment": " Construct a new CreateableRemoteData that only exists locally\n",
        "type": "data -> CreateableRemoteData.CreateableRemoteData data de ue"
      },
      {
        "name": "delete",
        "comment": " Modify a CreateableRemoteData to show that the data no longer exists locally\n",
        "type": "CreateableRemoteData.CreateableRemoteData data de ue -> CreateableRemoteData.CreateableRemoteData data de ue"
      },
      {
        "name": "edit",
        "comment": " Modifies the local data if possible, otherwise does nothing\n",
        "type": "(data -> data) -> CreateableRemoteData.CreateableRemoteData data de ue -> CreateableRemoteData.CreateableRemoteData data de ue"
      },
      {
        "name": "forceUpload",
        "comment": " Very similar to `upload`, but will upload even if the remote has the same data\nas the server.\n\n*Note*: This will likely be removed in the future in favor of a way to modify\nthe remote's value. In other words, you'd mark the remote as deleted (`Nothing`)\nthe use a regular save.\n\nIf this is successful, the data is returned as a `Just LocalRemote`. Otherwise\n`Nothing` is returned. It's up to your code to turn the `Just LocalRemote` into\na Cmd that sends the request to the server.\n\n",
        "type": "CreateableRemoteData.CreateableRemoteData data de ue -> ( Maybe.Maybe (EditableRemoteData.LocalRemote (Maybe.Maybe data)) , CreateableRemoteData.CreateableRemoteData data de ue )"
      },
      {
        "name": "fromResult",
        "comment": " Creates a CreateableRemoteData from a Result. Designed to be used to turn an\nHTTP request result into CreateableRemoteData. The data in the Result is considered\nsyncronized, so the local and remote data is the same at this point.\n",
        "type": "Result.Result error data -> CreateableRemoteData.CreateableRemoteData data error ue"
      },
      {
        "name": "isDeleted",
        "comment": " Check if a CreateableRemoteData is locally deleted\n",
        "type": "CreateableRemoteData.CreateableRemoteData data de ue -> Bool"
      },
      {
        "name": "isFailed",
        "comment": " Check if a CreateableRemoteData has failed to download\n",
        "type": "CreateableRemoteData.CreateableRemoteData date de uploadError -> Bool"
      },
      {
        "name": "isLoading",
        "comment": " Check if a CreateableRemoteData is downloading. This will return `false` when\nthe data is being *uploaded*.\n",
        "type": "CreateableRemoteData.CreateableRemoteData date de uploadError -> Bool"
      },
      {
        "name": "isSaved",
        "comment": " Check if a CreateableRemoteData has its local and remote data syncronized\n",
        "type": "CreateableRemoteData.CreateableRemoteData date de uploadError -> Bool"
      },
      {
        "name": "isSuccess",
        "comment": " Check if a CreateableRemoteData has been successfully downloaded\n",
        "type": "CreateableRemoteData.CreateableRemoteData date de uploadError -> Bool"
      },
      {
        "name": "isUploading",
        "comment": " Check if a CreateableRemoteData is currently uploading to sync its data\n",
        "type": "CreateableRemoteData.CreateableRemoteData date de uploadError -> Bool"
      },
      {
        "name": "maybeLocal",
        "comment": " Converts to a Just if the local data is availible, Nothing otherwise. This\nmakes it impossible to distingish between, say, deleted data and loading data.\nSo this should only be used in places where that won't matter.\n",
        "type": "CreateableRemoteData.CreateableRemoteData data de ue -> Maybe.Maybe data"
      },
      {
        "name": "set",
        "comment": " Similar to `edit`, but it sets the data without caring about the previous value\n",
        "type": "data -> CreateableRemoteData.CreateableRemoteData data de ue -> CreateableRemoteData.CreateableRemoteData data de ue"
      },
      {
        "name": "unwrapLocal",
        "comment": " Runs a function on the local data inside a CreateableRemoteData if possible,\notherwise returns the default\n",
        "type": "a -> (Maybe.Maybe data -> a) -> CreateableRemoteData.CreateableRemoteData data de ue -> a"
      },
      {
        "name": "unwrapLocalRemote",
        "comment": " Runs a function on the LocalRemote inside a CreateableRemoteData if possible,\notherwise returns the default\n",
        "type": "a -> (EditableRemoteData.LocalRemote (Maybe.Maybe data) -> a) -> CreateableRemoteData.CreateableRemoteData data de ue -> a"
      },
      {
        "name": "upload",
        "comment": " Try to put the CreateableRemoteData into the \"Uploading\" state. This only works\nif\n\n  - The data has been successfully downloaded\n  - The CreateableRemoteData isn't already uploading\n  - The local and remote data is desyncronized\n\nIf this is successful, the data is returned as a `Just LocalRemote`. Otherwise\n`Nothing` is returned. It's up to your code to turn the `Just LocalRemote` into\na Cmd that sends the request to the server.\n\n",
        "type": "CreateableRemoteData.CreateableRemoteData data de ue -> ( Maybe.Maybe (EditableRemoteData.LocalRemote (Maybe.Maybe data)) , CreateableRemoteData.CreateableRemoteData data de ue )"
      },
      {
        "name": "uploaded",
        "comment": " Use this after an upload has completed. This will update the CreateableRemoteData\nto refelect the result: either an error occured and the upload failed OR the data\nwas successfully saved and the remote value of the LocalRemote can be updated.\n\nNote that edits can still be made while uploading, after the upload completes the\nremote will be updated to refelect the data that was uploaded rather than the\ncurrent local data.\n\n",
        "type": "Result.Result uploadError () -> CreateableRemoteData.CreateableRemoteData data de uploadError -> CreateableRemoteData.CreateableRemoteData data de uploadError"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "EditableRemoteData",
    "comment": " Represents data that is downloaded from a server, edited on the client, then\nuploaded back to the server. It's really an extension of `RemoteData`.\n\n\n# Types\n\n@docs LocalRemote, EditableRemoteData\n\n\n# Functions\n\n@docs edit, unwrapLocalRemote, unwrapLocal, maybeLocal, fromResult, upload, forceUpload, uploaded, isSaved, isLoading, isFailed, isSuccess, isUploading\n\n",
    "aliases": [
      {
        "name": "EditableRemoteData",
        "comment": " Represents data that is downloaded from a server, edited on the client, then\nuploaded back to the server.\n",
        "args": [
          "data",
          "downloadError",
          "uploadError"
        ],
        "type": "RemoteData.RemoteData ( UploadStatus.UploadStatus data uploadError , EditableRemoteData.LocalRemote data ) downloadError"
      },
      {
        "name": "LocalRemote",
        "comment": " Represents data that is on the client and server. This allows us to check if\nthe data needs to be synced.\n",
        "args": [
          "data"
        ],
        "type": "{ local : data, remote : data }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "edit",
        "comment": " Modifies the local data if possible, otherwise does nothing\n",
        "type": "(data -> data) -> EditableRemoteData.EditableRemoteData data de ue -> EditableRemoteData.EditableRemoteData data de ue"
      },
      {
        "name": "forceUpload",
        "comment": " Very similar to `upload`, but will upload even if the remote has the same data\nas the server.\n\n*Note*: This will likely be removed in the future in favor of a way to modify\nthe remote's value. In other words, you'd mark the remote as deleted (`Nothing`)\nthe use a regular save.\n\nIf this is successful, the data is returned as a `Just LocalRemote`. Otherwise\n`Nothing` is returned. It's up to your code to turn the `Just LocalRemote` into\na Cmd that sends the request to the server.\n\n",
        "type": "EditableRemoteData.EditableRemoteData data de ue -> ( Maybe.Maybe (EditableRemoteData.LocalRemote data) , EditableRemoteData.EditableRemoteData data de ue )"
      },
      {
        "name": "fromResult",
        "comment": " Creates an EditableRemoteData from a Result. Designed to be used to turn an\nHTTP request result into EditableRemoteData. The data in the Result is considered\nsyncronized, so the local and remote data is the same at this point.\n",
        "type": "Result.Result error data -> EditableRemoteData.EditableRemoteData data error ue"
      },
      {
        "name": "isFailed",
        "comment": " Check if an EditableRemoteData has failed to download\n",
        "type": "EditableRemoteData.EditableRemoteData date de uploadError -> Bool"
      },
      {
        "name": "isLoading",
        "comment": " Check if an EditableRemoteData is downloading. This will return `false` when\nthe data is being *uploaded*.\n",
        "type": "EditableRemoteData.EditableRemoteData date de uploadError -> Bool"
      },
      {
        "name": "isSaved",
        "comment": " Check if an EditableRemoteData has its local and remote data syncronized\n",
        "type": "EditableRemoteData.EditableRemoteData date de uploadError -> Bool"
      },
      {
        "name": "isSuccess",
        "comment": " Check if an EditableRemoteData has been successfully downloaded\n",
        "type": "EditableRemoteData.EditableRemoteData date de uploadError -> Bool"
      },
      {
        "name": "isUploading",
        "comment": " Check if an EditableRemoteData is currently uploading to sync its data\n",
        "type": "EditableRemoteData.EditableRemoteData date de uploadError -> Bool"
      },
      {
        "name": "maybeLocal",
        "comment": " Converts to a Just if the local data is availible, Nothing otherwise.\n",
        "type": "EditableRemoteData.EditableRemoteData data de ue -> Maybe.Maybe data"
      },
      {
        "name": "unwrapLocal",
        "comment": " Runs a function on the local data inside an EditableRemoteData if possible,\notherwise returns the default\n",
        "type": "a -> (data -> a) -> EditableRemoteData.EditableRemoteData data de ue -> a"
      },
      {
        "name": "unwrapLocalRemote",
        "comment": " Runs a function on the LocalRemote inside an EditableRemoteData if possible,\notherwise returns the default\n",
        "type": "a -> (EditableRemoteData.LocalRemote data -> a) -> EditableRemoteData.EditableRemoteData data de ue -> a"
      },
      {
        "name": "upload",
        "comment": " Try to put the EditableRemoteData into the \"Uploading\" state. This only works\nif\n\n  - The data has been successfully downloaded\n  - The EditableRemoteData isn't already uploading\n  - The local and remote data is desyncronized\n\nIf this is successful, the data is returned as a `Just LocalRemote`. Otherwise\n`Nothing` is returned. It's up to your code to turn the `Just LocalRemote` into\na Cmd that sends the request to the server.\n\n",
        "type": "EditableRemoteData.EditableRemoteData data de ue -> ( Maybe.Maybe (EditableRemoteData.LocalRemote data) , EditableRemoteData.EditableRemoteData data de ue )"
      },
      {
        "name": "uploaded",
        "comment": " Use this after an upload has completed. This will update the EditableRemoteData\nto refelect the result: either an error occured and the upload failed OR the data\nwas successfully saved and the remote value of the LocalRemote can be updated.\n\nNote that edits can still be made while uploading, after the upload completes the\nremote will be updated to refelect the data that was uploaded rather than the\ncurrent local data.\n\n",
        "type": "Result.Result uploadError () -> EditableRemoteData.EditableRemoteData data de uploadError -> EditableRemoteData.EditableRemoteData data de uploadError"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "RemoteData",
    "comment": " The basic RemoteData type.\n\n\n# Types\n\n@docs RemoteData\n\n\n# Functions\n\n@docs map, unwrap, toMaybe, fromResult, isLoading, isFailed, isSuccess\n\n",
    "aliases": [],
    "types": [
      {
        "name": "RemoteData",
        "comment": " The basic RemoteData type. Represents data that can be downloaded from a\nserver. Note that unlike many representations, this version does not have a\n`NotAsked` state.\n",
        "args": [
          "data",
          "error"
        ],
        "cases": [
          [
            "Loading",
            []
          ],
          [
            "Failed",
            [
              "error"
            ]
          ],
          [
            "Success",
            [
              "data"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "fromResult",
        "comment": " Create a RemoteData from a Result. Use this to turn an HTTP request result\ninto RemoteData.\n",
        "type": "Result.Result error data -> RemoteData.RemoteData data error"
      },
      {
        "name": "isFailed",
        "comment": " Check if a RemoteData has failed to download\n",
        "type": "RemoteData.RemoteData data error -> Bool"
      },
      {
        "name": "isLoading",
        "comment": " Check if a RemoteData is downloading. This will return `false` when\nthe data is being *uploaded*.\n",
        "type": "RemoteData.RemoteData data error -> Bool"
      },
      {
        "name": "isSuccess",
        "comment": " Check if a RemoteData has been successfully downloaded\n",
        "type": "RemoteData.RemoteData data error -> Bool"
      },
      {
        "name": "map",
        "comment": " Modify the data inside if possible, otherwise do nothing\n",
        "type": "(data -> a) -> RemoteData.RemoteData data error -> RemoteData.RemoteData a error"
      },
      {
        "name": "toMaybe",
        "comment": " Convert the data to a Just, or a Nothing if the data isn't availible.\n",
        "type": "RemoteData.RemoteData data error -> Maybe.Maybe data"
      },
      {
        "name": "unwrap",
        "comment": " Run a function on the data if possible, otherwise returns the default\n",
        "type": "a -> (error -> a) -> (data -> a) -> RemoteData.RemoteData data error -> a"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "UploadStatus",
    "comment": " This module helps represent data that can be sent to a server\n\n\n# Type\n\n@docs UploadStatus\n\n\n# Function\n\n@docs isUploading\n\n",
    "aliases": [],
    "types": [
      {
        "name": "UploadStatus",
        "comment": " Represents the three states of uploadable data\n",
        "args": [
          "data",
          "error"
        ],
        "cases": [
          [
            "NotUploading",
            []
          ],
          [
            "Uploading",
            [
              "data"
            ]
          ],
          [
            "LastUploadFailed",
            [
              "error"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "isUploading",
        "comment": " Check if the given UploadStatus is Uploading\n",
        "type": "UploadStatus.UploadStatus data error -> Bool"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]