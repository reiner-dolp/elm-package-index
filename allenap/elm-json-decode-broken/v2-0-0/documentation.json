[{"name":"Json.Decode.Broken","comment":" Parse/decode broken JSON.\n\n\n# Parsing\n\nWhen successful, parsing returns a `Json.Encode.Value`. Use with with\n`Json.Decode.decodeValue` to extract the information you need into your\napplication's data structures.\n\n@docs parse\n\n\n# Parser building blocks\n\nA parser for a JSON _value_ is:\n\n    Parser.oneOf [ object, array, string, number, true, false, null ]\n\nAccording to the [specification][rfc7159], a JSON document is optional\nwhitespace, a JSON value (that `oneOf …` expression above), then more optional\nwhitespace – and that's what the `json` parser does. Hence parsing a compliant\nJSON document is nothing more than:\n\n    Parser.run json \"…\"\n\nUse these building blocks to compose a parser for broken JSON as you need. If\nyou need to parse non-compliant quoted strings, for example, it might be best to\ncopy just the `string` code from this module into your project, and use the\nother parsers in this module – `object`, `array`, and so on – to compose a new\nparser.\n\n[rfc7159]: https://tools.ietf.org/html/rfc7159\n\n@docs json, object, array, string, number, true, false, null, ws\n\n","unions":[],"aliases":[],"values":[{"name":"array","comment":" Parser for a JSON array.\n","type":"Parser.Parser Json.Encode.Value"},{"name":"false","comment":" Parser for a JSON 'false' literal.\n","type":"Parser.Parser Json.Encode.Value"},{"name":"json","comment":" Parser for JSON.\n\nThis is a JSON value surrounded by optional whitespace.\n\n","type":"Parser.Parser Json.Encode.Value"},{"name":"null","comment":" Parser for a JSON 'null' literal.\n","type":"Parser.Parser Json.Encode.Value"},{"name":"number","comment":" Parser for a JSON number.\n","type":"Parser.Parser Json.Encode.Value"},{"name":"object","comment":" Parser for a JSON object.\n","type":"Parser.Parser Json.Encode.Value"},{"name":"parse","comment":" Parse the given JSON string.\n\nThis assumes a spec-compliant JSON string; it will choke on \"broken\" JSON. This\nseems kind of weird for a package that's all about parsing broken JSON. However,\nwe all have to start somewhere. Read the code, copy it, modify it, make it work\nfor your use case.\n\nErrors come straight from [elm/parser] and may not be super useful. Sorry.\n\n[elm/parser]: https://package.elm-lang.org/packages/elm/parser/latest/\n\n","type":"String.String -> Result.Result (List.List Parser.DeadEnd) Json.Encode.Value"},{"name":"string","comment":" Parser for a quoted JSON string.\n\n`string` and some of its helpers have been adapted from elm/parser's\n`DoubleQuoteString` example.\n\n","type":"Parser.Parser Json.Encode.Value"},{"name":"true","comment":" Parser for a JSON 'true' literal.\n","type":"Parser.Parser Json.Encode.Value"},{"name":"ws","comment":" Parser for JSON whitespace.\n\nThis is the whitespace that appears between significant elements of JSON, and\nbefore and after JSON documents, not whitespace within quoted strings.\n\n","type":"Parser.Parser ()"}],"binops":[]}]