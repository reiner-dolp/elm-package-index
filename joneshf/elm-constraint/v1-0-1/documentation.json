[
  {
    "name": "Constraint.Monoid",
    "comment": "\n@docs Monoid\n@docs nTimes\n",
    "aliases": [
      {
        "name": "Monoid",
        "comment": "\nGeneralized identity.\n",
        "args": [
          "a",
          "r"
        ],
        "type": "Constraint.Semigroup.Semigroup a { r | identity : a }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "nTimes",
        "comment": "\nConcatenate a value `n` times.\n",
        "type": "Int -> a -> Constraint.Constraint (Constraint.Monoid.Monoid a r) a"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Constraint.Semigroup",
    "comment": "\n@docs Semigroup\n@docs (++)\n",
    "aliases": [
      {
        "name": "Semigroup",
        "comment": "\nGeneralized concatenation.\n",
        "args": [
          "a",
          "r"
        ],
        "type": "{ r | concat : a -> a -> a }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "++",
        "comment": "\nOperator alias for `concat`.\n",
        "type": "a -> a -> Constraint.Constraint (Constraint.Semigroup.Semigroup a r) a"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Constraint.Eq",
    "comment": "\n@docs Eq\n@docs (===), (=/=)\n",
    "aliases": [
      {
        "name": "Eq",
        "comment": "\nGeneralized equality.\n",
        "args": [
          "a",
          "r"
        ],
        "type": "{ r | eq : a -> a -> Bool }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "=/=",
        "comment": "\nNegation of `(===)`.\n",
        "type": "a -> a -> Constraint.Constraint (Constraint.Eq.Eq a r) Bool"
      },
      {
        "name": "===",
        "comment": "\nOperator alias for `eq`.\n",
        "type": "a -> a -> Constraint.Constraint (Constraint.Eq.Eq a r) Bool"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Constraint",
    "comment": "\n@docs Constraint\n@docs (<&>), (>>=)\n@docs andThen, ap, ask, bind, constraints, map, pam, pure, run, with\n",
    "aliases": [],
    "types": [
      {
        "name": "Constraint",
        "comment": "\nThis type goes by many names: Reader, Kleisli, Function, etc.\n\nThis is simply a wrapper around `a -> b`.\n",
        "args": [
          "r",
          "a"
        ],
        "cases": [
          [
            "Constraint",
            [
              "r -> a"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "<&>",
        "comment": "\nAn operator alias for `pam`.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
        "type": "Constraint.Constraint r a -> (a -> b) -> Constraint.Constraint r b"
      },
      {
        "name": ">>=",
        "comment": "\nAn operator alias for `andThen`.\n",
        "type": "Constraint.Constraint r a -> (a -> Constraint.Constraint r b) -> Constraint.Constraint r b"
      },
      {
        "name": "andThen",
        "comment": "\nLike `bind` but flipped.\n",
        "type": "Constraint.Constraint r a -> (a -> Constraint.Constraint r b) -> Constraint.Constraint r b"
      },
      {
        "name": "ap",
        "comment": "\nApplies the output of a `Constraint` to the output of another `Constraint`\n",
        "type": "Constraint.Constraint r (a -> b) -> Constraint.Constraint r a -> Constraint.Constraint r b"
      },
      {
        "name": "ask",
        "comment": "\nThreads the input directly through the output.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
        "type": "Constraint.Constraint a a"
      },
      {
        "name": "bind",
        "comment": "\nSubstitutes a value in a `Constraint`.\n",
        "type": "(a -> Constraint.Constraint r b) -> Constraint.Constraint r a -> Constraint.Constraint r b"
      },
      {
        "name": "constraints",
        "comment": "\nAn alias for `ask` that sometimes makes things easier to read.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
        "type": "Constraint.Constraint a a"
      },
      {
        "name": "map",
        "comment": "\nTransforms the output with the given function.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
        "type": "(a -> b) -> Constraint.Constraint r a -> Constraint.Constraint r b"
      },
      {
        "name": "pam",
        "comment": "\nLike `map` but flipped.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
        "type": "Constraint.Constraint r a -> (a -> b) -> Constraint.Constraint r b"
      },
      {
        "name": "pure",
        "comment": "\nEmbeds a value in a `Constraint`.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
        "type": "a -> Constraint.Constraint r a"
      },
      {
        "name": "run",
        "comment": "\nUnwraps the `Constraint` constructor.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
        "type": "Constraint.Constraint r a -> r -> a"
      },
      {
        "name": "with",
        "comment": "\nLike `run` but flipped.\n\nDue to parametricity, this documentation is worthless,\nas there is exactly one implementation of this function.\n",
        "type": "r -> Constraint.Constraint r a -> a"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Constraint.Ord",
    "comment": "\n@docs Ord\n",
    "aliases": [
      {
        "name": "Ord",
        "comment": "\nGeneralized ordering.\n",
        "args": [
          "a",
          "r"
        ],
        "type": "{ r | compare : a -> a -> Basics.Order }"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.17.1"
  }
]