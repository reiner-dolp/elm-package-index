[{"name":"PixelEngine","comment":" This module takes care of all the wiring.\n\n**If you are looking for the main module,\nhead over to [PixelEngine.Graphics](PixelEngine-Graphics).**\n\nPixelEngine needs a lot of wiring in order for it to work as intended.\nThats why this module gives different prewired frames.\nTo start, copy this example and expand upon it.\n\n    module ControlsExample exposing (main)\n\n    import Color\n    import Html.Attributes as Attributes\n    import PixelEngine exposing (PixelEngine)\n    import PixelEngine.Controls as Controls exposing (Input(..))\n    import PixelEngine.Graphics as Graphics exposing (Area, Background, Options)\n    import PixelEngine.Graphics.Tile as Tile exposing (Tile, Tileset, tile)\n\n\n    windowWidth : Int\n    windowWidth =\n        16\n\n\n    type alias Model =\n        { x : Int\n        , y : Int\n        }\n\n\n    type Msg\n        = Controls Input\n\n\n    view : Model -> { title : String, options : Options Msg, body : List (Area Msg) }\n    view ({ x, y } as model) =\n        let\n            tileSize : Int\n            tileSize =\n                16\n\n            width : Float\n            width =\n                toFloat <| windowWidth * tileSize\n\n            tileset : Tileset\n            tileset =\n                { source = \"https://orasund.github.io/pixelengine/DigDigBoom/tileset.png\"\n                , spriteWidth = 16\n                , spriteHeight = 16\n                }\n\n            background : Background\n            background =\n                Graphics.colorBackground (Color.rgb255 20 12 28)\n\n            playerTile : Tile Msg\n            playerTile =\n                tile ( 12, 12 )\n        in\n        { title = \"Example\"\n        , options = Graphics.options\n            { width = width\n            , transitionSpeedInSec = 0.2\n            }\n        , body =\n            [ Graphics.tiledArea\n                { rows = windowWidth\n                , background = background\n                , tileset = tileset\n                }\n                [ ( ( x, y )\n                , playerTile\n                )\n                ]\n            ]\n        }\n\n\n    init : () -> ( Model, Cmd Msg )\n    init _ =\n        ( { x = windowWidth // 2, y = windowWidth // 2 }\n        , Cmd.none\n        )\n\n\n    update : Msg -> Model -> ( Model, Cmd Msg )\n    update msg ({ x, y } as model) =\n        ( case msg of\n            Controls input ->\n                case input of\n                    InputUp ->\n                        { model | y = y - 1 }\n\n                    InputLeft ->\n                        { model | x = x - 1 }\n\n                    InputDown ->\n                        { model | y = y + 1 }\n\n                    InputRight ->\n                        { model | x = x + 1 }\n\n                    _ ->\n                        model\n        , Cmd.none\n        )\n\n\n    subscriptions : Model -> Sub Msg\n    subscriptions _ =\n        Sub.none\n\n\n    controls : Input -> Msg\n    controls =\n        Controls\n\n\n    main : PixelEngine () Model Msg\n    main =\n        PixelEngine.game\n            { init = init\n            , update = update\n            , subscriptions = subscriptions\n            , view = view\n            , controls = controls\n            }\n\n@docs PixelEngine, game, gameWithNoControls, gameWithCustomControls\n\n","unions":[],"aliases":[{"name":"PixelEngine","comment":" An alias for a PixelEngine program.\n\nYour `main` function will have this type.\n\n","args":["flag","model","msg"],"type":"Platform.Program flag (PixelEngine.Model model msg) (PixelEngine.Msg msg)"}],"values":[{"name":"game","comment":" A prewired PixelEngine frame.\n\nUse it just like `document` from [elm/browser](https://package.elm-lang.org/packages/elm/browser/latest/Browser).\n\n","type":"{ init : flags -> ( model, Platform.Cmd.Cmd msg ), update : msg -> model -> ( model, Platform.Cmd.Cmd msg ), subscriptions : model -> Platform.Sub.Sub msg, view : model -> { title : String.String, options : PixelEngine.Graphics.Options msg, body : List.List (PixelEngine.Graphics.Area msg) }, controls : PixelEngine.Controls.Input -> msg } -> Platform.Program flags (PixelEngine.Model model msg) (PixelEngine.Msg msg)"},{"name":"gameWithCustomControls","comment":" A game using custom controls.\n\nThe default controls should be enough to start,\nbut maybe you want to write a spelling game,\nor its nessesary that very specifc keys are used?\n\n","type":"{ init : flags -> ( model, Platform.Cmd.Cmd msg ), update : msg -> model -> ( model, Platform.Cmd.Cmd msg ), subscriptions : model -> Platform.Sub.Sub msg, view : model -> { title : String.String, options : PixelEngine.Graphics.Options msg, body : List.List (PixelEngine.Graphics.Area msg) }, controls : ( String.String -> PixelEngine.Controls.Input, PixelEngine.Controls.Input -> msg ) } -> Platform.Program flags (PixelEngine.Model model msg) (PixelEngine.Msg msg)"},{"name":"gameWithNoControls","comment":" A game with no controls.\n\n\nUse it just like `document` from [elm/browser](https://package.elm-lang.org/packages/elm/browser/latest/Browser).\n\n","type":"{ init : flags -> ( model, Platform.Cmd.Cmd msg ), update : msg -> model -> ( model, Platform.Cmd.Cmd msg ), subscriptions : model -> Platform.Sub.Sub msg, view : model -> { title : String.String, options : PixelEngine.Graphics.Options msg, body : List.List (PixelEngine.Graphics.Area msg) } } -> Platform.Program flags (PixelEngine.Model model msg) (PixelEngine.Msg msg)"}],"binops":[]},{"name":"PixelEngine.Controls","comment":" The graphic engine provides a touch-controller for mobile devices.\n\n## Input\n\n@docs Input, defaultLayout\n\n# Advanced\nNormally everything is already predefined in [PixelEngine](PixelEngine)\n\n## Mobile Support\n\n@docs supportingMobile\n\n## Subscriptions\n\n@docs basic, custom\n\n","unions":[{"name":"Input","comment":" all possible Inputs.\n","args":[],"cases":[["InputLeft",[]],["InputRight",[]],["InputUp",[]],["InputDown",[]],["InputA",[]],["InputB",[]],["InputX",[]],["InputY",[]],["InputNone",[]]]}],"aliases":[],"values":[{"name":"basic","comment":" Subscribes to a keypress and sends the corresponding msg. This Function uses the default key layout.\n","type":"(PixelEngine.Controls.Input -> msg) -> Platform.Sub.Sub msg"},{"name":"custom","comment":" Subscribes to a keypress using custom key layouts.\n\nIt uses [key values](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) for the String.\nYou can use this [website](http://keycode.info) to find out the key value.\n","type":"(String.String -> PixelEngine.Controls.Input) -> (PixelEngine.Controls.Input -> msg) -> Platform.Sub.Sub msg"},{"name":"defaultLayout","comment":" The default layout:\n\n  - A/ArrowLeft - `InputLeft`\n  - W/ArrowUp - `InputUp`\n  - D/ArrowRight - `InputRight`\n  - S/ArrowDown - `InputDown`\n  - Space/Enter - `InputA`\n  - X/Backspace/Esc - `InputB`\n  - Q - `InputX`\n  - E - `InputY`\n\n","type":"String.String -> PixelEngine.Controls.Input"},{"name":"supportingMobile","comment":" Adds mobile support to the options.\nIt needs the window size.\n\n[PixelEngine](PixelEngine) provides a fully wired program that takes care of everything.\n\n","type":"{ windowSize : { width : Basics.Float, height : Basics.Float }, controls : PixelEngine.Controls.Input -> msg } -> PixelEngine.Graphics.Options msg -> PixelEngine.Graphics.Options msg"}],"binops":[]},{"name":"PixelEngine.Graphics","comment":" This module takes care of the Graphics.\n\nYou will want to add [PixelEngine.Graphics.Image](PixelEngine-Graphics-Image)\nor [PixelEngine.Graphics.Tile](PixelEngine-Graphics-Tile) to\nactually draw something.\n\n## Area\n\nThe main idea of this graphic engine is to arrage the content into horizontal stripes,\nso called areas.\n\n@docs Area, tiledArea, imageArea, heightOf\n\n## Background\n\n@docs Background, imageBackground, colorBackground\n\n## Options\n\n@docs Options, options\n\n# Advanced\n\nIf one wants to use just use this module on its own, you can use `render` instead\nof the `game` function from the main module.\n\n## Render\n\n@docs render\n\n","unions":[],"aliases":[{"name":"Area","comment":" A horizontal area of the content.\nA `Area` defines how the content should be displayed.\n\n**Note:**  \nAn area can only contain elements of the same type.\nSo either you have tiles or images.\n\n![A typical game](https://orasund.github.io/pixelengine/img4.png \"A typical game\")\n","args":["msg"],"type":"PixelEngine.Graphics.Data.Area.Area msg"},{"name":"Background","comment":" Every area has a background.\n","args":[],"type":"PixelEngine.Graphics.Data.Background"},{"name":"Options","comment":" Options for the render function\n","args":["msg"],"type":"PixelEngine.Graphics.Data.Options.Options msg"}],"values":[{"name":"colorBackground","comment":" A single color background.\nIt uses [avh4/elm-color](https://package.elm-lang.org/packages/avh4/elm-color/latest).\n\n```\ncolorBackground (Color.rgb255 20 12 28)\n```\n\n","type":"Color.Color -> PixelEngine.Graphics.Background"},{"name":"heightOf","comment":" Returns the height of a list of Areas\n\nThis can be used to return the height of a `tiledArea`.\nFor a `imageArea` this function is trivial. \n","type":"List.List (PixelEngine.Graphics.Area msg) -> Basics.Float"},{"name":"imageArea","comment":" An area containing images that can be arranged freely.\n\nThis is a complete contrast to the way how `tiledArea` is working.\nUsefull applications are GUIs, menus or loading screens.\n\nCheckout [PixelEngine.Graphics.Image](PixelEngine-Graphics-Image) for more information.\n\nThis area has the following options:\n\n  - `height` - The height or the `Area` in pixels.\n  - `background` - The background of the `Area`.\n\n","type":"{ height : Basics.Float, background : PixelEngine.Graphics.Background } -> List.List ( ( Basics.Float, Basics.Float ), PixelEngine.Graphics.Image.Image msg ) -> PixelEngine.Graphics.Area msg"},{"name":"imageBackground","comment":" An image that gets repeated.\n\n```\nImage \"groundTile.png\"\n```\n\n","type":"{ source : String.String, width : Basics.Float, height : Basics.Float } -> PixelEngine.Graphics.Background"},{"name":"options","comment":" The engine comes with a set of options:\n\n  - `width` - Width of the game.  \n    **Note:**  \n    all spatial values are given in _Pixels_.\n\n  - `transitionSpeedInSec` - The speed of animations.  \n    **Default value:** `0` for no animations\n\nFor the start use the following settings\n\n```\n{width = 800, transitionSpeedInSec = 0.2}\n```\n\n","type":"{ width : Basics.Float, transitionSpeedInSec : Basics.Float } -> PixelEngine.Graphics.Options msg"},{"name":"render","comment":" Displays content of the game.\n\n**Note:**  \nThe first argument is the scale. Use only power of `2` as scale to ensure crisp\npixels.\n","type":"Basics.Float -> PixelEngine.Graphics.Options msg -> List.List (PixelEngine.Graphics.Area msg) -> Html.Html msg"},{"name":"tiledArea","comment":" An area for using tilesets.\n\nIt supports one tileset at a time,\nthat means all sprites must be of the same size and stored as a grid in one single file.\nThis area is useful for displaying the playing field of a game.\n\nCheckout [PixelEngine.Graphics.Tile](PixelEngine-Graphics-Image) for more information.\n\nThis area has the following options:\n\n  - `rows` - The amount of rows of the grid. This value defines the height of the `Area`.\n  - `tileset` - The tileset that will be used for all elements in the `Area`.\n  - `background` - The background of the `Area`.\n\n","type":"{ rows : Basics.Int, tileset : PixelEngine.Graphics.Tile.Tileset, background : PixelEngine.Graphics.Background } -> List.List ( ( Basics.Int, Basics.Int ), PixelEngine.Graphics.Tile.Tile msg ) -> PixelEngine.Graphics.Area msg"}],"binops":[]},{"name":"PixelEngine.Graphics.Image","comment":" This module contains functions for creating images.\nThese Images can then be used for the `imageArea` function from the <PixelEngine>\n\n\n## Image\n\n@docs Image, image, movable, jumping, fromTile, fromText, fromTextWithSpacing, multipleImages, clickable, monochrome, withAttributes\n\n\n## DEPRECATED\n\n@docs onClick\n\n","unions":[],"aliases":[{"name":"Image","comment":" A `Image` is actually a very general type: As we will see later,\neven tiles are essentially images.\nThe following functions are intended to be modular.\n","args":["msg"],"type":"PixelEngine.Graphics.Data.Area.ContentElement msg"}],"values":[{"name":"clickable","comment":" Makes an `Image` clickable\n\nUse this to create the `onClick` event from [Html.Events](https://package.elm-lang.org/packages/elm/html/latest/Html-Events#onClick).\n\n","type":"msg -> PixelEngine.Graphics.Image.Image msg -> PixelEngine.Graphics.Image.Image msg"},{"name":"fromText","comment":" Created an Image from a text-string and the Tileset of the font.\n\nIt only supports Ascii characters.\n\nThis package comes with a [collection of Fonts](https://github.com/Orasund/pixelengine/wiki/Collection-of-Fonts)\nthat are free to use.\n\n","type":"String.String -> PixelEngine.Graphics.Tile.Tileset -> PixelEngine.Graphics.Image.Image msg"},{"name":"fromTextWithSpacing","comment":" Created an Image from a text-string and the Tileset of the font.\n\nIt only supports Ascii characters.\n\nThe first argument is the spaceing between letters. Use negative values to place\nthe letters nearer to echother.\n\nThis package comes with a [collection of Fonts](https://github.com/Orasund/pixelengine/wiki/Collection-of-Fonts)\nthat are free to use.\n\n","type":"Basics.Float -> String.String -> PixelEngine.Graphics.Tile.Tileset -> PixelEngine.Graphics.Image.Image msg"},{"name":"fromTile","comment":" `Tiles` are essentially also images,\ntherefore this constructor transforms a `Tile` and a `Tileset` into an `Image`.\n\n    fromTile (tile ( 0, 0 ))\n        (tileset\n            { source = \"tiles.png\"\n            , width = 80\n            , height = 80\n            }\n        )\n        == image \"tiles.png\"\n\n**Note:**\n`fromTile` displays only the `width` and `height` of the image, that where given.\nThis means setting `width` and `height` to `0` would not display the image at all.\n\n    fromTile (tile ( 0, 0 ) |> movable \"uniqueId\")\n        == fromTile (tile ( 0, 0 ))\n        |> movable \"uniqueId\"\n\n**Note:**\nIf you want to animate an `Image` use this function instead.\n\n","type":"PixelEngine.Graphics.Tile.Tile msg -> PixelEngine.Graphics.Tile.Tileset -> PixelEngine.Graphics.Image.Image msg"},{"name":"image","comment":" The basic image constructor.\nThe string contains the url to the image\n\n    image \"aStone.png\"\n\n","type":"String.String -> PixelEngine.Graphics.Image.Image msg"},{"name":"jumping","comment":" Pauses a the transition of a `movable` image.\n\n**Only use in combination with `movable`:**\n\n    image \"teleportingEnemy.png\" |> movable \"name\" |> jumping\n\nUse this function if a tile has the `movable`-property, but you would like to\nremove it without causing any unwanted side effects.\n\n","type":"PixelEngine.Graphics.Image.Image msg -> PixelEngine.Graphics.Image.Image msg"},{"name":"monochrome","comment":" Adds a background color.\n\n\\*\\* This makes the the Image non-transparent \\*\\*\n\nThis can be used to simulate monochrome sprites or to implement team colors.\n\n","type":"Color.Color -> PixelEngine.Graphics.Image.Image msg -> PixelEngine.Graphics.Image.Image msg"},{"name":"movable","comment":" Creates a image transition between positions.\nThis is useful for images that will change their position during the game.\n\n    image \"enemy.png\" |> movable \"name\"\n\n**Note:**\nThe string should be unique, if not the transition might fail every now and then.\n\n**Note:**\nThe string will be a id Attribute in a html node, so be careful not to use names that might be already taken.\n\n","type":"String.String -> PixelEngine.Graphics.Image.Image msg -> PixelEngine.Graphics.Image.Image msg"},{"name":"multipleImages","comment":" It is possible to compose an `Image` from a set of other images.\nThe two `Floats` are realtive coordinates.\n\n    ((100,100),image \"img.png\")\n    =\n    ((20,50), multipleimages [((80,50),image \"img.png\")])\n\nSub-images loose the ability to be movable:\n\n    multipleimages [((x,y),image \"img.png\" |> movable \"id\")]\n    =\n    multipleimages [((x,y),image \"img.png\")]\n\nInstead use the following:\n\n    image \"img.png\" |> movable \"id\"\n    =\n    multipleimages [((0,0),image \"img.png\")] |> movable \"id\"\n\n","type":"List.List ( ( Basics.Float, Basics.Float ), PixelEngine.Graphics.Image.Image msg ) -> PixelEngine.Graphics.Image.Image msg"},{"name":"onClick","comment":" [DEPRECATED]\n\nUse `clickable` instead.\n\n","type":"msg -> Html.Attribute msg"},{"name":"withAttributes","comment":" Adds custom attributes.\n\nUse the [Html.Attributes](https://package.elm-lang.org/packages/elm/html/latest/Html-Attributes).\n\n","type":"List.List (Html.Attribute msg) -> PixelEngine.Graphics.Image.Image msg -> PixelEngine.Graphics.Image.Image msg"}],"binops":[]},{"name":"PixelEngine.Graphics.Tile","comment":" This module contains functions for creating tiles.\nTiles are used for the `tiledArea` function from the main module.\n\n\n## Tile\n\n@docs Tile, tile, fromText, movable, jumping, animated, clickable, monochrome, withAttributes\n\n\n## Tileset\n\n@docs Tileset, tileset\n\n\n## DEPRECATED\n\n@docs onClick, backgroundColor\n\n","unions":[],"aliases":[{"name":"Tile","comment":" A `Tile` defines a sprite in a `Tileset`.\nThe following functions are intended to be modular.\n\nA example for a `tile` could be:\n\n    tile ( 1, 2 ) |> animated 1 |> movable \"uniqueName\"\n\n","args":["msg"],"type":"PixelEngine.Graphics.Data.Tile.Tile msg"},{"name":"Tileset","comment":" A Tileset contains the actuall image that a `Tile` can reference.\n","args":[],"type":"PixelEngine.Graphics.Data.Tile.Tileset"}],"values":[{"name":"animated","comment":" Adds animations to a `Tile`.\nThe sprites of the animation must be arranged horizontally in the `Tileset`.\n\nThe first argument give the amount of steps of the animation (one less then the number of sprites.)\n\nThe following code specifies a `Tile` with 3+1 frames\n\n    tile ( 0, 0 ) |> animated 3\n\n**Note:**\nSetting the steps to `0` describes a tile with no animation.\n\n    tile ( 0, 0 ) |> animated 0 == tile ( 0, 0 )\n\n![animation](https://orasund.github.io/pixelengine/img2.png \"animation\")\n\n**Note:**\nNegaive steps are not supported, in this case no animation will be played.\n\n","type":"Basics.Int -> PixelEngine.Graphics.Tile.Tile msg -> PixelEngine.Graphics.Tile.Tile msg"},{"name":"backgroundColor","comment":" [DEPRECATED]\n\nUse `monochrome` instead.\n\n","type":"Color.Color -> Html.Attribute msg"},{"name":"clickable","comment":" Makes an `Tile` clickable\n\nUse this to create the `onClick` event from [Html.Events](https://package.elm-lang.org/packages/elm/html/latest/Html-Events#onClick).\n\n","type":"msg -> PixelEngine.Graphics.Tile.Tile msg -> PixelEngine.Graphics.Tile.Tile msg"},{"name":"fromText","comment":" Created a List of Tiles from a String and a Offset.\n\nIt only supports ASCII characters.\n\nThe Offset `(Int,Int` should point to the sprite repesenting the space-character.\n\nThis package comes with a [collection of Fonts](https://github.com/Orasund/pixelengine/wiki/Collection-of-Fonts)\nthat are free to use.\n","type":"( Basics.Int, Basics.Int ) -> String.String -> List.List (PixelEngine.Graphics.Tile.Tile msg)"},{"name":"jumping","comment":" Pauses the transition of a `movable` tile.\n\n**Only use in combination with `movable`:**\n\n    tile ( 0, 0 ) |> movable \"name\" |> jumping\n\nUse this function if a `Tile` has the `movable`-property and you would like to\nremove it temporarily without causing any unwanted side effects.\n\n","type":"PixelEngine.Graphics.Tile.Tile msg -> PixelEngine.Graphics.Tile.Tile msg"},{"name":"monochrome","comment":" Adds a background color.\n\n\\*\\* This makes the the Tile non-transparent \\*\\*\n\nThis can be used to simulate monochrome sprites or to implement team colors.\n\n","type":"Color.Color -> PixelEngine.Graphics.Tile.Tile msg -> PixelEngine.Graphics.Tile.Tile msg"},{"name":"movable","comment":" Makes a `Tile` transition between positions.\nThis is useful for sprites that will change their position during the game.\n\n    tile ( 0, 0 ) |> movable \"name\"\n\n**Note:**\nOnce a `Tile` has this property, it can **NOT** be removed during the game.\n\n**Note:**\nThe string should be unique,. If not then the transition might fail every now and then.\n\n**Note:**\nThe string will be a id Attribute in a html node, so be careful not to use names that might be already taken.\n\n","type":"String.String -> PixelEngine.Graphics.Tile.Tile msg -> PixelEngine.Graphics.Tile.Tile msg"},{"name":"onClick","comment":" [DEPRECATED]\n\nUse `clickable` instead.\n\n","type":"msg -> Html.Attribute msg"},{"name":"tile","comment":" The basic `Tile` constructor.\n\nThe first argument is the position of the sprite in the `tileset`.\n\nAs an example\n\n    tile ( 3, 2 )\n\nis the 3 row in the second column of the `Tileset`.\n\n![a tileset](https://orasund.github.io/pixelengine/img3.png \"a tileset\")\n\n","type":"( Basics.Int, Basics.Int ) -> PixelEngine.Graphics.Tile.Tile msg"},{"name":"tileset","comment":" The `Tileset` constructor has the following parameters:\n\n  - `source` - The adress to the file\n  - `spriteWidth` - The size of a single sprite in the `Tileset` (in pixels)\n  - `spriteHeight` - The height of a single sprite (also in pixels)\n\nFor the following defines the `Tileset` used in the examples of this module.\n\n    { width: 16\n    , height 16\n    , source: \"https://orasund.github.io/pixelengine/tileset.png\"\n    }\n\n","type":"{ source : String.String, spriteWidth : Basics.Int, spriteHeight : Basics.Int } -> PixelEngine.Graphics.Tile.Tileset"},{"name":"withAttributes","comment":" Adds custom attributes.\n\nuse the [Html.Attributes](https://package.elm-lang.org/packages/elm/html/latest/Html-Attributes).\n\n","type":"List.List (Html.Attribute msg) -> PixelEngine.Graphics.Tile.Tile msg -> PixelEngine.Graphics.Tile.Tile msg"}],"binops":[]},{"name":"PixelEngine.Graphics.Transition","comment":" Adding a transitions between screens.\n\nThe information for the transition will be written in the `Option` class from\n[PixelEngine.Graphics](PixelEngine-Graphics).\n\nTo get started, copy the following example:\n\n    options\n        |> Transition.from\n            ListOfArea\n            (Transition.customTransition\n                \"death_transition\"\n                [ ( 0, \"opacity:1;filter:grayscale(0%) blur(0px);\" )\n                , ( 1, \"opacity:1;filter:grayscale(70%) blur(0px);\" )\n                , ( 3, \"opacity:0;filter:grayscale(70%) blur(5px);\" )\n            ])\n\n\n## Main Function\n\n@docs from\n\n\n## Area\n\n@docs Transition, custom\n\n","unions":[],"aliases":[{"name":"Transition","comment":" A transition between screens\n","args":[],"type":"PixelEngine.Graphics.Data.Transition.Transition"}],"values":[{"name":"custom","comment":" The default constructor for a `Transition`.\n\nFor the future I have planed to make transitions modular, similar to a `Msg` or a `Sub`.\n\n    Transition.customTransition\n        \"death_transition\"\n        [ ( 0, \"opacity:1;filter:grayscale(0%) blur(0px);\" )\n        , ( 1, \"opacity:1;filter:grayscale(70%) blur(0px);\" )\n        , ( 3, \"opacity:0;filter:grayscale(70%) blur(5px);\" )\n        ]\n\nThe first value is the duration of the effect, the second is the CSS-command at that point in time.\nSo the example will compile to something like this:\n\n    dealth_transition:\n    0% {opacity:1;filter:grayscale(0%) blur(0px);}\n    25% {opacity:1;filter:grayscale(70%) blur(0px);}\n    100% {opacity:0;filter:grayscale(70%) blur(5px);}\n\n**Note:**  \nA screen will be automatically hidden after a transition,\nso the example would also work without the opacity-parameter.\n","type":"String.String -> List.List ( Basics.Float, String.String ) -> PixelEngine.Graphics.Transition.Transition"},{"name":"from","comment":" adds the `Transition` to the `Options`.\n\nThe first argument is the List or Areas taken **before** the transition is applied.\n(e.g. the last state)\n","type":"List.List (PixelEngine.Graphics.Area msg) -> PixelEngine.Graphics.Transition.Transition -> PixelEngine.Graphics.Options msg -> PixelEngine.Graphics.Options msg"}],"binops":[]}]