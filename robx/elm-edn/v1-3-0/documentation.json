[
  {
    "name": "Decode",
    "comment": " Build decoders for [EDN](https://github.com/edn-format/edn) elements.\n\nYou can mostly just use this the way you use\n<a href=\"http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode\">Json.Decode</a>\nto decode JSON values.\n\n\n# Primitives\n\n@docs Decoder\n@docs bool, int, float, string, char\n@docs nil, symbol, keyword\n\n\n# Data Structures\n\n@docs optional, list, vector, set, keyValuePairs, dict\n@docs index\n\n\n# Object Primitives\n\n@docs field, optionalField\n@docs tagged\n@docs at\n\n\n# Inconsistent Structure\n\n@docs oneOf\n\n\n# Run Decoders\n\n@docs decodeString\n\n\n# Mapping\n\n@docs map, map2, map3, map4, map5, map6, map7, map8\n\n\n# Fancy Decoding\n\n@docs lazy, succeed, fail, andThen\n\n\n# Custom Types\n\n@docs tag, instant, uuid\n\n",
    "aliases": [
      {
        "name": "Decoder",
        "comment": " A value that knows how to decode EDN elements.\n",
        "args": [
          "a"
        ],
        "type": "Types.Element -> Result.Result String a"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "andThen",
        "comment": " Create a decoder that depends on the result of a previous decoder.\n",
        "type": "(a -> Decode.Decoder b) -> Decode.Decoder a -> Decode.Decoder b"
      },
      {
        "name": "at",
        "comment": " Decode a nested object, requiring certain fields.\n\n    decodeString (at [\"end\", \"x\"] float)\n        \"\"\"{:start {:x 1.0, :y 1.5}\n            :end   {:x 0.5, :y 0.334}}\"\"\"\n    --> Ok 0.5\n\n    decodeString (at [\"start\", \"z\"] float)\n        \"\"\"{:start {:x 1.0, :y 1.5}\n            :end   {:x 0.5, :y 0.334}}\"\"\"\n    --> Err \"field not found: z\"\n\n",
        "type": "List String -> Decode.Decoder a -> Decode.Decoder a"
      },
      {
        "name": "bool",
        "comment": " Decode an EDN boolean into an Elm `Bool`.\n\n     decodeString bool \"true\"   --> Ok True\n     decodeString bool \"false\"  --> Ok False\n     decodeString bool \"nil\"    --> Err \"expected a boolean but found `nil`\"\n     decodeString bool \"(true)\" --> Err \"expected a boolean but found a list\"\n\n",
        "type": "Decode.Decoder Bool"
      },
      {
        "name": "char",
        "comment": " Decode an EDN character into an Elm `Char`.\n\n    decodeString char \"\\\\a\"       --> Ok 'a'\n    decodeString char \"\\\\newline\" --> Ok '\\n'\n    decodeString char \"\\\\\\\\\"      --> Ok '\\\\'\n    decodeString char \"\\\\u0026\"   --> Ok '&'\n\n",
        "type": "Decode.Decoder Char"
      },
      {
        "name": "decodeString",
        "comment": " Parse the given string into a single EDN element and\nand decode it to an Elm value using the given Decoder.\n",
        "type": "Decode.Decoder a -> String -> Result.Result String a"
      },
      {
        "name": "dict",
        "comment": " Decode an EDN map into an Elm `Dict`.\n\n    import Dict\n\n    decodeString\n        (dict int string)\n        \"\"\"{12 \"onetwo\", 21 \"twoone\", 3 \"three\"}\"\"\"\n    --> Ok <| Dict.fromList\n    -->     [ (12, \"onetwo\")\n    -->     , (21, \"twoone\")\n    -->     , (3,  \"three\")\n    -->     ]\n\n",
        "type": "Decode.Decoder comparable -> Decode.Decoder value -> Decode.Decoder (Dict.Dict comparable value)"
      },
      {
        "name": "fail",
        "comment": " Ignore the input and make the decoder fail with the given message.\n",
        "type": "String -> Decode.Decoder a"
      },
      {
        "name": "field",
        "comment": " Decode an EDN map field.\n\n    decodeString (field \"twitter\" string)\n        \"\"\"{:name \"Alice\", :twitter \"@alice\"}\"\"\"\n    --> Ok \"@alice\"\n\n    decodeString (field \"twitter\" string)\n        \"\"\"{:name \"Bob\", :icq 12345678}\"\"\"\n    --> Err \"field not found: twitter\"\n\n    decodeString (field \"twitter\" (optional string))\n        \"\"\"{:name \"Alice\", :twitter \"@alice\"}\"\"\"\n    --> Ok (Just \"@alice\")\n\n    decodeString (field \"twitter\" (optional string))\n        \"\"\"{:name \"Eve\", :twitter nil}\"\"\"\n    --> Ok Nothing\n\n",
        "type": "String -> Decode.Decoder a -> Decode.Decoder a"
      },
      {
        "name": "float",
        "comment": " Decode an EDN floating point number into an Elm `Float`\n\n     decodeString float \"1.1\" --> Ok 1.1\n     decodeString float \"1E1\" --> Ok 10.0\n     decodeString float \"2\"\n     --> Err \"expected a floating point number but found an integer\"\n\n",
        "type": "Decode.Decoder Float"
      },
      {
        "name": "index",
        "comment": " Decode an EDN vector, requiring a particular index.\n\n    decodeString (index 1 int)\n        \"\"\"[\"one\" 2 3.0 nil]\"\"\"\n    --> Ok 2\n    decodeString (index 1 int)\n        \"[1]\"\n    --> Err \"index 1 not found in vector of length 1\"\n\nThis will fail on EDN lists.\n\n    decodeString (index 1 int)\n        \"(1 2 3)\"\n    --> Err \"expected a vector but found a list\"\n\n",
        "type": "Int -> Decode.Decoder a -> Decode.Decoder a"
      },
      {
        "name": "instant",
        "comment": " Decode an EDN instant to an Elm `Date`. An EDN instant\nis a tagged string of an ISO 8601 date.\n\n    import Date\n\n    decodeString instant\n        \"#inst \\\"1985-04-12T23:20:50.52Z\\\"\"\n    --> Date.fromString \"1985-04-12T23:20:50.52Z\"\n    decodeString instant\n        \"#inst \\\"1985-04-12T23:20:50.52+04:00\\\"\"\n    --> Date.fromString \"1985-04-12T23:20:50.52+04:00\"\n    decodeString instant\n        \"\\\"1985-04-12T23:20:50.52Z\\\"\"\n    --> Err \"expected a tagged element but found a string\"\n\n",
        "type": "Decode.Decoder Date.Date"
      },
      {
        "name": "int",
        "comment": " Decode an EDN integer into an Elm `Int`.\n\n    decodeString int \"12345\" --> Ok 12345\n    decodeString int \"1.0\"   --> Err \"expected an integer but found a floating point number\"\n\n",
        "type": "Decode.Decoder Int"
      },
      {
        "name": "keyValuePairs",
        "comment": " Decode an EDN map into an Elm `List` of pairs. If the keys are\nsimple (strings, integers, keywords, ...), consider using\n[`dict`](#dict) or [`field`](#field) instead.\n\n    decodeString\n        (keyValuePairs (list int) string)\n        \"\"\"{(1 2) \"onetwo\"\n            (2 1) \"twoone\"\n            ()    \"three\"}\"\"\"\n    --> Ok [ ([1, 2], \"onetwo\")\n    -->    , ([2, 1], \"twoone\")\n    -->    , ([], \"three\")\n    -->    ]\n\n",
        "type": "Decode.Decoder key -> Decode.Decoder value -> Decode.Decoder (List ( key, value ))"
      },
      {
        "name": "keyword",
        "comment": " Decode an EDN keyword into an Elm `String`.\n\n     decodeString keyword \":black\" --> Ok \"black\"\n     decodeString keyword \"yo\"     --> Err \"expected a keyword but found a symbol\"\n     decodeString keyword \":true\"  --> Ok \"true\"\n\n",
        "type": "Decode.Decoder String"
      },
      {
        "name": "lazy",
        "comment": " ",
        "type": "(() -> Decode.Decoder a) -> Decode.Decoder a"
      },
      {
        "name": "list",
        "comment": " Decode an EDN list into an Elm `List`.\n\n    decodeString\n        (list int)\n        \"(1 2 3 4 5)\"\n    --> Ok [1, 2, 3, 4, 5]\n\n    decodeString\n        (list (list string))\n        \"\"\"(() (\"hello\" \"world\") ())\"\"\"\n    --> Ok [[], [\"hello\", \"world\"], []]\n\n",
        "type": "Decode.Decoder a -> Decode.Decoder (List a)"
      },
      {
        "name": "map",
        "comment": " Transform a decoder.\n",
        "type": "(a -> value) -> Decode.Decoder a -> Decode.Decoder value"
      },
      {
        "name": "map2",
        "comment": " Try two decoders and then combine the result. We can use this to decode\nobjects with many fields:\n\n    type alias Point =\n        { x : Float, y : Float }\n\n    point : Decoder Point\n    point =\n        map2 Point\n            (field \"x\" float)\n            (field \"y\" float)\n\n    decodeString point \"\"\"{:x 3.0, :y 4.0}\"\"\"\n    --> Ok { x = 3, y = 4 }\n\nIt tries each individual decoder and puts the result together with the `Point`\nconstructor.\n\n",
        "type": "(a -> b -> value) -> Decode.Decoder a -> Decode.Decoder b -> Decode.Decoder value"
      },
      {
        "name": "map3",
        "comment": " ",
        "type": "(a -> b -> c -> value) -> Decode.Decoder a -> Decode.Decoder b -> Decode.Decoder c -> Decode.Decoder value"
      },
      {
        "name": "map4",
        "comment": " ",
        "type": "(a -> b -> c -> d -> value) -> Decode.Decoder a -> Decode.Decoder b -> Decode.Decoder c -> Decode.Decoder d -> Decode.Decoder value"
      },
      {
        "name": "map5",
        "comment": " ",
        "type": "(a -> b -> c -> d -> e -> value) -> Decode.Decoder a -> Decode.Decoder b -> Decode.Decoder c -> Decode.Decoder d -> Decode.Decoder e -> Decode.Decoder value"
      },
      {
        "name": "map6",
        "comment": " ",
        "type": "(a -> b -> c -> d -> e -> f -> value) -> Decode.Decoder a -> Decode.Decoder b -> Decode.Decoder c -> Decode.Decoder d -> Decode.Decoder e -> Decode.Decoder f -> Decode.Decoder value"
      },
      {
        "name": "map7",
        "comment": " ",
        "type": "(a -> b -> c -> d -> e -> f -> g -> value) -> Decode.Decoder a -> Decode.Decoder b -> Decode.Decoder c -> Decode.Decoder d -> Decode.Decoder e -> Decode.Decoder f -> Decode.Decoder g -> Decode.Decoder value"
      },
      {
        "name": "map8",
        "comment": " ",
        "type": "(a -> b -> c -> d -> e -> f -> g -> h -> value) -> Decode.Decoder a -> Decode.Decoder b -> Decode.Decoder c -> Decode.Decoder d -> Decode.Decoder e -> Decode.Decoder f -> Decode.Decoder g -> Decode.Decoder h -> Decode.Decoder value"
      },
      {
        "name": "nil",
        "comment": " Decode an EDN nil value.\n\n     decodeString keyword \":nil\" --> Ok \"nil\"\n     decodeString keyword \"yo\"   --> Err \"expected a keyword but found a symbol\"\n     decodeString keyword \"nil\"  --> Err \"expected a keyword but found `nil`\"\n\n",
        "type": "Decode.Decoder ()"
      },
      {
        "name": "oneOf",
        "comment": " Try a bunch of different decoders, one after the other. The\nresult is the value of the first successful decoder.\n\n    type ID\n        = UserID Int\n        | Email String\n\n    decodeString\n        (list <| oneOf\n            [ map UserID int\n            , map Email string\n            ])\n        \"\"\"(1, \"alice@example.com\", 334)\"\"\"\n    --> Ok\n    -->     [ UserID 1\n    -->     , Email \"alice@example.com\"\n    -->     , UserID 334\n    -->     ]\n\n",
        "type": "List (Decode.Decoder a) -> Decode.Decoder a"
      },
      {
        "name": "optional",
        "comment": " Decode an EDN nil value into `Nothing`, or any other value into an Elm value.\n\n     decodeString (optional bool) \"true\" --> Ok (Just True)\n     decodeString (optional bool) \"nil\"  --> Ok Nothing\n\n",
        "type": "Decode.Decoder a -> Decode.Decoder (Maybe.Maybe a)"
      },
      {
        "name": "optionalField",
        "comment": " Decode an optional EDN map field.\n\n    decodeString (optionalField \"twitter\" string)\n        \"\"\"{:name \"Alice\", :twitter \"@alice\"}\"\"\"\n    --> Ok (Just \"@alice\")\n\n    decodeString (optionalField \"twitter\" string)\n        \"\"\"{:name \"Bob\", :icq 12345678}\"\"\"\n    --> Ok Nothing\n\n    decodeString (optionalField \"twitter\" string)\n        \"\"\"{:name \"Eve\", :twitter nil}\"\"\"\n    --> Err \"expected a string but found `nil`\"\n\n",
        "type": "String -> Decode.Decoder a -> Decode.Decoder (Maybe.Maybe a)"
      },
      {
        "name": "set",
        "comment": " Decode an EDN set into an Elm `Set`.\n\n    import Set\n\n    decodeString (set int) \"#{1, 2}\"\n    --> Ok (Set.fromList [1, 2])\n\n",
        "type": "Decode.Decoder comparable -> Decode.Decoder (Set.Set comparable)"
      },
      {
        "name": "string",
        "comment": " Decode an EDN string into an Elm `String`.\n\n    decodeString string \"\\\"12345\\\"\" --> Ok \"12345\"\n    decodeString string \"\\\"😞\\\"\"    --> Ok \"😞\"\n    decodeString string \"12345\"     --> Err \"expected a string but found an integer\"\n\n",
        "type": "Decode.Decoder String"
      },
      {
        "name": "succeed",
        "comment": " Ignore the input and make the decoder succeed with the given value.\n",
        "type": "a -> Decode.Decoder a"
      },
      {
        "name": "symbol",
        "comment": " Decode an EDN symbol into an Elm `String`.\n\n     decodeString symbol \"yo\"     --> Ok \"yo\"\n     decodeString symbol \":black\" --> Err \"expected a symbol but found a keyword\"\n\n",
        "type": "Decode.Decoder String"
      },
      {
        "name": "tag",
        "comment": " Decode a tagged element.\n\n    decodeString (tag \"my/tag\" int) \"#my/tag 55\"\n    --> Ok 55\n    decodeString (tag \"my/tag\" int) \"#your/tag 55\"\n    --> Err \"expected tag `my/tag` but found `your/tag`\"\n    decodeString (tag \"my/tag\" int) \"55\"\n    --> Err \"expected a tagged element but found an integer\"\n\n",
        "type": "String -> Decode.Decoder a -> Decode.Decoder a"
      },
      {
        "name": "tagged",
        "comment": " Decode an element based on its tag.\n\n    type ID\n        = UserID Int\n        | Email String\n\n    decodeString\n        (list <| tagged\n            [ ( \"my/uid\",   map UserID int   )\n            , ( \"my/email\", map Email string )\n            ])\n        \"\"\"(#my/uid 1, #my/email \"alice@example.com\", #my/uid 334)\"\"\"\n    --> Ok <|\n    -->     [ UserID 1\n    -->     , Email \"alice@example.com\"\n    -->     , UserID 334\n    -->     ]\n\n",
        "type": "List ( String, Decode.Decoder a ) -> Decode.Decoder a"
      },
      {
        "name": "uuid",
        "comment": " Decode an EDN UUID to an Elm `String`.\n\n    decodeString uuid\n        \"#uuid \\\"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\\\"\"\n    --> Ok \"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\"\n    decodeString uuid\n        \"#uuid \\\"F81D4FAE-7DEC-11D0-A765-00A0C91E6BF6\\\"\"\n    --> Err \"invalid UUID\"\n    decodeString uuid\n        \"\\\"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\\\"\"\n    --> Err \"expected a tagged element but found a string\"\n\n",
        "type": "Decode.Decoder String"
      },
      {
        "name": "vector",
        "comment": " Decode an EDN vector into an Elm `List`.\n\n    decodeString (vector int) \"[2 2]\"\n    --> Ok [2, 2]\n\n",
        "type": "Decode.Decoder a -> Decode.Decoder (List a)"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Encode",
    "comment": " Encode Elm values to EDN elements.\n\nYou can mostly just use this the way you use\n<a href=\"http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Encode\">Json.Encode</a>\nto encode JSON values.\n\n\n# Basics\n\n@docs Element, encode\n\n\n# Encoding basic types\n\n@docs string, int, bool, float, symbol, keyword\n\n\n# Containers\n\n@docs list\n\n\n# Objects and tags\n\n@docs object, mustObject, tagged, mustTagged\n\n\n# Symbols\n\n@docs Symbol, toSymbol, mustSymbol\n@docs Keyword, toKeyword, mustKeyword\n@docs Tag, toTag, mustTag\n\n",
    "aliases": [
      {
        "name": "Element",
        "comment": " An EDN element.\n\nThis can be encoded to a `String` via [`encode`](encode).\n\n",
        "args": [],
        "type": "Types.Element"
      }
    ],
    "types": [
      {
        "name": "Keyword",
        "comment": " An EDN keyword. You can make these from strings using\n`toKeyword` or `mustKeyword`.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Symbol",
        "comment": " An EDN symbol. You can make these from strings using\n`toSymbol` or `mustSymbol`.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Tag",
        "comment": " An EDN tag. You can make these from strings using\n`toTag` or `mustTag`.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "bool",
        "comment": " Make an EDN bool from an Elm `Bool`.\n",
        "type": "Bool -> Encode.Element"
      },
      {
        "name": "encode",
        "comment": " Encode an EDN element to EDN.\n\n    encode (list [int 5, string \"hello\"])\n    --> \"\"\"(5 \"hello\")\"\"\"\n\n",
        "type": "Encode.Element -> String"
      },
      {
        "name": "float",
        "comment": " Make an EDN floating point number from an Elm `Float`.\n",
        "type": "Float -> Encode.Element"
      },
      {
        "name": "int",
        "comment": " Make an EDN integer from an Elm `Int`.\n",
        "type": "Int -> Encode.Element"
      },
      {
        "name": "keyword",
        "comment": " Make an EDN keyword from a `Keyword`.\n\n    encode <| keyword  <| mustKeyword \"nil\"\n    --> \":nil\"\n\n",
        "type": "Encode.Keyword -> Encode.Element"
      },
      {
        "name": "list",
        "comment": " Make an EDN list from an Elm `List` of EDN elements.\n",
        "type": "List Encode.Element -> Encode.Element"
      },
      {
        "name": "mustKeyword",
        "comment": " Create a `Keyword` from an Elm `String`, crashing if\nit is not a valid symbol.\n",
        "type": "String -> Encode.Keyword"
      },
      {
        "name": "mustObject",
        "comment": " Make an EDN object (map from keyword to element) from a list of\npairs of field name string and field value. This will crash if any of\nthe field names are not valid EDN symbols.\n\n    encode (mustObject [ (\"x\", float 1.5), (\"y\", float 0.0) ])\n    --> \"{:x 1.5, :y 0.0}\"\n\n",
        "type": "List ( String, Encode.Element ) -> Encode.Element"
      },
      {
        "name": "mustSymbol",
        "comment": " Create a `Symbol` from an Elm `String`, crashing if\nit is not a valid symbol.\n",
        "type": "String -> Encode.Symbol"
      },
      {
        "name": "mustTag",
        "comment": " Create a `Tag` from an Elm `String`, crashing if\nit is not a valid symbol.\n",
        "type": "String -> Encode.Tag"
      },
      {
        "name": "mustTagged",
        "comment": " Make a tagged EDN element from a `String` and an element.\nThis will crash if the tag is not a valid EDN symbol.\n\n    type ID\n        = UserID Int\n        | Email String\n\n    encode <| list <|\n        List.map (\\id -> case id of\n            UserID i -> mustTagged \"my/uid\" (int i)\n            Email e  -> mustTagged \"my/email\" (string e)\n        ) [ UserID 5, Email \"alice@example.com\" ]\n    --> \"\"\"(#my/uid 5 #my/email \"alice@example.com\")\"\"\"\n\n",
        "type": "String -> Encode.Element -> Encode.Element"
      },
      {
        "name": "object",
        "comment": " Make an EDN object (map from keyword to element) from a list of\npairs of field name symbol and field value.\n\n    case (toKeyword \"x\", toKeyword \"y\") of\n        (Just x, Just y)\n            -> encode (object [ (x, float 1.5), (y, float 0.0) ])\n        _   -> \"\"\n    --> \"{:x 1.5, :y 0.0}\"\n\n",
        "type": "List ( Encode.Keyword, Encode.Element ) -> Encode.Element"
      },
      {
        "name": "string",
        "comment": " Make an EDN string from an Elm `String`.\n",
        "type": "String -> Encode.Element"
      },
      {
        "name": "symbol",
        "comment": " Make an EDN symbol from a `Symbol`.\n",
        "type": "Encode.Symbol -> Encode.Element"
      },
      {
        "name": "tagged",
        "comment": " Make a tagged EDN element from a tag and an element.\n",
        "type": "Encode.Tag -> Encode.Element -> Encode.Element"
      },
      {
        "name": "toKeyword",
        "comment": " Create a `Keyword` from an Elm `String`. This allows the\nsame strings as `toSymbol`, in addition to `\"nil\"`, `\"true\"`\nand `\"false\"`.\n",
        "type": "String -> Maybe.Maybe Encode.Keyword"
      },
      {
        "name": "toSymbol",
        "comment": " Create a `Symbol` from an Elm `String`. This will fail\nand return `Nothing` if the string is not a valid symbol, compare\nthe [EDN spec](https://github.com/edn-format/edn#symbols).\n\n`nil`, `true` and `false` are not valid symbols.\n\n",
        "type": "String -> Maybe.Maybe Encode.Symbol"
      },
      {
        "name": "toTag",
        "comment": " Create a `Tag` from an Elm `String`. This allows the\nsame strings as `toSymbol`, in addition to `\"nil\"`, `\"true\"`\nand `\"false\"`.\n",
        "type": "String -> Maybe.Maybe Encode.Tag"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]