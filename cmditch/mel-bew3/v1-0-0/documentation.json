[
  {
    "name": "Web3.ChainEff",
    "comment": " For dApp Single Page Applications\nIf your EventSentry or TxSentry live at the top level of your model, and you are sending txs or listening to event in your sub-pages,\nuse ChainEff. See examples.\n\n\n# Core\n\n@docs ChainEff, Sentry, execute, batch, none, map\n\n\n# TxSentry\n\n@docs sendTx, sendWithReceipt, customSend\n\n\n# EventSentry\n\n@docs watchEvent, watchEventOnce, unWatch\n\n",
    "aliases": [
      {
        "name": "Sentry",
        "comment": " ",
        "args": [
          "msg"
        ],
        "type": "( Web3.Eth.TxSentry.TxSentry msg , Web3.Eth.EventSentry.EventSentry msg )"
      }
    ],
    "types": [
      {
        "name": "ChainEff",
        "comment": " ",
        "args": [
          "msg"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "batch",
        "comment": " ",
        "type": "List (Web3.ChainEff.ChainEff msg) -> Web3.ChainEff.ChainEff msg"
      },
      {
        "name": "customSend",
        "comment": " ",
        "type": "Web3.Eth.TxSentry.CustomSend msg -> Web3.Eth.Types.Send -> Web3.ChainEff.ChainEff msg"
      },
      {
        "name": "execute",
        "comment": " ",
        "type": "Web3.ChainEff.Sentry msg -> Web3.ChainEff.ChainEff msg -> ( Web3.ChainEff.Sentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "map",
        "comment": " ",
        "type": "(subMsg -> msg) -> Web3.ChainEff.ChainEff subMsg -> Web3.ChainEff.ChainEff msg"
      },
      {
        "name": "none",
        "comment": " ",
        "type": "Web3.ChainEff.ChainEff msg"
      },
      {
        "name": "sendTx",
        "comment": " ",
        "type": "(Web3.Eth.Types.Tx -> msg) -> Web3.Eth.Types.Send -> Web3.ChainEff.ChainEff msg"
      },
      {
        "name": "sendWithReceipt",
        "comment": " ",
        "type": "(Web3.Eth.Types.Tx -> msg) -> (Web3.Eth.Types.TxReceipt -> msg) -> Web3.Eth.Types.Send -> Web3.ChainEff.ChainEff msg"
      },
      {
        "name": "unWatch",
        "comment": " ",
        "type": "Web3.Eth.Types.LogFilter -> Web3.ChainEff.ChainEff msg"
      },
      {
        "name": "watchEvent",
        "comment": " ",
        "type": "(Json.Decode.Value -> msg) -> Web3.Eth.Types.LogFilter -> Web3.ChainEff.ChainEff msg"
      },
      {
        "name": "watchEventOnce",
        "comment": " ",
        "type": "(Json.Decode.Value -> msg) -> Web3.Eth.Types.LogFilter -> Web3.ChainEff.ChainEff msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Eth.TxSentry",
    "comment": "\n\n\n# Core\n\n@docs TxSentry, Msg, update, init, listen\n\n\n# Send Txs\n\n@docs send, sendWithReceipt\n\n\n# Custom Send\n\n@docs CustomSend, customSend\n\n\n# Utils\n\n@docs withDebug, changeNode\n\n",
    "aliases": [
      {
        "name": "CustomSend",
        "comment": " ",
        "args": [
          "msg"
        ],
        "type": "{ onSign : Maybe.Maybe (Web3.Eth.Types.TxHash -> msg) , onBroadcast : Maybe.Maybe (Web3.Eth.Types.Tx -> msg) , onMined : Maybe.Maybe (Web3.Eth.Types.TxReceipt -> msg) }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " ",
        "args": [],
        "cases": []
      },
      {
        "name": "TxSentry",
        "comment": " ",
        "args": [
          "msg"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "changeNode",
        "comment": " Look into the errors this might cause, some kind of cleanup process should probably occur on changing a node.\n",
        "type": "String -> Web3.Eth.TxSentry.TxSentry msg -> Web3.Eth.TxSentry.TxSentry msg"
      },
      {
        "name": "customSend",
        "comment": " ",
        "type": "Web3.Eth.TxSentry.CustomSend msg -> Web3.Eth.Types.Send -> Web3.Eth.TxSentry.TxSentry msg -> ( Web3.Eth.TxSentry.TxSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "init",
        "comment": " ",
        "type": "( (Json.Decode.Value -> Web3.Eth.TxSentry.Msg) -> Platform.Sub.Sub Web3.Eth.TxSentry.Msg , Json.Decode.Value -> Platform.Cmd.Cmd Web3.Eth.TxSentry.Msg ) -> (Web3.Eth.TxSentry.Msg -> msg) -> String -> Web3.Eth.TxSentry.TxSentry msg"
      },
      {
        "name": "listen",
        "comment": " ",
        "type": "Web3.Eth.TxSentry.TxSentry msg -> Platform.Sub.Sub msg"
      },
      {
        "name": "send",
        "comment": " ",
        "type": "(Web3.Eth.Types.Tx -> msg) -> Web3.Eth.Types.Send -> Web3.Eth.TxSentry.TxSentry msg -> ( Web3.Eth.TxSentry.TxSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "sendWithReceipt",
        "comment": " ",
        "type": "(Web3.Eth.Types.Tx -> msg) -> (Web3.Eth.Types.TxReceipt -> msg) -> Web3.Eth.Types.Send -> Web3.Eth.TxSentry.TxSentry msg -> ( Web3.Eth.TxSentry.TxSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "update",
        "comment": " ",
        "type": "Web3.Eth.TxSentry.Msg -> Web3.Eth.TxSentry.TxSentry msg -> ( Web3.Eth.TxSentry.TxSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "withDebug",
        "comment": " ",
        "type": "Web3.Eth.TxSentry.TxSentry msg -> Web3.Eth.TxSentry.TxSentry msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Shh",
    "comment": " Whipser API\n\n@docs version, post, newIdentity\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "newIdentity",
        "comment": " ",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Web3.Shh.Types.WhisperId"
      },
      {
        "name": "post",
        "comment": " ",
        "type": "Web3.Types.HttpProvider -> Web3.Shh.Types.Post -> Task.Task Http.Error Bool"
      },
      {
        "name": "version",
        "comment": " ",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Int"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Eth.EventSentry",
    "comment": " Listen to contract events, and other chain activity\n\n\n# Types\n\n@docs EventSentry, Msg, FilterKey\n\n\n# Core\n\n@docs init, update, changeNode, listen, withDebug\n\n\n# Contract Events/Logs\n\n@docs watch, watchOnce, unWatch, logFilterKey\n\n\n# Blocks\n\n@docs newBlocks, unWatchNewBlocks, nextBlock\n\n\n# Pending Transactions\n\n@docs pendingTxs, unWatchPendingTxs\n\n",
    "aliases": [
      {
        "name": "FilterKey",
        "comment": " (Contract Address, Event Topic)\n\nNeed to come up with a better Key scheme to avoid collisions\nMaybe by hashing the Filter params\n\n",
        "args": [],
        "type": "( String, String )"
      }
    ],
    "types": [
      {
        "name": "EventSentry",
        "comment": " ",
        "args": [
          "msg"
        ],
        "cases": []
      },
      {
        "name": "Msg",
        "comment": " ",
        "args": [
          "msg"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "changeNode",
        "comment": " ",
        "type": "String -> Web3.Eth.EventSentry.EventSentry msg -> Web3.Eth.EventSentry.EventSentry msg"
      },
      {
        "name": "init",
        "comment": " ",
        "type": "String -> Web3.Eth.EventSentry.EventSentry msg"
      },
      {
        "name": "listen",
        "comment": " ",
        "type": "Web3.Eth.EventSentry.EventSentry msg -> (Web3.Eth.EventSentry.Msg msg -> msg) -> Platform.Sub.Sub msg"
      },
      {
        "name": "logFilterKey",
        "comment": " ",
        "type": "Web3.Eth.Types.LogFilter -> Web3.Eth.EventSentry.FilterKey"
      },
      {
        "name": "newBlocks",
        "comment": " ",
        "type": "(Web3.Eth.Types.BlockHead -> msg) -> Web3.Eth.EventSentry.EventSentry msg -> ( Web3.Eth.EventSentry.EventSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "nextBlock",
        "comment": " ",
        "type": "(Web3.Eth.Types.BlockHead -> msg) -> Web3.Eth.EventSentry.EventSentry msg -> ( Web3.Eth.EventSentry.EventSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "pendingTxs",
        "comment": " ",
        "type": "(Web3.Eth.Types.TxHash -> msg) -> Web3.Eth.EventSentry.EventSentry msg -> ( Web3.Eth.EventSentry.EventSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "unWatch",
        "comment": " ",
        "type": "Web3.Eth.Types.LogFilter -> Web3.Eth.EventSentry.EventSentry msg -> ( Web3.Eth.EventSentry.EventSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "unWatchNewBlocks",
        "comment": " ",
        "type": "Web3.Eth.EventSentry.EventSentry msg -> ( Web3.Eth.EventSentry.EventSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "unWatchPendingTxs",
        "comment": " ",
        "type": "Web3.Eth.EventSentry.EventSentry msg -> ( Web3.Eth.EventSentry.EventSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "update",
        "comment": " ",
        "type": "Web3.Eth.EventSentry.Msg msg -> Web3.Eth.EventSentry.EventSentry msg -> ( Web3.Eth.EventSentry.EventSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "watch",
        "comment": " ",
        "type": "(Json.Decode.Value -> msg) -> Web3.Eth.Types.LogFilter -> Web3.Eth.EventSentry.EventSentry msg -> ( Web3.Eth.EventSentry.EventSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "watchOnce",
        "comment": " ",
        "type": "(Json.Decode.Value -> msg) -> Web3.Eth.Types.LogFilter -> Web3.Eth.EventSentry.EventSentry msg -> ( Web3.Eth.EventSentry.EventSentry msg, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "withDebug",
        "comment": " ",
        "type": "Web3.Eth.EventSentry.EventSentry msg -> Web3.Eth.EventSentry.EventSentry msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Eth",
    "comment": " Ethereum RPC Methods\n\nSee the [official docs][rpc-docs] for reference.\n\n[rpc-docs]: [https://github.com/ethereum/wiki/wiki/JSON-RPC]\n\n\n# Contracts\n\n@docs call, estimateGas, getStorageAt, getCode, callAtBlock, getStorageAtBlock, getCodeAtBlock\n\n\n# Transactions\n\n@docs getTx, getTxReceipt, send, sendTx, sendRawTx, getTxByBlockHashAndIndex, getTxByBlockNumberAndIndex\n\n\n# Address/Accounts\n\n@docs getBalance, getTxCount, getBalanceAtBlock, getTxCountAtBlock\n\n\n# Blocks\n\n@docs getBlockNumber, getBlock, getBlockByHash, getBlockWithTxObjs, getBlockByHashWithTxObjs, getBlockTxCount, getBlockTxCountByHash, getUncleCount, getUncleCountByHash, getUncleAtIndex, getUncleByBlockHashAtIndex\n\n\n# Filter/Logs/Events\n\n@docs getLogs, newFilter, newBlockFilter, newPendingTxFilter, getFilterChanges, getFilterLogs, uninstallFilter\n\n\n# Misc\n\n@docs sign, protocolVersion, syncing, coinbase, mining, hashrate, gasPrice, accounts\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "accounts",
        "comment": " Returns a list of addresses owned by client.\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error (List Web3.Eth.Types.Address)"
      },
      {
        "name": "call",
        "comment": " Call a function on an Ethereum contract.\nUseful for reading data from contracts, or simulating a transaction before doing a Send.\n\nUse the elm-web3-contract code generator to produce an interface for a smart contract from it's ABI.\n\nNote: The decoder for a call is baked into the Call record for a simpler developer experience.\n\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.Call a -> Task.Task Http.Error a"
      },
      {
        "name": "callAtBlock",
        "comment": " Call a function on an Ethereum contract from a particular point in history.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockId -> Web3.Eth.Types.Call a -> Task.Task Http.Error a"
      },
      {
        "name": "coinbase",
        "comment": " Get the client's coinbase address.\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Web3.Eth.Types.Address"
      },
      {
        "name": "estimateGas",
        "comment": " Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.\n\nNote that the estimate may be significantly more than the amount of gas actually used by the transaction,\nfor a variety of reasons including EVM mechanics and node performance.\n\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.Call a -> Task.Task Http.Error Int"
      },
      {
        "name": "gasPrice",
        "comment": " Get the current price per gas in wei\n\nNote: not always accurate. See EthGasStation website\n\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error BigInt.BigInt"
      },
      {
        "name": "getBalance",
        "comment": " Get the balance of a given address/account.\nReturns Wei amount as BigInt\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.Address -> Task.Task Http.Error BigInt.BigInt"
      },
      {
        "name": "getBalanceAtBlock",
        "comment": " Get the balance of a given address/account, at a certain block height\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockId -> Web3.Eth.Types.Address -> Task.Task Http.Error BigInt.BigInt"
      },
      {
        "name": "getBlock",
        "comment": " Get information about a block given a valid block number.\n\nThe transactions field will be an array of TxHash's mined during this block.\n\n",
        "type": "Web3.Types.HttpProvider -> Int -> Task.Task Http.Error (Web3.Eth.Types.Block Web3.Eth.Types.TxHash)"
      },
      {
        "name": "getBlockByHash",
        "comment": " Get information about a block given a valid block hash.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockHash -> Task.Task Http.Error (Web3.Eth.Types.Block Web3.Eth.Types.TxHash)"
      },
      {
        "name": "getBlockByHashWithTxObjs",
        "comment": " See getBlockWithTxObjs.\n\nUses block hash instead of nunmber for the identifier.\n\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockHash -> Task.Task Http.Error (Web3.Eth.Types.Block Web3.Eth.Types.Tx)"
      },
      {
        "name": "getBlockNumber",
        "comment": " Get the number of the most recent block.\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Int"
      },
      {
        "name": "getBlockTxCount",
        "comment": " Get the number of transactions in a block from a given block number.\n",
        "type": "Web3.Types.HttpProvider -> Int -> Task.Task Http.Error Int"
      },
      {
        "name": "getBlockTxCountByHash",
        "comment": " Get the number of transactions in a block from a given block hash.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockHash -> Task.Task Http.Error Int"
      },
      {
        "name": "getBlockWithTxObjs",
        "comment": " See getBlock.\n\nThe transactions field will be an array of Tx objects instead of TxHash's.\n\n",
        "type": "Web3.Types.HttpProvider -> Int -> Task.Task Http.Error (Web3.Eth.Types.Block Web3.Eth.Types.Tx)"
      },
      {
        "name": "getCode",
        "comment": " Returns the bytecode from a contract at a given address.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.Address -> Task.Task Http.Error String"
      },
      {
        "name": "getCodeAtBlock",
        "comment": " Returns the bytecode from a contract at a given address, at a certain block height.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockId -> Web3.Eth.Types.Address -> Task.Task Http.Error String"
      },
      {
        "name": "getFilterChanges",
        "comment": " Polling method for a filter, which returns an array of logs which occurred since last poll.\n\nUse the correct decoder for the given filter type:\n\n    newFilter : Event a\n    newBlockFilter : BlockHeader?? TODO\n    newPendingTxFilter : TxHash\n\n",
        "type": "Web3.Types.HttpProvider -> Json.Decode.Decoder a -> Web3.Types.FilterId -> Task.Task Http.Error (List a)"
      },
      {
        "name": "getFilterLogs",
        "comment": " Returns an array of all logs matching filter with given id.\n",
        "type": "Web3.Types.HttpProvider -> Json.Decode.Decoder a -> Web3.Types.FilterId -> Task.Task Http.Error (List a)"
      },
      {
        "name": "getLogs",
        "comment": " Get an array of all logs matching a given filter object.\nMost likely you won't need this, as they are generated for you in elm-web3-contract\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.LogFilter -> Task.Task Http.Error (List Web3.Eth.Types.Log)"
      },
      {
        "name": "getStorageAt",
        "comment": " Returns the value from a storage position at a given address.\nSee Ethereum JSON-RPC methods for specification on retrieving data from complex data structures like maps.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.Address -> Int -> Task.Task Http.Error String"
      },
      {
        "name": "getStorageAtBlock",
        "comment": " Returns the value from a storage position at a given address, at a certain block height.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockId -> Web3.Eth.Types.Address -> Int -> Task.Task Http.Error String"
      },
      {
        "name": "getTx",
        "comment": " Get transaction information from it's hash.\nIncludes pre-execution info: value, nonce, data/input, gas, gasPrice, to, and from.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.TxHash -> Task.Task Http.Error Web3.Eth.Types.Tx"
      },
      {
        "name": "getTxByBlockHashAndIndex",
        "comment": " Get a transaction by it's index in a certain block given the block hash.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockHash -> Int -> Task.Task Http.Error Web3.Eth.Types.Tx"
      },
      {
        "name": "getTxByBlockNumberAndIndex",
        "comment": " Get a transaction by it's index in a certain block given the block number.\n",
        "type": "Web3.Types.HttpProvider -> Int -> Int -> Task.Task Http.Error Web3.Eth.Types.Tx"
      },
      {
        "name": "getTxCount",
        "comment": " Get the number of transactions sent from a given address/account.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.Address -> Task.Task Http.Error Int"
      },
      {
        "name": "getTxCountAtBlock",
        "comment": " Get the number of transactions sent from a given address/account at a given block height.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockId -> Web3.Eth.Types.Address -> Task.Task Http.Error Int"
      },
      {
        "name": "getTxReceipt",
        "comment": " Get the receipt of a transaction from it's hash.\nOnly exists after the transaction has been mined.\n\nIncludes post-execution info: gasUsed, cumulativeGasUsed, contractAddress, logs, logsBloom.\nAlso includes the tx execution status (if block is post-byzantium).\n\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.TxHash -> Task.Task Http.Error Web3.Eth.Types.TxReceipt"
      },
      {
        "name": "getUncleAtIndex",
        "comment": " Get information about an uncle given it's index in a block by block number\n",
        "type": "Web3.Types.HttpProvider -> Int -> Int -> Task.Task Http.Error Web3.Eth.Types.Uncle"
      },
      {
        "name": "getUncleByBlockHashAtIndex",
        "comment": " Get information about an uncle given it's index in a block by block hash\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockHash -> Int -> Task.Task Http.Error Web3.Eth.Types.Uncle"
      },
      {
        "name": "getUncleCount",
        "comment": " Get the number of uncles in a given block given a block number.\n",
        "type": "Web3.Types.HttpProvider -> Int -> Task.Task Http.Error Int"
      },
      {
        "name": "getUncleCountByHash",
        "comment": " Get the number of uncles in a given block given a block hash.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.BlockHash -> Task.Task Http.Error Int"
      },
      {
        "name": "hashrate",
        "comment": " Returns the number of hashes per second that the node is mining with.\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Int"
      },
      {
        "name": "mining",
        "comment": " See whether or not a given node is mining.\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Bool"
      },
      {
        "name": "newBlockFilter",
        "comment": " Creates a filter in the node to notify when a new block arrives.\nTo check if the state has changed, call getFilterChanges.\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Web3.Types.FilterId"
      },
      {
        "name": "newFilter",
        "comment": " Establishes a filter object on a given node.\nUseful for contract events.\n\nTo check if the state has changed, call getFilterChanges.\n\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.LogFilter -> Task.Task Http.Error Web3.Types.FilterId"
      },
      {
        "name": "newPendingTxFilter",
        "comment": " Creates a filter in the node to notify when new pending transactions arrive.\nTo check if the state has changed, call getFilterChanges.\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Web3.Types.FilterId"
      },
      {
        "name": "protocolVersion",
        "comment": " Get the current ethereum protocol version.\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Int"
      },
      {
        "name": "send",
        "comment": " Prepare a Call to be executed on chain.\nOnly useful if your keys live on the node your talking too.\n\nNOTE: You probably don't need this.\nIf you're writing a proper dApp, look at using the TxSentry to interface with wallets like MetaMask.\n\n",
        "type": "Web3.Eth.Types.Call a -> Web3.Eth.Types.Send"
      },
      {
        "name": "sendRawTx",
        "comment": " Broadcast a signed transaction\n",
        "type": "Web3.Types.HttpProvider -> String -> Task.Task Http.Error Web3.Eth.Types.TxHash"
      },
      {
        "name": "sendTx",
        "comment": " Execute a transaction on chain.\nSee send\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.Send -> Task.Task Http.Error Web3.Eth.Types.TxHash"
      },
      {
        "name": "sign",
        "comment": " Sign an arbitrary chunk of N bytes.\n\nThe sign method calculates an Ethereum specific signature with: sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))).\n\nBy adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim.\n\nNote the address to sign with must be unlocked.\n\n",
        "type": "Web3.Types.HttpProvider -> Web3.Eth.Types.Address -> String -> Task.Task Http.Error String"
      },
      {
        "name": "syncing",
        "comment": " Get the sync status of a particular node.\n\n    Nothing == Not Syncing\n    Just SyncStatus == starting, current, and highestBlock\n\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error (Maybe.Maybe Web3.Eth.Types.SyncStatus)"
      },
      {
        "name": "uninstallFilter",
        "comment": " Uninstalls a filter with given id.\nShould always be called when watch is no longer needed.\nAdditonally Filters timeout when they aren't requested with eth_getFilterChanges for a period of time.\n",
        "type": "Web3.Types.HttpProvider -> Web3.Types.FilterId -> Task.Task Http.Error Web3.Types.FilterId"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Shh.Decode",
    "comment": " Whisper Decoders\n\n@docs whisperId, toWhisperId\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "toWhisperId",
        "comment": " ",
        "type": "String -> Result.Result String Web3.Shh.Types.WhisperId"
      },
      {
        "name": "whisperId",
        "comment": " ",
        "type": "Json.Decode.Decoder Web3.Shh.Types.WhisperId"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Net",
    "comment": " Net RPC methods\n@docs version, clientVersion, listening, peerCount, networkId, name, networkIdDecoder, NetworkId\n",
    "aliases": [],
    "types": [
      {
        "name": "NetworkId",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "Mainnet",
            []
          ],
          [
            "Expanse",
            []
          ],
          [
            "Ropsten",
            []
          ],
          [
            "Rinkeby",
            []
          ],
          [
            "RskMain",
            []
          ],
          [
            "RskTest",
            []
          ],
          [
            "Kovan",
            []
          ],
          [
            "ETCMain",
            []
          ],
          [
            "ETCTest",
            []
          ],
          [
            "Private",
            [
              "Int"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "clientVersion",
        "comment": " Get the current client version.\n\n    Ok \"Mist/v0.9.3/darwin/go1.4.1\"\n\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error String"
      },
      {
        "name": "listening",
        "comment": " Returns true if the node is actively listening for network connections.\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Bool"
      },
      {
        "name": "name",
        "comment": " Get a NetworkId's name\n",
        "type": "Web3.Net.NetworkId -> String"
      },
      {
        "name": "networkId",
        "comment": " Convert an int into it's NetworkId\n",
        "type": "Int -> Web3.Net.NetworkId"
      },
      {
        "name": "networkIdDecoder",
        "comment": " Decode a stringy int into it's NetworkId\n",
        "type": "Json.Decode.Decoder Web3.Net.NetworkId"
      },
      {
        "name": "peerCount",
        "comment": " Get the number of peers currently connected to the client.\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Int"
      },
      {
        "name": "version",
        "comment": " Get the current network id.\n\n    Ok Mainnet\n\n",
        "type": "Web3.Types.HttpProvider -> Task.Task Http.Error Web3.Net.NetworkId"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Evm.Decode",
    "comment": " Decode RPC Responses\n\n@docs EvmDecoder, evmDecode, runDecoder, toElmDecoder\n@docs uint, bool, address, dBytes, sBytes, string, dArray, sArray, ipfsHash\n@docs topic, data, andMap, map2\n\n",
    "aliases": [],
    "types": [
      {
        "name": "EvmDecoder",
        "comment": " ",
        "args": [
          "a"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "address",
        "comment": " ",
        "type": "Web3.Evm.Decode.EvmDecoder Web3.Eth.Types.Address"
      },
      {
        "name": "andMap",
        "comment": " ",
        "type": "Web3.Evm.Decode.EvmDecoder a -> Web3.Evm.Decode.EvmDecoder (a -> b) -> Web3.Evm.Decode.EvmDecoder b"
      },
      {
        "name": "bool",
        "comment": " ",
        "type": "Web3.Evm.Decode.EvmDecoder Bool"
      },
      {
        "name": "dArray",
        "comment": " Decode Dynamically Sized Arrays\n(dArray address) == address[]\n",
        "type": "Web3.Evm.Decode.EvmDecoder a -> Web3.Evm.Decode.EvmDecoder (List a)"
      },
      {
        "name": "dBytes",
        "comment": " ",
        "type": "Web3.Evm.Decode.EvmDecoder String"
      },
      {
        "name": "data",
        "comment": " Useful for decoding data withing events/logs.\n",
        "type": "Int -> Web3.Evm.Decode.EvmDecoder a -> Json.Decode.Decoder a"
      },
      {
        "name": "evmDecode",
        "comment": " ",
        "type": "a -> Web3.Evm.Decode.EvmDecoder a"
      },
      {
        "name": "ipfsHash",
        "comment": " Decodes bytes32 into IPFS Hash (assuming use of 32 byte sha256)\nNot IPFS future proof. See <https://ethereum.stackexchange.com/questions/17094/how-to-store-ipfs-hash-using-bytes>\n",
        "type": "Web3.Evm.Decode.EvmDecoder Web3.Types.IPFSHash"
      },
      {
        "name": "map2",
        "comment": " Chain and Map Decoders\n\nandMap is the same as `apply` or `<*>` in Haskell, except initial arguments are flipped to help with elm pipeline syntax.\n\n",
        "type": "(a -> b -> c) -> Web3.Evm.Decode.EvmDecoder a -> Web3.Evm.Decode.EvmDecoder b -> Web3.Evm.Decode.EvmDecoder c"
      },
      {
        "name": "runDecoder",
        "comment": " ",
        "type": "Web3.Evm.Decode.EvmDecoder a -> String -> Result.Result String a"
      },
      {
        "name": "sArray",
        "comment": " Decode Statically Sized Arrays\n(sArray 10 uint) == uint256[10]\n",
        "type": "Int -> Web3.Evm.Decode.EvmDecoder a -> Web3.Evm.Decode.EvmDecoder (List a)"
      },
      {
        "name": "sBytes",
        "comment": " ",
        "type": "Int -> Web3.Evm.Decode.EvmDecoder String"
      },
      {
        "name": "string",
        "comment": " ",
        "type": "Web3.Evm.Decode.EvmDecoder String"
      },
      {
        "name": "toElmDecoder",
        "comment": " ",
        "type": "Web3.Evm.Decode.EvmDecoder a -> Json.Decode.Decoder a"
      },
      {
        "name": "topic",
        "comment": " Useful for decoding data withing events/logs.\n",
        "type": "Int -> Web3.Evm.Decode.EvmDecoder a -> Json.Decode.Decoder a"
      },
      {
        "name": "uint",
        "comment": " ",
        "type": "Web3.Evm.Decode.EvmDecoder BigInt.BigInt"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Eth.Decode",
    "comment": " Eth Decoders\n\n\n# Simple\n\n@docs address, txHash, blockHash, hex\n\n\n# Complex\n\n@docs block, uncle, blockHead, tx, txReceipt, log, event, syncStatus\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "address",
        "comment": " ",
        "type": "Json.Decode.Decoder Web3.Eth.Types.Address"
      },
      {
        "name": "block",
        "comment": " ",
        "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Web3.Eth.Types.Block a)"
      },
      {
        "name": "blockHash",
        "comment": " ",
        "type": "Json.Decode.Decoder Web3.Eth.Types.BlockHash"
      },
      {
        "name": "blockHead",
        "comment": " ",
        "type": "Json.Decode.Decoder Web3.Eth.Types.BlockHead"
      },
      {
        "name": "event",
        "comment": " ",
        "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Web3.Eth.Types.Event a)"
      },
      {
        "name": "hex",
        "comment": " ",
        "type": "Json.Decode.Decoder Web3.Types.Hex"
      },
      {
        "name": "log",
        "comment": " ",
        "type": "Json.Decode.Decoder Web3.Eth.Types.Log"
      },
      {
        "name": "syncStatus",
        "comment": " ",
        "type": "Json.Decode.Decoder (Maybe.Maybe Web3.Eth.Types.SyncStatus)"
      },
      {
        "name": "tx",
        "comment": " ",
        "type": "Json.Decode.Decoder Web3.Eth.Types.Tx"
      },
      {
        "name": "txHash",
        "comment": " ",
        "type": "Json.Decode.Decoder Web3.Eth.Types.TxHash"
      },
      {
        "name": "txReceipt",
        "comment": " ",
        "type": "Json.Decode.Decoder Web3.Eth.Types.TxReceipt"
      },
      {
        "name": "uncle",
        "comment": " ",
        "type": "Json.Decode.Decoder (Web3.Eth.Types.Block ())"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Shh.Encode",
    "comment": " Whisper Encoders\n\n@docs post\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "post",
        "comment": " ",
        "type": "Web3.Shh.Types.Post -> Json.Encode.Value"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Eth.Encode",
    "comment": " Eth Encoders\n\n\n# Simple\n\n@docs address, txHash, blockHash\n\n\n# Complex\n\n@docs callParams, sendParams, blockId, logFilter\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "address",
        "comment": " ",
        "type": "Web3.Eth.Types.Address -> Json.Encode.Value"
      },
      {
        "name": "blockHash",
        "comment": " ",
        "type": "Web3.Eth.Types.BlockHash -> Json.Encode.Value"
      },
      {
        "name": "blockId",
        "comment": " ",
        "type": "Web3.Eth.Types.BlockId -> Json.Encode.Value"
      },
      {
        "name": "callParams",
        "comment": " ",
        "type": "Web3.Eth.Types.Call a -> Json.Encode.Value"
      },
      {
        "name": "logFilter",
        "comment": " ",
        "type": "Web3.Eth.Types.LogFilter -> Json.Encode.Value"
      },
      {
        "name": "sendParams",
        "comment": " ",
        "type": "Web3.Eth.Types.Send -> Json.Encode.Value"
      },
      {
        "name": "txHash",
        "comment": " ",
        "type": "Web3.Eth.Types.TxHash -> Json.Encode.Value"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Decode",
    "comment": " Decode things\n\n@docs stringInt, hexInt, bigInt, hexTime, hexBool, resultToDecoder, nonZero\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "bigInt",
        "comment": " ",
        "type": "Json.Decode.Decoder BigInt.BigInt"
      },
      {
        "name": "hexBool",
        "comment": " ",
        "type": "Json.Decode.Decoder Bool"
      },
      {
        "name": "hexInt",
        "comment": " ",
        "type": "Json.Decode.Decoder Int"
      },
      {
        "name": "hexTime",
        "comment": " ",
        "type": "Json.Decode.Decoder Time.Time"
      },
      {
        "name": "nonZero",
        "comment": " ",
        "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"
      },
      {
        "name": "resultToDecoder",
        "comment": " ",
        "type": "(String -> Result.Result String a) -> Json.Decode.Decoder a"
      },
      {
        "name": "stringInt",
        "comment": " ",
        "type": "Json.Decode.Decoder Int"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Encode",
    "comment": " Encode rudimentary types\n\n@docs bigInt, hex, hexInt\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "bigInt",
        "comment": " ",
        "type": "BigInt.BigInt -> Json.Encode.Value"
      },
      {
        "name": "hex",
        "comment": " ",
        "type": "Web3.Types.Hex -> Json.Encode.Value"
      },
      {
        "name": "hexInt",
        "comment": " ",
        "type": "Int -> Json.Encode.Value"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Evm.Encode",
    "comment": " Encode before sending RPC Calls\n@docs Encoding, encodeData, encode\n",
    "aliases": [],
    "types": [
      {
        "name": "Encoding",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "AddressE",
            [
              "Web3.Eth.Types.Address"
            ]
          ],
          [
            "UintE",
            [
              "BigInt.BigInt"
            ]
          ],
          [
            "BoolE",
            [
              "Bool"
            ]
          ],
          [
            "DBytesE",
            [
              "String"
            ]
          ],
          [
            "BytesE",
            [
              "String"
            ]
          ],
          [
            "StringE",
            [
              "String"
            ]
          ],
          [
            "ListE",
            [
              "Web3.Evm.Encode.Encoding"
            ]
          ],
          [
            "IPFSHashE",
            [
              "Web3.Types.IPFSHash"
            ]
          ],
          [
            "Custom",
            [
              "String"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "encode",
        "comment": " ",
        "type": "Web3.Evm.Encode.Encoding -> String"
      },
      {
        "name": "encodeData",
        "comment": " ",
        "type": "String -> List Web3.Evm.Encode.Encoding -> Web3.Types.Hex"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Utils",
    "comment": " Conversion, Unit, and Application utilities\n\n\n# Unit\n\n@docs gwei, eth\n\n\n# Application\n\n@docs Retry, retry, valToMsg\n\n\n# Address\n\n@docs toAddress, toChecksumAddress, addressToString, isAddress, isChecksumAddress, isLowerCaseAddress, isUpperCaseAddress\n\n\n# Hex\n\n@docs toHex, hexToString, isHex, hexToAscii, add0x, remove0x\n\n\n# Transaction Hash\n\n@docs toTxHash, txHashToString\n\n\n# Block Hash\n\n@docs toBlockHash, blockHashToString\n\n\n# SHA3\n\n@docs functionSig, keccak256, isSha256\n\n\n# IPFS\n\n@docs ipfsHashToString, ipfsToBytes32, makeIPFSHash\n\n\n# Unsafe\n\n@docs unsafeToHex, unsafeToAddress, unsafeToTxHash, unsafeToBlockHash\n\n",
    "aliases": [
      {
        "name": "Retry",
        "comment": " ",
        "args": [],
        "type": "{ attempts : Int, sleep : Float }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "add0x",
        "comment": " ",
        "type": "String -> String"
      },
      {
        "name": "addressToString",
        "comment": " ",
        "type": "Web3.Eth.Types.Address -> String"
      },
      {
        "name": "blockHashToString",
        "comment": " ",
        "type": "Web3.Eth.Types.BlockHash -> String"
      },
      {
        "name": "eth",
        "comment": " ",
        "type": "Int -> BigInt.BigInt"
      },
      {
        "name": "functionSig",
        "comment": " ",
        "type": "String -> String"
      },
      {
        "name": "gwei",
        "comment": " ",
        "type": "Int -> BigInt.BigInt"
      },
      {
        "name": "hexToAscii",
        "comment": " ",
        "type": "String -> Result.Result String String"
      },
      {
        "name": "hexToString",
        "comment": " ",
        "type": "Web3.Types.Hex -> String"
      },
      {
        "name": "ipfsHashToString",
        "comment": " ",
        "type": "Web3.Types.IPFSHash -> String"
      },
      {
        "name": "ipfsToBytes32",
        "comment": " Prepares IPFS Hash to store as soldity bytes32\n",
        "type": "Web3.Types.IPFSHash -> String"
      },
      {
        "name": "isAddress",
        "comment": " ",
        "type": "String -> Bool"
      },
      {
        "name": "isChecksumAddress",
        "comment": " ",
        "type": "String -> Bool"
      },
      {
        "name": "isHex",
        "comment": " ",
        "type": "String -> Bool"
      },
      {
        "name": "isLowerCaseAddress",
        "comment": " ",
        "type": "String -> Bool"
      },
      {
        "name": "isSha256",
        "comment": " ",
        "type": "String -> Bool"
      },
      {
        "name": "isUpperCaseAddress",
        "comment": " ",
        "type": "String -> Bool"
      },
      {
        "name": "keccak256",
        "comment": " ",
        "type": "String -> String"
      },
      {
        "name": "makeIPFSHash",
        "comment": " ",
        "type": "String -> Result.Result String Web3.Types.IPFSHash"
      },
      {
        "name": "remove0x",
        "comment": " ",
        "type": "String -> String"
      },
      {
        "name": "retry",
        "comment": " ",
        "type": "Web3.Utils.Retry -> Task.Task x a -> Task.Task x a"
      },
      {
        "name": "toAddress",
        "comment": " ",
        "type": "String -> Result.Result String Web3.Eth.Types.Address"
      },
      {
        "name": "toBlockHash",
        "comment": " ",
        "type": "String -> Result.Result String Web3.Eth.Types.BlockHash"
      },
      {
        "name": "toChecksumAddress",
        "comment": " ",
        "type": "String -> Result.Result String Web3.Eth.Types.Address"
      },
      {
        "name": "toHex",
        "comment": " ",
        "type": "String -> Result.Result String Web3.Types.Hex"
      },
      {
        "name": "toTxHash",
        "comment": " ",
        "type": "String -> Result.Result String Web3.Eth.Types.TxHash"
      },
      {
        "name": "txHashToString",
        "comment": " ",
        "type": "Web3.Eth.Types.TxHash -> String"
      },
      {
        "name": "unsafeToAddress",
        "comment": " ",
        "type": "String -> Web3.Eth.Types.Address"
      },
      {
        "name": "unsafeToBlockHash",
        "comment": " ",
        "type": "String -> Web3.Eth.Types.BlockHash"
      },
      {
        "name": "unsafeToHex",
        "comment": " ",
        "type": "String -> Web3.Types.Hex"
      },
      {
        "name": "unsafeToTxHash",
        "comment": " ",
        "type": "String -> Web3.Eth.Types.TxHash"
      },
      {
        "name": "valToMsg",
        "comment": " Help with decoding past a result straight into a Msg\n",
        "type": "(a -> msg) -> (String -> msg) -> Json.Decode.Decoder a -> Json.Encode.Value -> msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Defaults",
    "comment": " Default values.\nFor those withDefault shenanigans.\n\n@docs invalidAddress, zeroAddress, emptyBlockHash, emptyTxHash, emptyLogFilter\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "emptyBlockHash",
        "comment": " ",
        "type": "Web3.Eth.Types.BlockHash"
      },
      {
        "name": "emptyLogFilter",
        "comment": " ",
        "type": "Web3.Eth.Types.LogFilter"
      },
      {
        "name": "emptyTxHash",
        "comment": " ",
        "type": "Web3.Eth.Types.TxHash"
      },
      {
        "name": "invalidAddress",
        "comment": " ",
        "type": "Web3.Eth.Types.Address"
      },
      {
        "name": "zeroAddress",
        "comment": " Danger Will Robinson, why are you using this?\nOnly to burn things should it be used.\n",
        "type": "Web3.Eth.Types.Address"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Eth.Types",
    "comment": " Types\n\n\n# Simple\n\n@docs Address, TxHash, BlockHash, BlockId\n\n\n# Complex\n\n@docs Call, Send, Tx, TxReceipt, Block, Uncle, BlockHead, Log, Event, LogFilter, SyncStatus\n\n",
    "aliases": [
      {
        "name": "Address",
        "comment": " ",
        "args": [],
        "type": "Web3.Internal.Types.Address"
      },
      {
        "name": "Block",
        "comment": " ",
        "args": [
          "a"
        ],
        "type": "{ number : Int , hash : Web3.Eth.Types.BlockHash , parentHash : Web3.Eth.Types.BlockHash , nonce : String , sha3Uncles : String , logsBloom : String , transactionsRoot : String , stateRoot : String , receiptsRoot : String , miner : Web3.Eth.Types.Address , difficulty : BigInt.BigInt , totalDifficulty : BigInt.BigInt , extraData : String , size : Int , gasLimit : Int , gasUsed : Int , timestamp : Time.Time , transactions : List a , uncles : List String }"
      },
      {
        "name": "BlockHash",
        "comment": " ",
        "args": [],
        "type": "Web3.Internal.Types.BlockHash"
      },
      {
        "name": "BlockHead",
        "comment": " ",
        "args": [],
        "type": "{ number : Int , hash : Web3.Eth.Types.BlockHash , parentHash : Web3.Eth.Types.BlockHash , nonce : String , sha3Uncles : String , logsBloom : String , transactionsRoot : String , stateRoot : String , receiptsRoot : String , miner : Web3.Eth.Types.Address , difficulty : BigInt.BigInt , extraData : String , gasLimit : Int , gasUsed : Int , mixHash : String , timestamp : Time.Time }"
      },
      {
        "name": "Call",
        "comment": " ",
        "args": [
          "a"
        ],
        "type": "{ to : Maybe.Maybe Web3.Eth.Types.Address , from : Maybe.Maybe Web3.Eth.Types.Address , gas : Maybe.Maybe Int , gasPrice : Maybe.Maybe BigInt.BigInt , value : Maybe.Maybe BigInt.BigInt , data : Maybe.Maybe Web3.Types.Hex , nonce : Maybe.Maybe Int , decoder : Json.Decode.Decoder a }"
      },
      {
        "name": "Event",
        "comment": " ",
        "args": [
          "a"
        ],
        "type": "{ address : Web3.Eth.Types.Address , data : String , topics : List String , removed : Bool , logIndex : Int , transactionIndex : Int , transactionHash : Web3.Eth.Types.TxHash , blockHash : Web3.Eth.Types.BlockHash , blockNumber : Int , returnData : a }"
      },
      {
        "name": "Log",
        "comment": " ",
        "args": [],
        "type": "{ address : Web3.Eth.Types.Address , data : String , topics : List String , removed : Bool , logIndex : Int , transactionIndex : Int , transactionHash : Web3.Eth.Types.TxHash , blockHash : Web3.Eth.Types.BlockHash , blockNumber : Int }"
      },
      {
        "name": "LogFilter",
        "comment": " NOTE: Different from JSON RPC API, removed some optionality to reduce complexity\n",
        "args": [],
        "type": "{ fromBlock : Web3.Eth.Types.BlockId , toBlock : Web3.Eth.Types.BlockId , address : Web3.Eth.Types.Address , topics : List (Maybe.Maybe String) }"
      },
      {
        "name": "Send",
        "comment": " ",
        "args": [],
        "type": "{ to : Maybe.Maybe Web3.Eth.Types.Address , from : Maybe.Maybe Web3.Eth.Types.Address , gas : Maybe.Maybe Int , gasPrice : Maybe.Maybe BigInt.BigInt , value : Maybe.Maybe BigInt.BigInt , data : Maybe.Maybe Web3.Types.Hex , nonce : Maybe.Maybe Int }"
      },
      {
        "name": "SyncStatus",
        "comment": " ",
        "args": [],
        "type": "{ startingBlock : Int , currentBlock : Int , highestBlock : Int , knownStates : Int , pulledStates : Int }"
      },
      {
        "name": "Tx",
        "comment": " ",
        "args": [],
        "type": "{ hash : Web3.Eth.Types.TxHash , nonce : Int , blockHash : Maybe.Maybe Web3.Eth.Types.BlockHash , blockNumber : Maybe.Maybe Int , transactionIndex : Int , from : Web3.Eth.Types.Address , to : Maybe.Maybe Web3.Eth.Types.Address , value : BigInt.BigInt , gasPrice : BigInt.BigInt , gas : Int , input : String }"
      },
      {
        "name": "TxHash",
        "comment": " ",
        "args": [],
        "type": "Web3.Internal.Types.TxHash"
      },
      {
        "name": "TxReceipt",
        "comment": " ",
        "args": [],
        "type": "{ hash : Web3.Eth.Types.TxHash , index : Int , blockHash : Web3.Eth.Types.BlockHash , blockNumber : Int , gasUsed : BigInt.BigInt , cumulativeGasUsed : BigInt.BigInt , contractAddress : Maybe.Maybe Web3.Eth.Types.Address , logs : List Web3.Eth.Types.Log , logsBloom : String , root : Maybe.Maybe String , status : Maybe.Maybe Bool }"
      },
      {
        "name": "Uncle",
        "comment": " ",
        "args": [],
        "type": "Web3.Eth.Types.Block ()"
      }
    ],
    "types": [
      {
        "name": "BlockId",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "BlockIdNum",
            [
              "Int"
            ]
          ],
          [
            "BlockIdHash",
            [
              "Web3.Eth.Types.BlockHash"
            ]
          ],
          [
            "EarliestBlock",
            []
          ],
          [
            "LatestBlock",
            []
          ],
          [
            "PendingBlock",
            []
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Types",
    "comment": " Web3 Types\n\n@docs HttpProvider, FilterId, Hex, IPFSHash\n\n",
    "aliases": [
      {
        "name": "FilterId",
        "comment": " ",
        "args": [],
        "type": "String"
      },
      {
        "name": "Hex",
        "comment": " ",
        "args": [],
        "type": "Web3.Internal.Types.Hex"
      },
      {
        "name": "HttpProvider",
        "comment": " ",
        "args": [],
        "type": "String"
      },
      {
        "name": "IPFSHash",
        "comment": " ",
        "args": [],
        "type": "Web3.Internal.Types.IPFSHash"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.Shh.Types",
    "comment": " Whisper Types\n\n@docs WhisperId, Post\n\n",
    "aliases": [
      {
        "name": "Post",
        "comment": " ",
        "args": [],
        "type": "{ from : Maybe.Maybe String , to : Maybe.Maybe String , topics : List String , payload : String , priority : Int , ttl : Int }"
      },
      {
        "name": "WhisperId",
        "comment": " ",
        "args": [],
        "type": "Web3.Internal.Types.WhisperId"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Web3.JsonRPC",
    "comment": " Json RPC Helpers\n@docs RpcRequest, buildRequest, defaultRPCBody, rpcBody, encode\n",
    "aliases": [
      {
        "name": "RpcRequest",
        "comment": " ",
        "args": [
          "a"
        ],
        "type": "{ url : String , method : String , params : List Json.Encode.Value , decoder : Json.Decode.Decoder a }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "buildRequest",
        "comment": " ",
        "type": "Web3.JsonRPC.RpcRequest a -> Task.Task Http.Error a"
      },
      {
        "name": "defaultRPCBody",
        "comment": " ",
        "type": "String -> List Json.Encode.Value -> Http.Body"
      },
      {
        "name": "encode",
        "comment": " ",
        "type": "Int -> String -> List Json.Encode.Value -> Json.Encode.Value"
      },
      {
        "name": "rpcBody",
        "comment": " ",
        "type": "Int -> String -> List Json.Encode.Value -> Http.Body"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]